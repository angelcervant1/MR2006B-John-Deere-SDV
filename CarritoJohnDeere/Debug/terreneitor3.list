
terreneitor3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008084  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  08008194  08008194  00018194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083cc  080083cc  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  080083cc  080083cc  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080083cc  080083cc  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080083cc  080083cc  000183cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080083d0  080083d0  000183d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  080083d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005a8  20000090  08008460  00020090  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000638  08008460  00020638  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b5  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012404  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002af7  00000000  00000000  000324fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001168  00000000  00000000  00034ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000da8  00000000  00000000  00036160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019aea  00000000  00000000  00036f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015278  00000000  00000000  000509f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f7d0  00000000  00000000  00065c6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000559c  00000000  00000000  000f543c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000fa9d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000090 	.word	0x20000090
 800012c:	00000000 	.word	0x00000000
 8000130:	0800817c 	.word	0x0800817c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000094 	.word	0x20000094
 800014c:	0800817c 	.word	0x0800817c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2uiz>:
 80009fc:	004a      	lsls	r2, r1, #1
 80009fe:	d211      	bcs.n	8000a24 <__aeabi_d2uiz+0x28>
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a04:	d211      	bcs.n	8000a2a <__aeabi_d2uiz+0x2e>
 8000a06:	d50d      	bpl.n	8000a24 <__aeabi_d2uiz+0x28>
 8000a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d40e      	bmi.n	8000a30 <__aeabi_d2uiz+0x34>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a22:	4770      	bx	lr
 8000a24:	f04f 0000 	mov.w	r0, #0
 8000a28:	4770      	bx	lr
 8000a2a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a2e:	d102      	bne.n	8000a36 <__aeabi_d2uiz+0x3a>
 8000a30:	f04f 30ff 	mov.w	r0, #4294967295
 8000a34:	4770      	bx	lr
 8000a36:	f04f 0000 	mov.w	r0, #0
 8000a3a:	4770      	bx	lr

08000a3c <__aeabi_d2f>:
 8000a3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a40:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a44:	bf24      	itt	cs
 8000a46:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a4a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a4e:	d90d      	bls.n	8000a6c <__aeabi_d2f+0x30>
 8000a50:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a54:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a58:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a5c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a60:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a64:	bf08      	it	eq
 8000a66:	f020 0001 	biceq.w	r0, r0, #1
 8000a6a:	4770      	bx	lr
 8000a6c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a70:	d121      	bne.n	8000ab6 <__aeabi_d2f+0x7a>
 8000a72:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a76:	bfbc      	itt	lt
 8000a78:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a7c:	4770      	bxlt	lr
 8000a7e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a82:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a86:	f1c2 0218 	rsb	r2, r2, #24
 8000a8a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a8e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a92:	fa20 f002 	lsr.w	r0, r0, r2
 8000a96:	bf18      	it	ne
 8000a98:	f040 0001 	orrne.w	r0, r0, #1
 8000a9c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aa4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000aa8:	ea40 000c 	orr.w	r0, r0, ip
 8000aac:	fa23 f302 	lsr.w	r3, r3, r2
 8000ab0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ab4:	e7cc      	b.n	8000a50 <__aeabi_d2f+0x14>
 8000ab6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aba:	d107      	bne.n	8000acc <__aeabi_d2f+0x90>
 8000abc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ac0:	bf1e      	ittt	ne
 8000ac2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ac6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aca:	4770      	bxne	lr
 8000acc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ad0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ad4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop

08000adc <__aeabi_frsub>:
 8000adc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ae0:	e002      	b.n	8000ae8 <__addsf3>
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_fsub>:
 8000ae4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ae8 <__addsf3>:
 8000ae8:	0042      	lsls	r2, r0, #1
 8000aea:	bf1f      	itttt	ne
 8000aec:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000af0:	ea92 0f03 	teqne	r2, r3
 8000af4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000af8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000afc:	d06a      	beq.n	8000bd4 <__addsf3+0xec>
 8000afe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b02:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b06:	bfc1      	itttt	gt
 8000b08:	18d2      	addgt	r2, r2, r3
 8000b0a:	4041      	eorgt	r1, r0
 8000b0c:	4048      	eorgt	r0, r1
 8000b0e:	4041      	eorgt	r1, r0
 8000b10:	bfb8      	it	lt
 8000b12:	425b      	neglt	r3, r3
 8000b14:	2b19      	cmp	r3, #25
 8000b16:	bf88      	it	hi
 8000b18:	4770      	bxhi	lr
 8000b1a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b22:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b26:	bf18      	it	ne
 8000b28:	4240      	negne	r0, r0
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b32:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b36:	bf18      	it	ne
 8000b38:	4249      	negne	r1, r1
 8000b3a:	ea92 0f03 	teq	r2, r3
 8000b3e:	d03f      	beq.n	8000bc0 <__addsf3+0xd8>
 8000b40:	f1a2 0201 	sub.w	r2, r2, #1
 8000b44:	fa41 fc03 	asr.w	ip, r1, r3
 8000b48:	eb10 000c 	adds.w	r0, r0, ip
 8000b4c:	f1c3 0320 	rsb	r3, r3, #32
 8000b50:	fa01 f103 	lsl.w	r1, r1, r3
 8000b54:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b58:	d502      	bpl.n	8000b60 <__addsf3+0x78>
 8000b5a:	4249      	negs	r1, r1
 8000b5c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b60:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b64:	d313      	bcc.n	8000b8e <__addsf3+0xa6>
 8000b66:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b6a:	d306      	bcc.n	8000b7a <__addsf3+0x92>
 8000b6c:	0840      	lsrs	r0, r0, #1
 8000b6e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b72:	f102 0201 	add.w	r2, r2, #1
 8000b76:	2afe      	cmp	r2, #254	; 0xfe
 8000b78:	d251      	bcs.n	8000c1e <__addsf3+0x136>
 8000b7a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b82:	bf08      	it	eq
 8000b84:	f020 0001 	biceq.w	r0, r0, #1
 8000b88:	ea40 0003 	orr.w	r0, r0, r3
 8000b8c:	4770      	bx	lr
 8000b8e:	0049      	lsls	r1, r1, #1
 8000b90:	eb40 0000 	adc.w	r0, r0, r0
 8000b94:	3a01      	subs	r2, #1
 8000b96:	bf28      	it	cs
 8000b98:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b9c:	d2ed      	bcs.n	8000b7a <__addsf3+0x92>
 8000b9e:	fab0 fc80 	clz	ip, r0
 8000ba2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ba6:	ebb2 020c 	subs.w	r2, r2, ip
 8000baa:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bae:	bfaa      	itet	ge
 8000bb0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bb4:	4252      	neglt	r2, r2
 8000bb6:	4318      	orrge	r0, r3
 8000bb8:	bfbc      	itt	lt
 8000bba:	40d0      	lsrlt	r0, r2
 8000bbc:	4318      	orrlt	r0, r3
 8000bbe:	4770      	bx	lr
 8000bc0:	f092 0f00 	teq	r2, #0
 8000bc4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bc8:	bf06      	itte	eq
 8000bca:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bce:	3201      	addeq	r2, #1
 8000bd0:	3b01      	subne	r3, #1
 8000bd2:	e7b5      	b.n	8000b40 <__addsf3+0x58>
 8000bd4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bd8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bdc:	bf18      	it	ne
 8000bde:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000be2:	d021      	beq.n	8000c28 <__addsf3+0x140>
 8000be4:	ea92 0f03 	teq	r2, r3
 8000be8:	d004      	beq.n	8000bf4 <__addsf3+0x10c>
 8000bea:	f092 0f00 	teq	r2, #0
 8000bee:	bf08      	it	eq
 8000bf0:	4608      	moveq	r0, r1
 8000bf2:	4770      	bx	lr
 8000bf4:	ea90 0f01 	teq	r0, r1
 8000bf8:	bf1c      	itt	ne
 8000bfa:	2000      	movne	r0, #0
 8000bfc:	4770      	bxne	lr
 8000bfe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c02:	d104      	bne.n	8000c0e <__addsf3+0x126>
 8000c04:	0040      	lsls	r0, r0, #1
 8000c06:	bf28      	it	cs
 8000c08:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c0c:	4770      	bx	lr
 8000c0e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c12:	bf3c      	itt	cc
 8000c14:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c18:	4770      	bxcc	lr
 8000c1a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c1e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c22:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c26:	4770      	bx	lr
 8000c28:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c2c:	bf16      	itet	ne
 8000c2e:	4608      	movne	r0, r1
 8000c30:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c34:	4601      	movne	r1, r0
 8000c36:	0242      	lsls	r2, r0, #9
 8000c38:	bf06      	itte	eq
 8000c3a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c3e:	ea90 0f01 	teqeq	r0, r1
 8000c42:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_ui2f>:
 8000c48:	f04f 0300 	mov.w	r3, #0
 8000c4c:	e004      	b.n	8000c58 <__aeabi_i2f+0x8>
 8000c4e:	bf00      	nop

08000c50 <__aeabi_i2f>:
 8000c50:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c54:	bf48      	it	mi
 8000c56:	4240      	negmi	r0, r0
 8000c58:	ea5f 0c00 	movs.w	ip, r0
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c64:	4601      	mov	r1, r0
 8000c66:	f04f 0000 	mov.w	r0, #0
 8000c6a:	e01c      	b.n	8000ca6 <__aeabi_l2f+0x2a>

08000c6c <__aeabi_ul2f>:
 8000c6c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c70:	bf08      	it	eq
 8000c72:	4770      	bxeq	lr
 8000c74:	f04f 0300 	mov.w	r3, #0
 8000c78:	e00a      	b.n	8000c90 <__aeabi_l2f+0x14>
 8000c7a:	bf00      	nop

08000c7c <__aeabi_l2f>:
 8000c7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c80:	bf08      	it	eq
 8000c82:	4770      	bxeq	lr
 8000c84:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c88:	d502      	bpl.n	8000c90 <__aeabi_l2f+0x14>
 8000c8a:	4240      	negs	r0, r0
 8000c8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c90:	ea5f 0c01 	movs.w	ip, r1
 8000c94:	bf02      	ittt	eq
 8000c96:	4684      	moveq	ip, r0
 8000c98:	4601      	moveq	r1, r0
 8000c9a:	2000      	moveq	r0, #0
 8000c9c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ca0:	bf08      	it	eq
 8000ca2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ca6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000caa:	fabc f28c 	clz	r2, ip
 8000cae:	3a08      	subs	r2, #8
 8000cb0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cb4:	db10      	blt.n	8000cd8 <__aeabi_l2f+0x5c>
 8000cb6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cba:	4463      	add	r3, ip
 8000cbc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cc0:	f1c2 0220 	rsb	r2, r2, #32
 8000cc4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cc8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ccc:	eb43 0002 	adc.w	r0, r3, r2
 8000cd0:	bf08      	it	eq
 8000cd2:	f020 0001 	biceq.w	r0, r0, #1
 8000cd6:	4770      	bx	lr
 8000cd8:	f102 0220 	add.w	r2, r2, #32
 8000cdc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ce0:	f1c2 0220 	rsb	r2, r2, #32
 8000ce4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ce8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cec:	eb43 0002 	adc.w	r0, r3, r2
 8000cf0:	bf08      	it	eq
 8000cf2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_fmul>:
 8000cf8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cfc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d00:	bf1e      	ittt	ne
 8000d02:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d06:	ea92 0f0c 	teqne	r2, ip
 8000d0a:	ea93 0f0c 	teqne	r3, ip
 8000d0e:	d06f      	beq.n	8000df0 <__aeabi_fmul+0xf8>
 8000d10:	441a      	add	r2, r3
 8000d12:	ea80 0c01 	eor.w	ip, r0, r1
 8000d16:	0240      	lsls	r0, r0, #9
 8000d18:	bf18      	it	ne
 8000d1a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d1e:	d01e      	beq.n	8000d5e <__aeabi_fmul+0x66>
 8000d20:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d24:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d28:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d2c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d30:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d34:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d38:	bf3e      	ittt	cc
 8000d3a:	0049      	lslcc	r1, r1, #1
 8000d3c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d40:	005b      	lslcc	r3, r3, #1
 8000d42:	ea40 0001 	orr.w	r0, r0, r1
 8000d46:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d4a:	2afd      	cmp	r2, #253	; 0xfd
 8000d4c:	d81d      	bhi.n	8000d8a <__aeabi_fmul+0x92>
 8000d4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d52:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d56:	bf08      	it	eq
 8000d58:	f020 0001 	biceq.w	r0, r0, #1
 8000d5c:	4770      	bx	lr
 8000d5e:	f090 0f00 	teq	r0, #0
 8000d62:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d66:	bf08      	it	eq
 8000d68:	0249      	lsleq	r1, r1, #9
 8000d6a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d6e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d72:	3a7f      	subs	r2, #127	; 0x7f
 8000d74:	bfc2      	ittt	gt
 8000d76:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d7a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d7e:	4770      	bxgt	lr
 8000d80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d84:	f04f 0300 	mov.w	r3, #0
 8000d88:	3a01      	subs	r2, #1
 8000d8a:	dc5d      	bgt.n	8000e48 <__aeabi_fmul+0x150>
 8000d8c:	f112 0f19 	cmn.w	r2, #25
 8000d90:	bfdc      	itt	le
 8000d92:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d96:	4770      	bxle	lr
 8000d98:	f1c2 0200 	rsb	r2, r2, #0
 8000d9c:	0041      	lsls	r1, r0, #1
 8000d9e:	fa21 f102 	lsr.w	r1, r1, r2
 8000da2:	f1c2 0220 	rsb	r2, r2, #32
 8000da6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000daa:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dae:	f140 0000 	adc.w	r0, r0, #0
 8000db2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000db6:	bf08      	it	eq
 8000db8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dbc:	4770      	bx	lr
 8000dbe:	f092 0f00 	teq	r2, #0
 8000dc2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dc6:	bf02      	ittt	eq
 8000dc8:	0040      	lsleq	r0, r0, #1
 8000dca:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dce:	3a01      	subeq	r2, #1
 8000dd0:	d0f9      	beq.n	8000dc6 <__aeabi_fmul+0xce>
 8000dd2:	ea40 000c 	orr.w	r0, r0, ip
 8000dd6:	f093 0f00 	teq	r3, #0
 8000dda:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dde:	bf02      	ittt	eq
 8000de0:	0049      	lsleq	r1, r1, #1
 8000de2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000de6:	3b01      	subeq	r3, #1
 8000de8:	d0f9      	beq.n	8000dde <__aeabi_fmul+0xe6>
 8000dea:	ea41 010c 	orr.w	r1, r1, ip
 8000dee:	e78f      	b.n	8000d10 <__aeabi_fmul+0x18>
 8000df0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000df4:	ea92 0f0c 	teq	r2, ip
 8000df8:	bf18      	it	ne
 8000dfa:	ea93 0f0c 	teqne	r3, ip
 8000dfe:	d00a      	beq.n	8000e16 <__aeabi_fmul+0x11e>
 8000e00:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e04:	bf18      	it	ne
 8000e06:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e0a:	d1d8      	bne.n	8000dbe <__aeabi_fmul+0xc6>
 8000e0c:	ea80 0001 	eor.w	r0, r0, r1
 8000e10:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e14:	4770      	bx	lr
 8000e16:	f090 0f00 	teq	r0, #0
 8000e1a:	bf17      	itett	ne
 8000e1c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e20:	4608      	moveq	r0, r1
 8000e22:	f091 0f00 	teqne	r1, #0
 8000e26:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e2a:	d014      	beq.n	8000e56 <__aeabi_fmul+0x15e>
 8000e2c:	ea92 0f0c 	teq	r2, ip
 8000e30:	d101      	bne.n	8000e36 <__aeabi_fmul+0x13e>
 8000e32:	0242      	lsls	r2, r0, #9
 8000e34:	d10f      	bne.n	8000e56 <__aeabi_fmul+0x15e>
 8000e36:	ea93 0f0c 	teq	r3, ip
 8000e3a:	d103      	bne.n	8000e44 <__aeabi_fmul+0x14c>
 8000e3c:	024b      	lsls	r3, r1, #9
 8000e3e:	bf18      	it	ne
 8000e40:	4608      	movne	r0, r1
 8000e42:	d108      	bne.n	8000e56 <__aeabi_fmul+0x15e>
 8000e44:	ea80 0001 	eor.w	r0, r0, r1
 8000e48:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e54:	4770      	bx	lr
 8000e56:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e5a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e5e:	4770      	bx	lr

08000e60 <__aeabi_fdiv>:
 8000e60:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e64:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e68:	bf1e      	ittt	ne
 8000e6a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e6e:	ea92 0f0c 	teqne	r2, ip
 8000e72:	ea93 0f0c 	teqne	r3, ip
 8000e76:	d069      	beq.n	8000f4c <__aeabi_fdiv+0xec>
 8000e78:	eba2 0203 	sub.w	r2, r2, r3
 8000e7c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e80:	0249      	lsls	r1, r1, #9
 8000e82:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e86:	d037      	beq.n	8000ef8 <__aeabi_fdiv+0x98>
 8000e88:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e8c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e90:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e94:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e98:	428b      	cmp	r3, r1
 8000e9a:	bf38      	it	cc
 8000e9c:	005b      	lslcc	r3, r3, #1
 8000e9e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ea2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	bf24      	itt	cs
 8000eaa:	1a5b      	subcs	r3, r3, r1
 8000eac:	ea40 000c 	orrcs.w	r0, r0, ip
 8000eb0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000eb4:	bf24      	itt	cs
 8000eb6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eba:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ebe:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ec2:	bf24      	itt	cs
 8000ec4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ec8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ecc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ed0:	bf24      	itt	cs
 8000ed2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ed6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eda:	011b      	lsls	r3, r3, #4
 8000edc:	bf18      	it	ne
 8000ede:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ee2:	d1e0      	bne.n	8000ea6 <__aeabi_fdiv+0x46>
 8000ee4:	2afd      	cmp	r2, #253	; 0xfd
 8000ee6:	f63f af50 	bhi.w	8000d8a <__aeabi_fmul+0x92>
 8000eea:	428b      	cmp	r3, r1
 8000eec:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ef0:	bf08      	it	eq
 8000ef2:	f020 0001 	biceq.w	r0, r0, #1
 8000ef6:	4770      	bx	lr
 8000ef8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000efc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f00:	327f      	adds	r2, #127	; 0x7f
 8000f02:	bfc2      	ittt	gt
 8000f04:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f08:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f0c:	4770      	bxgt	lr
 8000f0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f12:	f04f 0300 	mov.w	r3, #0
 8000f16:	3a01      	subs	r2, #1
 8000f18:	e737      	b.n	8000d8a <__aeabi_fmul+0x92>
 8000f1a:	f092 0f00 	teq	r2, #0
 8000f1e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f22:	bf02      	ittt	eq
 8000f24:	0040      	lsleq	r0, r0, #1
 8000f26:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f2a:	3a01      	subeq	r2, #1
 8000f2c:	d0f9      	beq.n	8000f22 <__aeabi_fdiv+0xc2>
 8000f2e:	ea40 000c 	orr.w	r0, r0, ip
 8000f32:	f093 0f00 	teq	r3, #0
 8000f36:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f3a:	bf02      	ittt	eq
 8000f3c:	0049      	lsleq	r1, r1, #1
 8000f3e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f42:	3b01      	subeq	r3, #1
 8000f44:	d0f9      	beq.n	8000f3a <__aeabi_fdiv+0xda>
 8000f46:	ea41 010c 	orr.w	r1, r1, ip
 8000f4a:	e795      	b.n	8000e78 <__aeabi_fdiv+0x18>
 8000f4c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f50:	ea92 0f0c 	teq	r2, ip
 8000f54:	d108      	bne.n	8000f68 <__aeabi_fdiv+0x108>
 8000f56:	0242      	lsls	r2, r0, #9
 8000f58:	f47f af7d 	bne.w	8000e56 <__aeabi_fmul+0x15e>
 8000f5c:	ea93 0f0c 	teq	r3, ip
 8000f60:	f47f af70 	bne.w	8000e44 <__aeabi_fmul+0x14c>
 8000f64:	4608      	mov	r0, r1
 8000f66:	e776      	b.n	8000e56 <__aeabi_fmul+0x15e>
 8000f68:	ea93 0f0c 	teq	r3, ip
 8000f6c:	d104      	bne.n	8000f78 <__aeabi_fdiv+0x118>
 8000f6e:	024b      	lsls	r3, r1, #9
 8000f70:	f43f af4c 	beq.w	8000e0c <__aeabi_fmul+0x114>
 8000f74:	4608      	mov	r0, r1
 8000f76:	e76e      	b.n	8000e56 <__aeabi_fmul+0x15e>
 8000f78:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f7c:	bf18      	it	ne
 8000f7e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f82:	d1ca      	bne.n	8000f1a <__aeabi_fdiv+0xba>
 8000f84:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f88:	f47f af5c 	bne.w	8000e44 <__aeabi_fmul+0x14c>
 8000f8c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f90:	f47f af3c 	bne.w	8000e0c <__aeabi_fmul+0x114>
 8000f94:	e75f      	b.n	8000e56 <__aeabi_fmul+0x15e>
 8000f96:	bf00      	nop

08000f98 <__gesf2>:
 8000f98:	f04f 3cff 	mov.w	ip, #4294967295
 8000f9c:	e006      	b.n	8000fac <__cmpsf2+0x4>
 8000f9e:	bf00      	nop

08000fa0 <__lesf2>:
 8000fa0:	f04f 0c01 	mov.w	ip, #1
 8000fa4:	e002      	b.n	8000fac <__cmpsf2+0x4>
 8000fa6:	bf00      	nop

08000fa8 <__cmpsf2>:
 8000fa8:	f04f 0c01 	mov.w	ip, #1
 8000fac:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fb0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fb4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fb8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fbc:	bf18      	it	ne
 8000fbe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fc2:	d011      	beq.n	8000fe8 <__cmpsf2+0x40>
 8000fc4:	b001      	add	sp, #4
 8000fc6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fca:	bf18      	it	ne
 8000fcc:	ea90 0f01 	teqne	r0, r1
 8000fd0:	bf58      	it	pl
 8000fd2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fd6:	bf88      	it	hi
 8000fd8:	17c8      	asrhi	r0, r1, #31
 8000fda:	bf38      	it	cc
 8000fdc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fe0:	bf18      	it	ne
 8000fe2:	f040 0001 	orrne.w	r0, r0, #1
 8000fe6:	4770      	bx	lr
 8000fe8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fec:	d102      	bne.n	8000ff4 <__cmpsf2+0x4c>
 8000fee:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ff2:	d105      	bne.n	8001000 <__cmpsf2+0x58>
 8000ff4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ff8:	d1e4      	bne.n	8000fc4 <__cmpsf2+0x1c>
 8000ffa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000ffe:	d0e1      	beq.n	8000fc4 <__cmpsf2+0x1c>
 8001000:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <__aeabi_cfrcmple>:
 8001008:	4684      	mov	ip, r0
 800100a:	4608      	mov	r0, r1
 800100c:	4661      	mov	r1, ip
 800100e:	e7ff      	b.n	8001010 <__aeabi_cfcmpeq>

08001010 <__aeabi_cfcmpeq>:
 8001010:	b50f      	push	{r0, r1, r2, r3, lr}
 8001012:	f7ff ffc9 	bl	8000fa8 <__cmpsf2>
 8001016:	2800      	cmp	r0, #0
 8001018:	bf48      	it	mi
 800101a:	f110 0f00 	cmnmi.w	r0, #0
 800101e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001020 <__aeabi_fcmpeq>:
 8001020:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001024:	f7ff fff4 	bl	8001010 <__aeabi_cfcmpeq>
 8001028:	bf0c      	ite	eq
 800102a:	2001      	moveq	r0, #1
 800102c:	2000      	movne	r0, #0
 800102e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001032:	bf00      	nop

08001034 <__aeabi_fcmplt>:
 8001034:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001038:	f7ff ffea 	bl	8001010 <__aeabi_cfcmpeq>
 800103c:	bf34      	ite	cc
 800103e:	2001      	movcc	r0, #1
 8001040:	2000      	movcs	r0, #0
 8001042:	f85d fb08 	ldr.w	pc, [sp], #8
 8001046:	bf00      	nop

08001048 <__aeabi_fcmple>:
 8001048:	f84d ed08 	str.w	lr, [sp, #-8]!
 800104c:	f7ff ffe0 	bl	8001010 <__aeabi_cfcmpeq>
 8001050:	bf94      	ite	ls
 8001052:	2001      	movls	r0, #1
 8001054:	2000      	movhi	r0, #0
 8001056:	f85d fb08 	ldr.w	pc, [sp], #8
 800105a:	bf00      	nop

0800105c <__aeabi_fcmpge>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff ffd2 	bl	8001008 <__aeabi_cfrcmple>
 8001064:	bf94      	ite	ls
 8001066:	2001      	movls	r0, #1
 8001068:	2000      	movhi	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_fcmpgt>:
 8001070:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001074:	f7ff ffc8 	bl	8001008 <__aeabi_cfrcmple>
 8001078:	bf34      	ite	cc
 800107a:	2001      	movcc	r0, #1
 800107c:	2000      	movcs	r0, #0
 800107e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001082:	bf00      	nop

08001084 <__aeabi_f2iz>:
 8001084:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001088:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800108c:	d30f      	bcc.n	80010ae <__aeabi_f2iz+0x2a>
 800108e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001092:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001096:	d90d      	bls.n	80010b4 <__aeabi_f2iz+0x30>
 8001098:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800109c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010a0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010a4:	fa23 f002 	lsr.w	r0, r3, r2
 80010a8:	bf18      	it	ne
 80010aa:	4240      	negne	r0, r0
 80010ac:	4770      	bx	lr
 80010ae:	f04f 0000 	mov.w	r0, #0
 80010b2:	4770      	bx	lr
 80010b4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010b8:	d101      	bne.n	80010be <__aeabi_f2iz+0x3a>
 80010ba:	0242      	lsls	r2, r0, #9
 80010bc:	d105      	bne.n	80010ca <__aeabi_f2iz+0x46>
 80010be:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010c2:	bf08      	it	eq
 80010c4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80010c8:	4770      	bx	lr
 80010ca:	f04f 0000 	mov.w	r0, #0
 80010ce:	4770      	bx	lr

080010d0 <initMotor>:

Motor backLeft;
Motor backRight;

void initMotor(Motor *motor, uint8_t ID, TIM_HandleTypeDef *timer, uint32_t channel,
               uint16_t digital_one, uint16_t digital_two, TIM_HandleTypeDef *encoderChannel) {
 80010d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80010d4:	b08b      	sub	sp, #44	; 0x2c
 80010d6:	af06      	add	r7, sp, #24
 80010d8:	60f8      	str	r0, [r7, #12]
 80010da:	607a      	str	r2, [r7, #4]
 80010dc:	603b      	str	r3, [r7, #0]
 80010de:	460b      	mov	r3, r1
 80010e0:	72fb      	strb	r3, [r7, #11]
    // Initialize the Motor structure
	motor->timer = timer;
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	687a      	ldr	r2, [r7, #4]
 80010e6:	649a      	str	r2, [r3, #72]	; 0x48
	motor->encoderChannel = encoderChannel;
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80010ec:	64da      	str	r2, [r3, #76]	; 0x4c
    motor->channel = channel;
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	b29a      	uxth	r2, r3
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    motor->digital_one = digital_one;
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80010fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    motor->digital_two = digital_two;
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001104:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    motor->pwm = 0;
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	2200      	movs	r2, #0
 800110c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    motor->details.motorId = ID;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	7afa      	ldrb	r2, [r7, #11]
 8001114:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    motor->details.kPulsesPerRevolution = motor->details.motorId == 1 ? 50 : 50; // PONER AQUI LOS TICKS DEL ENCODER POR VUELTA
 8001118:	68f9      	ldr	r1, [r7, #12]
 800111a:	f04f 0200 	mov.w	r2, #0
 800111e:	4b28      	ldr	r3, [pc, #160]	; (80011c0 <initMotor+0xf0>)
 8001120:	e9c1 2302 	strd	r2, r3, [r1, #8]
    motor->details.kWheelDiameter = 0.090;
 8001124:	68f9      	ldr	r1, [r7, #12]
 8001126:	a322      	add	r3, pc, #136	; (adr r3, 80011b0 <initMotor+0xe0>)
 8001128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112c:	e9c1 2304 	strd	r2, r3, [r1, #16]
    motor->encoderTicks = 0;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	2200      	movs	r2, #0
 8001134:	661a      	str	r2, [r3, #96]	; 0x60
    motor->details.kReductionFactor = 34;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	4a22      	ldr	r2, [pc, #136]	; (80011c4 <initMotor+0xf4>)
 800113a:	619a      	str	r2, [r3, #24]
    motor->details.MotorKP = 2.55;
 800113c:	68f9      	ldr	r1, [r7, #12]
 800113e:	a31e      	add	r3, pc, #120	; (adr r3, 80011b8 <initMotor+0xe8>)
 8001140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001144:	e9c1 2308 	strd	r2, r3, [r1, #32]
    motor->details.MotorKI = 3.5;
 8001148:	68f9      	ldr	r1, [r7, #12]
 800114a:	f04f 0200 	mov.w	r2, #0
 800114e:	4b1e      	ldr	r3, [pc, #120]	; (80011c8 <initMotor+0xf8>)
 8001150:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    motor->details.MotorKD = 0;
 8001154:	68f9      	ldr	r1, [r7, #12]
 8001156:	f04f 0200 	mov.w	r2, #0
 800115a:	f04f 0300 	mov.w	r3, #0
 800115e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    motor->prevMillis = 0;
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	f04f 0200 	mov.w	r2, #0
 8001168:	665a      	str	r2, [r3, #100]	; 0x64
    motor->interval = 100;
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	4a17      	ldr	r2, [pc, #92]	; (80011cc <initMotor+0xfc>)
 800116e:	669a      	str	r2, [r3, #104]	; 0x68
    initPID(&motor->motorPid, motor->details.MotorKP, motor->details.MotorKI, motor->details.MotorKD, 100);
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	f103 0670 	add.w	r6, r3, #112	; 0x70
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001182:	68f9      	ldr	r1, [r7, #12]
 8001184:	e9d1 010c 	ldrd	r0, r1, [r1, #48]	; 0x30
 8001188:	f04f 0800 	mov.w	r8, #0
 800118c:	f8df 9040 	ldr.w	r9, [pc, #64]	; 80011d0 <initMotor+0x100>
 8001190:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8001194:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001198:	e9cd 2300 	strd	r2, r3, [sp]
 800119c:	4622      	mov	r2, r4
 800119e:	462b      	mov	r3, r5
 80011a0:	4630      	mov	r0, r6
 80011a2:	f000 f97d 	bl	80014a0 <initPID>

}
 80011a6:	bf00      	nop
 80011a8:	3714      	adds	r7, #20
 80011aa:	46bd      	mov	sp, r7
 80011ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80011b0:	70a3d70a 	.word	0x70a3d70a
 80011b4:	3fb70a3d 	.word	0x3fb70a3d
 80011b8:	66666666 	.word	0x66666666
 80011bc:	40046666 	.word	0x40046666
 80011c0:	40490000 	.word	0x40490000
 80011c4:	42080000 	.word	0x42080000
 80011c8:	400c0000 	.word	0x400c0000
 80011cc:	42c80000 	.word	0x42c80000
 80011d0:	40590000 	.word	0x40590000

080011d4 <forward>:

void forward(Motor *motor){
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, motor->digital_one, GPIO_PIN_RESET);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80011e2:	2200      	movs	r2, #0
 80011e4:	4619      	mov	r1, r3
 80011e6:	4807      	ldr	r0, [pc, #28]	; (8001204 <forward+0x30>)
 80011e8:	f002 fb22 	bl	8003830 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, motor->digital_two, GPIO_PIN_SET);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 80011f2:	2201      	movs	r2, #1
 80011f4:	4619      	mov	r1, r3
 80011f6:	4803      	ldr	r0, [pc, #12]	; (8001204 <forward+0x30>)
 80011f8:	f002 fb1a 	bl	8003830 <HAL_GPIO_WritePin>
}
 80011fc:	bf00      	nop
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40010c00 	.word	0x40010c00

08001208 <motorStop>:
void backward(Motor *motor){
	HAL_GPIO_WritePin(GPIOB, motor->digital_one, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOB, motor->digital_two, GPIO_PIN_RESET);
}

void motorStop(Motor *motor){
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, motor->digital_one, GPIO_PIN_RESET);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001216:	2200      	movs	r2, #0
 8001218:	4619      	mov	r1, r3
 800121a:	4807      	ldr	r0, [pc, #28]	; (8001238 <motorStop+0x30>)
 800121c:	f002 fb08 	bl	8003830 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, motor->digital_two, GPIO_PIN_RESET);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8001226:	2200      	movs	r2, #0
 8001228:	4619      	mov	r1, r3
 800122a:	4803      	ldr	r0, [pc, #12]	; (8001238 <motorStop+0x30>)
 800122c:	f002 fb00 	bl	8003830 <HAL_GPIO_WritePin>
}
 8001230:	bf00      	nop
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	40010c00 	.word	0x40010c00

0800123c <changePwm>:

void changePwm(Motor *motor, const uint16_t pwm){
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	460b      	mov	r3, r1
 8001246:	807b      	strh	r3, [r7, #2]
	motor->pwm = pwm;
 8001248:	887b      	ldrh	r3, [r7, #2]
 800124a:	b2da      	uxtb	r2, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	//motor->current_speed = motor->pwm
	switch(motor->channel){
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001258:	2b00      	cmp	r3, #0
 800125a:	d002      	beq.n	8001262 <changePwm+0x26>
 800125c:	2b04      	cmp	r3, #4
 800125e:	d008      	beq.n	8001272 <changePwm+0x36>
		break;
	case TIM_CHANNEL_2:
		motor->timer->Instance->CCR2 = motor->pwm;
		break;
	default:
		break;
 8001260:	e00f      	b.n	8001282 <changePwm+0x46>
		motor->timer->Instance->CCR1 = motor->pwm;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8001270:	e007      	b.n	8001282 <changePwm+0x46>
		motor->timer->Instance->CCR2 = motor->pwm;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8001280:	bf00      	nop
	}
}
 8001282:	bf00      	nop
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	bc80      	pop	{r7}
 800128a:	4770      	bx	lr
 800128c:	0000      	movs	r0, r0
	...

08001290 <constantRPM>:

int getEncoderPulses(Motor *motor){
	return motor->encoderTicks;
}

void constantRPM(Motor *motor, const double rpm){
 8001290:	b590      	push	{r4, r7, lr}
 8001292:	b08d      	sub	sp, #52	; 0x34
 8001294:	af04      	add	r7, sp, #16
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	e9c7 2300 	strd	r2, r3, [r7]
	//changePwm(motor->, 200);
	//motorPID
	forward(motor);
 800129c:	68f8      	ldr	r0, [r7, #12]
 800129e:	f7ff ff99 	bl	80011d4 <forward>
	float current_speed = getRPM(motor);
 80012a2:	68f8      	ldr	r0, [r7, #12]
 80012a4:	f000 f858 	bl	8001358 <getRPM>
 80012a8:	61f8      	str	r0, [r7, #28]
	double speed = compute(&motor->motorPid, rpm, current_speed, 0.1);
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	f103 0470 	add.w	r4, r3, #112	; 0x70
 80012b0:	69f8      	ldr	r0, [r7, #28]
 80012b2:	f7ff f8b1 	bl	8000418 <__aeabi_f2d>
 80012b6:	4602      	mov	r2, r0
 80012b8:	460b      	mov	r3, r1
 80012ba:	a115      	add	r1, pc, #84	; (adr r1, 8001310 <constantRPM+0x80>)
 80012bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80012c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80012c4:	e9cd 2300 	strd	r2, r3, [sp]
 80012c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80012cc:	4620      	mov	r0, r4
 80012ce:	f000 f933 	bl	8001538 <compute>
 80012d2:	e9c7 0104 	strd	r0, r1, [r7, #16]
	speed = RpmToPwm(speed);
 80012d6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80012da:	f000 f81d 	bl	8001318 <RpmToPwm>
 80012de:	4603      	mov	r3, r0
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff f899 	bl	8000418 <__aeabi_f2d>
 80012e6:	4602      	mov	r2, r0
 80012e8:	460b      	mov	r3, r1
 80012ea:	e9c7 2304 	strd	r2, r3, [r7, #16]
	changePwm(motor, speed);
 80012ee:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80012f2:	f7ff fb83 	bl	80009fc <__aeabi_d2uiz>
 80012f6:	4603      	mov	r3, r0
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	4619      	mov	r1, r3
 80012fc:	68f8      	ldr	r0, [r7, #12]
 80012fe:	f7ff ff9d 	bl	800123c <changePwm>
}
 8001302:	bf00      	nop
 8001304:	3724      	adds	r7, #36	; 0x24
 8001306:	46bd      	mov	sp, r7
 8001308:	bd90      	pop	{r4, r7, pc}
 800130a:	bf00      	nop
 800130c:	f3af 8000 	nop.w
 8001310:	9999999a 	.word	0x9999999a
 8001314:	3fb99999 	.word	0x3fb99999

08001318 <RpmToPwm>:
float PwmToRpm(const double pwm){
    float rpm = pwm / (255.0 / 350.0);
    return rpm;
}

float RpmToPwm(const double rpm){
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	e9c7 0100 	strd	r0, r1, [r7]
	double pwm = rpm * (255.0 / 350.0);
 8001322:	a30b      	add	r3, pc, #44	; (adr r3, 8001350 <RpmToPwm+0x38>)
 8001324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001328:	e9d7 0100 	ldrd	r0, r1, [r7]
 800132c:	f7ff f8cc 	bl	80004c8 <__aeabi_dmul>
 8001330:	4602      	mov	r2, r0
 8001332:	460b      	mov	r3, r1
 8001334:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return pwm;
 8001338:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800133c:	f7ff fb7e 	bl	8000a3c <__aeabi_d2f>
 8001340:	4603      	mov	r3, r0
}
 8001342:	4618      	mov	r0, r3
 8001344:	3710      	adds	r7, #16
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	f3af 8000 	nop.w
 8001350:	07507507 	.word	0x07507507
 8001354:	3fe75075 	.word	0x3fe75075

08001358 <getRPM>:

float getRPM(Motor *motor) {
 8001358:	b5b0      	push	{r4, r5, r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
    float currentMillis = HAL_GetTick();
 8001360:	f001 fef4 	bl	800314c <HAL_GetTick>
 8001364:	4603      	mov	r3, r0
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff fc6e 	bl	8000c48 <__aeabi_ui2f>
 800136c:	4603      	mov	r3, r0
 800136e:	60fb      	str	r3, [r7, #12]
    if ((currentMillis - motor->prevMillis) >= motor->interval) {
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001374:	4619      	mov	r1, r3
 8001376:	68f8      	ldr	r0, [r7, #12]
 8001378:	f7ff fbb4 	bl	8000ae4 <__aeabi_fsub>
 800137c:	4603      	mov	r3, r0
 800137e:	461a      	mov	r2, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001384:	4619      	mov	r1, r3
 8001386:	4610      	mov	r0, r2
 8001388:	f7ff fe68 	bl	800105c <__aeabi_fcmpge>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d030      	beq.n	80013f4 <getRPM+0x9c>
        motor->prevMillis = currentMillis;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	68fa      	ldr	r2, [r7, #12]
 8001396:	665a      	str	r2, [r3, #100]	; 0x64
        motor->current_speed = 10 * motor->encoderTicks * (60 / (motor->details.kReductionFactor * motor->details.kPulsesPerRevolution));
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800139c:	4613      	mov	r3, r2
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	4413      	add	r3, r2
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff f825 	bl	80003f4 <__aeabi_i2d>
 80013aa:	4604      	mov	r4, r0
 80013ac:	460d      	mov	r5, r1
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	699b      	ldr	r3, [r3, #24]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff f830 	bl	8000418 <__aeabi_f2d>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80013be:	f7ff f883 	bl	80004c8 <__aeabi_dmul>
 80013c2:	4602      	mov	r2, r0
 80013c4:	460b      	mov	r3, r1
 80013c6:	f04f 0000 	mov.w	r0, #0
 80013ca:	490d      	ldr	r1, [pc, #52]	; (8001400 <getRPM+0xa8>)
 80013cc:	f7ff f9a6 	bl	800071c <__aeabi_ddiv>
 80013d0:	4602      	mov	r2, r0
 80013d2:	460b      	mov	r3, r1
 80013d4:	4620      	mov	r0, r4
 80013d6:	4629      	mov	r1, r5
 80013d8:	f7ff f876 	bl	80004c8 <__aeabi_dmul>
 80013dc:	4602      	mov	r2, r0
 80013de:	460b      	mov	r3, r1
 80013e0:	4610      	mov	r0, r2
 80013e2:	4619      	mov	r1, r3
 80013e4:	f7ff fb2a 	bl	8000a3c <__aeabi_d2f>
 80013e8:	4602      	mov	r2, r0
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	655a      	str	r2, [r3, #84]	; 0x54
        motor->encoderTicks = 0;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2200      	movs	r2, #0
 80013f2:	661a      	str	r2, [r3, #96]	; 0x60
        //backLeft.encoderTicks = 0;
    }

    return motor->current_speed;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3710      	adds	r7, #16
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bdb0      	pop	{r4, r5, r7, pc}
 8001400:	404e0000 	.word	0x404e0000

08001404 <initMovement>:
long inputB = 0;
long VueltasA = 0;
long DespA = 0;
uint16_t pulsosEncoderAnterior;

void initMovement(){
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af04      	add	r7, sp, #16
	initMotor(&backRight, 2, &htim2, TIM_CHANNEL_1, GPIO_PIN_12, GPIO_PIN_13, &htim3);
 800140a:	4b13      	ldr	r3, [pc, #76]	; (8001458 <initMovement+0x54>)
 800140c:	9302      	str	r3, [sp, #8]
 800140e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001412:	9301      	str	r3, [sp, #4]
 8001414:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001418:	9300      	str	r3, [sp, #0]
 800141a:	2300      	movs	r3, #0
 800141c:	4a0f      	ldr	r2, [pc, #60]	; (800145c <initMovement+0x58>)
 800141e:	2102      	movs	r1, #2
 8001420:	480f      	ldr	r0, [pc, #60]	; (8001460 <initMovement+0x5c>)
 8001422:	f7ff fe55 	bl	80010d0 <initMotor>
	initMotor(&backLeft, 1, &htim2, TIM_CHANNEL_2, GPIO_PIN_14, GPIO_PIN_15, &htim4);
 8001426:	4b0f      	ldr	r3, [pc, #60]	; (8001464 <initMovement+0x60>)
 8001428:	9302      	str	r3, [sp, #8]
 800142a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800142e:	9301      	str	r3, [sp, #4]
 8001430:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001434:	9300      	str	r3, [sp, #0]
 8001436:	2304      	movs	r3, #4
 8001438:	4a08      	ldr	r2, [pc, #32]	; (800145c <initMovement+0x58>)
 800143a:	2101      	movs	r1, #1
 800143c:	480a      	ldr	r0, [pc, #40]	; (8001468 <initMovement+0x64>)
 800143e:	f7ff fe47 	bl	80010d0 <initMotor>
	initServo(&myServo, 240, 95, 155, &htim1);
 8001442:	4b0a      	ldr	r3, [pc, #40]	; (800146c <initMovement+0x68>)
 8001444:	9300      	str	r3, [sp, #0]
 8001446:	239b      	movs	r3, #155	; 0x9b
 8001448:	225f      	movs	r2, #95	; 0x5f
 800144a:	21f0      	movs	r1, #240	; 0xf0
 800144c:	4808      	ldr	r0, [pc, #32]	; (8001470 <initMovement+0x6c>)
 800144e:	f000 f9a8 	bl	80017a2 <initServo>

}
 8001452:	bf00      	nop
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	20000364 	.word	0x20000364
 800145c:	2000031c 	.word	0x2000031c
 8001460:	20000168 	.word	0x20000168
 8001464:	200003ac 	.word	0x200003ac
 8001468:	200000b0 	.word	0x200000b0
 800146c:	200002d4 	.word	0x200002d4
 8001470:	20000220 	.word	0x20000220

08001474 <stop>:
	changePwm(&backRight, 50);
	forward(&backLeft);
	forward(&backRight);
}

void stop(){
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
	changePwm(&backLeft, 0);
 8001478:	2100      	movs	r1, #0
 800147a:	4807      	ldr	r0, [pc, #28]	; (8001498 <stop+0x24>)
 800147c:	f7ff fede 	bl	800123c <changePwm>
	changePwm(&backRight, 0);
 8001480:	2100      	movs	r1, #0
 8001482:	4806      	ldr	r0, [pc, #24]	; (800149c <stop+0x28>)
 8001484:	f7ff feda 	bl	800123c <changePwm>
	motorStop(&backLeft);
 8001488:	4803      	ldr	r0, [pc, #12]	; (8001498 <stop+0x24>)
 800148a:	f7ff febd 	bl	8001208 <motorStop>
	motorStop(&backRight);
 800148e:	4803      	ldr	r0, [pc, #12]	; (800149c <stop+0x28>)
 8001490:	f7ff feba 	bl	8001208 <motorStop>
}
 8001494:	bf00      	nop
 8001496:	bd80      	pop	{r7, pc}
 8001498:	200000b0 	.word	0x200000b0
 800149c:	20000168 	.word	0x20000168

080014a0 <initPID>:
 *  Created on: Nov 24, 2023
 *      Author: angel
 */
#include "PID.h"

void initPID(PID *pid, const double kP, const double kI, const double kD, const double sample_time){
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	60f8      	str	r0, [r7, #12]
 80014a8:	e9c7 2300 	strd	r2, r3, [r7]
	pid->cv = 0;
 80014ac:	68f9      	ldr	r1, [r7, #12]
 80014ae:	f04f 0200 	mov.w	r2, #0
 80014b2:	f04f 0300 	mov.w	r3, #0
 80014b6:	e9c1 2300 	strd	r2, r3, [r1]
	pid->cv1 = 0;
 80014ba:	68f9      	ldr	r1, [r7, #12]
 80014bc:	f04f 0200 	mov.w	r2, #0
 80014c0:	f04f 0300 	mov.w	r3, #0
 80014c4:	e9c1 2302 	strd	r2, r3, [r1, #8]
    pid->error = 0;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	f04f 0200 	mov.w	r2, #0
 80014ce:	611a      	str	r2, [r3, #16]
    pid->error1 = 0;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	f04f 0200 	mov.w	r2, #0
 80014d6:	615a      	str	r2, [r3, #20]
    pid->error2 = 0;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	f04f 0200 	mov.w	r2, #0
 80014de:	619a      	str	r2, [r3, #24]
    pid->kP = kP;
 80014e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80014e4:	f7ff faaa 	bl	8000a3c <__aeabi_d2f>
 80014e8:	4602      	mov	r2, r0
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	61da      	str	r2, [r3, #28]
    pid->kI = kI;
 80014ee:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80014f2:	f7ff faa3 	bl	8000a3c <__aeabi_d2f>
 80014f6:	4602      	mov	r2, r0
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	621a      	str	r2, [r3, #32]
    pid->kD = kD;
 80014fc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001500:	f7ff fa9c 	bl	8000a3c <__aeabi_d2f>
 8001504:	4602      	mov	r2, r0
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	625a      	str	r2, [r3, #36]	; 0x24
    pid->sample_time = sample_time;
 800150a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800150e:	f7ff fa95 	bl	8000a3c <__aeabi_d2f>
 8001512:	4602      	mov	r2, r0
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	629a      	str	r2, [r3, #40]	; 0x28
    pid->previous_millis = 0;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f04f 0200 	mov.w	r2, #0
 800151e:	631a      	str	r2, [r3, #48]	; 0x30
    pid->current_millis = 0;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	f04f 0200 	mov.w	r2, #0
 8001526:	62da      	str	r2, [r3, #44]	; 0x2c
    pid->pV=0;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	f04f 0200 	mov.w	r2, #0
 800152e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001530:	bf00      	nop
 8001532:	3710      	adds	r7, #16
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}

08001538 <compute>:

double compute(PID *pid, const double setpoint, const double input, const double dt) {
 8001538:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800153c:	b084      	sub	sp, #16
 800153e:	af00      	add	r7, sp, #0
 8001540:	60f8      	str	r0, [r7, #12]
 8001542:	e9c7 2300 	strd	r2, r3, [r7]
	pid->current_millis = HAL_GetTick();
 8001546:	f001 fe01 	bl	800314c <HAL_GetTick>
 800154a:	4603      	mov	r3, r0
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff fb7b 	bl	8000c48 <__aeabi_ui2f>
 8001552:	4602      	mov	r2, r0
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->dt = dt;
 8001558:	68f9      	ldr	r1, [r7, #12]
 800155a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800155e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	pid->pV = input;
 8001562:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001566:	f7ff fa69 	bl	8000a3c <__aeabi_d2f>
 800156a:	4602      	mov	r2, r0
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	635a      	str	r2, [r3, #52]	; 0x34

    pid->error = setpoint - pid->pV;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001574:	4618      	mov	r0, r3
 8001576:	f7fe ff4f 	bl	8000418 <__aeabi_f2d>
 800157a:	4602      	mov	r2, r0
 800157c:	460b      	mov	r3, r1
 800157e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001582:	f7fe fde9 	bl	8000158 <__aeabi_dsub>
 8001586:	4602      	mov	r2, r0
 8001588:	460b      	mov	r3, r1
 800158a:	4610      	mov	r0, r2
 800158c:	4619      	mov	r1, r3
 800158e:	f7ff fa55 	bl	8000a3c <__aeabi_d2f>
 8001592:	4602      	mov	r2, r0
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	611a      	str	r2, [r3, #16]

    pid->cv = pid->cv1 + (pid->kP + pid->kD / pid->dt) * pid->error +
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	69db      	ldr	r3, [r3, #28]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7fe ff38 	bl	8000418 <__aeabi_f2d>
 80015a8:	4680      	mov	r8, r0
 80015aa:	4689      	mov	r9, r1
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7fe ff31 	bl	8000418 <__aeabi_f2d>
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80015bc:	f7ff f8ae 	bl	800071c <__aeabi_ddiv>
 80015c0:	4602      	mov	r2, r0
 80015c2:	460b      	mov	r3, r1
 80015c4:	4640      	mov	r0, r8
 80015c6:	4649      	mov	r1, r9
 80015c8:	f7fe fdc8 	bl	800015c <__adddf3>
 80015cc:	4602      	mov	r2, r0
 80015ce:	460b      	mov	r3, r1
 80015d0:	4690      	mov	r8, r2
 80015d2:	4699      	mov	r9, r3
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	691b      	ldr	r3, [r3, #16]
 80015d8:	4618      	mov	r0, r3
 80015da:	f7fe ff1d 	bl	8000418 <__aeabi_f2d>
 80015de:	4602      	mov	r2, r0
 80015e0:	460b      	mov	r3, r1
 80015e2:	4640      	mov	r0, r8
 80015e4:	4649      	mov	r1, r9
 80015e6:	f7fe ff6f 	bl	80004c8 <__aeabi_dmul>
 80015ea:	4602      	mov	r2, r0
 80015ec:	460b      	mov	r3, r1
 80015ee:	4620      	mov	r0, r4
 80015f0:	4629      	mov	r1, r5
 80015f2:	f7fe fdb3 	bl	800015c <__adddf3>
 80015f6:	4602      	mov	r2, r0
 80015f8:	460b      	mov	r3, r1
 80015fa:	4690      	mov	r8, r2
 80015fc:	4699      	mov	r9, r3
              ((pid->kP) * (-1) + pid->kI * pid->dt - 2 * pid->kD / pid->dt) * pid->error1 +
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	69db      	ldr	r3, [r3, #28]
 8001602:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001606:	4618      	mov	r0, r3
 8001608:	f7fe ff06 	bl	8000418 <__aeabi_f2d>
 800160c:	4604      	mov	r4, r0
 800160e:	460d      	mov	r5, r1
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	6a1b      	ldr	r3, [r3, #32]
 8001614:	4618      	mov	r0, r3
 8001616:	f7fe feff 	bl	8000418 <__aeabi_f2d>
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8001620:	f7fe ff52 	bl	80004c8 <__aeabi_dmul>
 8001624:	4602      	mov	r2, r0
 8001626:	460b      	mov	r3, r1
 8001628:	4620      	mov	r0, r4
 800162a:	4629      	mov	r1, r5
 800162c:	f7fe fd96 	bl	800015c <__adddf3>
 8001630:	4602      	mov	r2, r0
 8001632:	460b      	mov	r3, r1
 8001634:	4614      	mov	r4, r2
 8001636:	461d      	mov	r5, r3
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800163c:	4619      	mov	r1, r3
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff fa52 	bl	8000ae8 <__addsf3>
 8001644:	4603      	mov	r3, r0
 8001646:	4618      	mov	r0, r3
 8001648:	f7fe fee6 	bl	8000418 <__aeabi_f2d>
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8001652:	f7ff f863 	bl	800071c <__aeabi_ddiv>
 8001656:	4602      	mov	r2, r0
 8001658:	460b      	mov	r3, r1
 800165a:	4620      	mov	r0, r4
 800165c:	4629      	mov	r1, r5
 800165e:	f7fe fd7b 	bl	8000158 <__aeabi_dsub>
 8001662:	4602      	mov	r2, r0
 8001664:	460b      	mov	r3, r1
 8001666:	4614      	mov	r4, r2
 8001668:	461d      	mov	r5, r3
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	695b      	ldr	r3, [r3, #20]
 800166e:	4618      	mov	r0, r3
 8001670:	f7fe fed2 	bl	8000418 <__aeabi_f2d>
 8001674:	4602      	mov	r2, r0
 8001676:	460b      	mov	r3, r1
 8001678:	4620      	mov	r0, r4
 800167a:	4629      	mov	r1, r5
 800167c:	f7fe ff24 	bl	80004c8 <__aeabi_dmul>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
    pid->cv = pid->cv1 + (pid->kP + pid->kD / pid->dt) * pid->error +
 8001684:	4640      	mov	r0, r8
 8001686:	4649      	mov	r1, r9
 8001688:	f7fe fd68 	bl	800015c <__adddf3>
 800168c:	4602      	mov	r2, r0
 800168e:	460b      	mov	r3, r1
 8001690:	4614      	mov	r4, r2
 8001692:	461d      	mov	r5, r3
              (pid->kD / pid->dt) * pid->error2;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001698:	4618      	mov	r0, r3
 800169a:	f7fe febd 	bl	8000418 <__aeabi_f2d>
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80016a4:	f7ff f83a 	bl	800071c <__aeabi_ddiv>
 80016a8:	4602      	mov	r2, r0
 80016aa:	460b      	mov	r3, r1
 80016ac:	4690      	mov	r8, r2
 80016ae:	4699      	mov	r9, r3
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7fe feaf 	bl	8000418 <__aeabi_f2d>
 80016ba:	4602      	mov	r2, r0
 80016bc:	460b      	mov	r3, r1
 80016be:	4640      	mov	r0, r8
 80016c0:	4649      	mov	r1, r9
 80016c2:	f7fe ff01 	bl	80004c8 <__aeabi_dmul>
 80016c6:	4602      	mov	r2, r0
 80016c8:	460b      	mov	r3, r1
              ((pid->kP) * (-1) + pid->kI * pid->dt - 2 * pid->kD / pid->dt) * pid->error1 +
 80016ca:	4620      	mov	r0, r4
 80016cc:	4629      	mov	r1, r5
 80016ce:	f7fe fd45 	bl	800015c <__adddf3>
 80016d2:	4602      	mov	r2, r0
 80016d4:	460b      	mov	r3, r1
    pid->cv = pid->cv1 + (pid->kP + pid->kD / pid->dt) * pid->error +
 80016d6:	68f9      	ldr	r1, [r7, #12]
 80016d8:	e9c1 2300 	strd	r2, r3, [r1]

    pid->cv1 = pid->cv;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e2:	68f9      	ldr	r1, [r7, #12]
 80016e4:	e9c1 2302 	strd	r2, r3, [r1, #8]
    pid->error2 = pid->error1;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	695a      	ldr	r2, [r3, #20]
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	619a      	str	r2, [r3, #24]
    pid->error1 = pid->error;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	691a      	ldr	r2, [r3, #16]
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	615a      	str	r2, [r3, #20]

    if(pid->cv > 350.0)
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016fe:	a314      	add	r3, pc, #80	; (adr r3, 8001750 <compute+0x218>)
 8001700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001704:	f7ff f970 	bl	80009e8 <__aeabi_dcmpgt>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d005      	beq.n	800171a <compute+0x1e2>
    	pid->cv = 350.0;
 800170e:	68f9      	ldr	r1, [r7, #12]
 8001710:	a30f      	add	r3, pc, #60	; (adr r3, 8001750 <compute+0x218>)
 8001712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001716:	e9c1 2300 	strd	r2, r3, [r1]
    if(pid->cv < 30.0)
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001720:	f04f 0200 	mov.w	r2, #0
 8001724:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <compute+0x220>)
 8001726:	f7ff f941 	bl	80009ac <__aeabi_dcmplt>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d005      	beq.n	800173c <compute+0x204>
    	pid->cv = 30.0;
 8001730:	68f9      	ldr	r1, [r7, #12]
 8001732:	f04f 0200 	mov.w	r2, #0
 8001736:	4b08      	ldr	r3, [pc, #32]	; (8001758 <compute+0x220>)
 8001738:	e9c1 2300 	strd	r2, r3, [r1]

    return pid->cv;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8001742:	4610      	mov	r0, r2
 8001744:	4619      	mov	r1, r3
 8001746:	3710      	adds	r7, #16
 8001748:	46bd      	mov	sp, r7
 800174a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800174e:	bf00      	nop
 8001750:	00000000 	.word	0x00000000
 8001754:	4075e000 	.word	0x4075e000
 8001758:	403e0000 	.word	0x403e0000

0800175c <PIDreset>:
	pid->kP = kP;
	pid->kI = kI;
	pid->kD = kD;
}

void PIDreset(PID *pid){
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
	pid->cv = 0;
 8001764:	6879      	ldr	r1, [r7, #4]
 8001766:	f04f 0200 	mov.w	r2, #0
 800176a:	f04f 0300 	mov.w	r3, #0
 800176e:	e9c1 2300 	strd	r2, r3, [r1]
	pid->cv1 = 0;
 8001772:	6879      	ldr	r1, [r7, #4]
 8001774:	f04f 0200 	mov.w	r2, #0
 8001778:	f04f 0300 	mov.w	r3, #0
 800177c:	e9c1 2302 	strd	r2, r3, [r1, #8]
    pid->error = 0;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f04f 0200 	mov.w	r2, #0
 8001786:	611a      	str	r2, [r3, #16]
    pid->error1 = 0;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f04f 0200 	mov.w	r2, #0
 800178e:	615a      	str	r2, [r3, #20]
    pid->error2 = 0;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f04f 0200 	mov.w	r2, #0
 8001796:	619a      	str	r2, [r3, #24]
}
 8001798:	bf00      	nop
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	bc80      	pop	{r7}
 80017a0:	4770      	bx	lr

080017a2 <initServo>:
int servoIzq = 230;
int servoDer = 90;
int servo0 = 155;
float tolerance = 45;

void initServo(Servo *servo, uint8_t kMaxRightAngle, uint8_t kMaxLeftAngle, uint8_t kStraighAngle, TIM_HandleTypeDef *timer){
 80017a2:	b480      	push	{r7}
 80017a4:	b083      	sub	sp, #12
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
 80017aa:	4608      	mov	r0, r1
 80017ac:	4611      	mov	r1, r2
 80017ae:	461a      	mov	r2, r3
 80017b0:	4603      	mov	r3, r0
 80017b2:	70fb      	strb	r3, [r7, #3]
 80017b4:	460b      	mov	r3, r1
 80017b6:	70bb      	strb	r3, [r7, #2]
 80017b8:	4613      	mov	r3, r2
 80017ba:	707b      	strb	r3, [r7, #1]
	servo->kMaxRightAngle = kMaxRightAngle;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	78fa      	ldrb	r2, [r7, #3]
 80017c0:	701a      	strb	r2, [r3, #0]
	servo->kMaxLeftAngle = kMaxLeftAngle;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	78ba      	ldrb	r2, [r7, #2]
 80017c6:	705a      	strb	r2, [r3, #1]
	servo->kStraightAngle = kStraighAngle;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	787a      	ldrb	r2, [r7, #1]
 80017cc:	709a      	strb	r2, [r3, #2]
	servo->timer = timer;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	693a      	ldr	r2, [r7, #16]
 80017d2:	605a      	str	r2, [r3, #4]
}
 80017d4:	bf00      	nop
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	bc80      	pop	{r7}
 80017dc:	4770      	bx	lr
	...

080017e0 <moveToDegreesT>:

    // Set the servo position
    myServo.timer->Instance->CCR1 = (int)newServoPosition;
}

void moveToDegreesT(float currentAngle, float setpointAngle, const int tolerance) {
 80017e0:	b590      	push	{r4, r7, lr}
 80017e2:	b089      	sub	sp, #36	; 0x24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	60b9      	str	r1, [r7, #8]
 80017ea:	607a      	str	r2, [r7, #4]
    // Calculate the error between the current angle and setpoint angle
    float error = setpointAngle - currentAngle;
 80017ec:	68f9      	ldr	r1, [r7, #12]
 80017ee:	68b8      	ldr	r0, [r7, #8]
 80017f0:	f7ff f978 	bl	8000ae4 <__aeabi_fsub>
 80017f4:	4603      	mov	r3, r0
 80017f6:	61fb      	str	r3, [r7, #28]

    // Limit the error to ensure it stays within a reasonable range
    if (error > tolerance) {
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f7ff fa29 	bl	8000c50 <__aeabi_i2f>
 80017fe:	4603      	mov	r3, r0
 8001800:	4619      	mov	r1, r3
 8001802:	69f8      	ldr	r0, [r7, #28]
 8001804:	f7ff fc34 	bl	8001070 <__aeabi_fcmpgt>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d005      	beq.n	800181a <moveToDegreesT+0x3a>
        error = tolerance;
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f7ff fa1e 	bl	8000c50 <__aeabi_i2f>
 8001814:	4603      	mov	r3, r0
 8001816:	61fb      	str	r3, [r7, #28]
 8001818:	e013      	b.n	8001842 <moveToDegreesT+0x62>
    } else if (error < -tolerance) {
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	425b      	negs	r3, r3
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff fa16 	bl	8000c50 <__aeabi_i2f>
 8001824:	4603      	mov	r3, r0
 8001826:	4619      	mov	r1, r3
 8001828:	69f8      	ldr	r0, [r7, #28]
 800182a:	f7ff fc03 	bl	8001034 <__aeabi_fcmplt>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d006      	beq.n	8001842 <moveToDegreesT+0x62>
        error = -tolerance;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	425b      	negs	r3, r3
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff fa09 	bl	8000c50 <__aeabi_i2f>
 800183e:	4603      	mov	r3, r0
 8001840:	61fb      	str	r3, [r7, #28]
    }

    // Scale the error to match servo angles
    float scaledError = error * (myServo.kMaxRightAngle - myServo.kStraightAngle) / tolerance;
 8001842:	4b19      	ldr	r3, [pc, #100]	; (80018a8 <moveToDegreesT+0xc8>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	461a      	mov	r2, r3
 8001848:	4b17      	ldr	r3, [pc, #92]	; (80018a8 <moveToDegreesT+0xc8>)
 800184a:	789b      	ldrb	r3, [r3, #2]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	4618      	mov	r0, r3
 8001850:	f7ff f9fe 	bl	8000c50 <__aeabi_i2f>
 8001854:	4603      	mov	r3, r0
 8001856:	69f9      	ldr	r1, [r7, #28]
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff fa4d 	bl	8000cf8 <__aeabi_fmul>
 800185e:	4603      	mov	r3, r0
 8001860:	461c      	mov	r4, r3
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f7ff f9f4 	bl	8000c50 <__aeabi_i2f>
 8001868:	4603      	mov	r3, r0
 800186a:	4619      	mov	r1, r3
 800186c:	4620      	mov	r0, r4
 800186e:	f7ff faf7 	bl	8000e60 <__aeabi_fdiv>
 8001872:	4603      	mov	r3, r0
 8001874:	61bb      	str	r3, [r7, #24]

    // Calculate the new servo position
    float newServoPosition = myServo.kStraightAngle + scaledError;
 8001876:	4b0c      	ldr	r3, [pc, #48]	; (80018a8 <moveToDegreesT+0xc8>)
 8001878:	789b      	ldrb	r3, [r3, #2]
 800187a:	4618      	mov	r0, r3
 800187c:	f7ff f9e8 	bl	8000c50 <__aeabi_i2f>
 8001880:	4603      	mov	r3, r0
 8001882:	4619      	mov	r1, r3
 8001884:	69b8      	ldr	r0, [r7, #24]
 8001886:	f7ff f92f 	bl	8000ae8 <__addsf3>
 800188a:	4603      	mov	r3, r0
 800188c:	617b      	str	r3, [r7, #20]

    // Ensure the new servo position is within the PWM range

    // Set the servo position
    myServo.timer->Instance->CCR1 = (int)newServoPosition;
 800188e:	6978      	ldr	r0, [r7, #20]
 8001890:	f7ff fbf8 	bl	8001084 <__aeabi_f2iz>
 8001894:	4602      	mov	r2, r0
 8001896:	4b04      	ldr	r3, [pc, #16]	; (80018a8 <moveToDegreesT+0xc8>)
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800189e:	bf00      	nop
 80018a0:	3724      	adds	r7, #36	; 0x24
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd90      	pop	{r4, r7, pc}
 80018a6:	bf00      	nop
 80018a8:	20000220 	.word	0x20000220

080018ac <__io_putchar>:

uint8_t buffer_uart[16]= "Hello World";

uint8_t buffer_uart2[]= "0";

PUTCHAR_PROTOTYPE {
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b08c      	sub	sp, #48	; 0x30
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
    char buffer[32]; // Adjust the buffer size as needed
    int len = snprintf(buffer, sizeof(buffer), "%c", ch);
 80018b4:	f107 000c 	add.w	r0, r7, #12
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	4a0a      	ldr	r2, [pc, #40]	; (80018e4 <__io_putchar+0x38>)
 80018bc:	2120      	movs	r1, #32
 80018be:	f005 fc09 	bl	80070d4 <sniprintf>
 80018c2:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (len > 0) {
 80018c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	dd07      	ble.n	80018da <__io_putchar+0x2e>
        HAL_UART_Transmit(&huart1, (uint8_t *)buffer, len, 10); // Transmit the formatted string
 80018ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018cc:	b29a      	uxth	r2, r3
 80018ce:	f107 010c 	add.w	r1, r7, #12
 80018d2:	230a      	movs	r3, #10
 80018d4:	4804      	ldr	r0, [pc, #16]	; (80018e8 <__io_putchar+0x3c>)
 80018d6:	f004 fd0c 	bl	80062f2 <HAL_UART_Transmit>
    }
    return ch;
 80018da:	687b      	ldr	r3, [r7, #4]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3730      	adds	r7, #48	; 0x30
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	08008194 	.word	0x08008194
 80018e8:	200003f4 	.word	0x200003f4

080018ec <HAL_TIM_IC_CaptureCallback>:


Motor *currentMotor;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
     if (htim == &htim3) {
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4a13      	ldr	r2, [pc, #76]	; (8001944 <HAL_TIM_IC_CaptureCallback+0x58>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d10d      	bne.n	8001918 <HAL_TIM_IC_CaptureCallback+0x2c>
    	 currentMotor = &backRight;
 80018fc:	4b12      	ldr	r3, [pc, #72]	; (8001948 <HAL_TIM_IC_CaptureCallback+0x5c>)
 80018fe:	4a13      	ldr	r2, [pc, #76]	; (800194c <HAL_TIM_IC_CaptureCallback+0x60>)
 8001900:	601a      	str	r2, [r3, #0]
    	 currentMotor->encoderTicks++;
 8001902:	4b11      	ldr	r3, [pc, #68]	; (8001948 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001908:	3201      	adds	r2, #1
 800190a:	661a      	str	r2, [r3, #96]	; 0x60
		 currentMotor->encoderPulses++;//backRight.encoderPulses = __HAL_TIM_GET_COUNTER(&htim3);
 800190c:	4b0e      	ldr	r3, [pc, #56]	; (8001948 <HAL_TIM_IC_CaptureCallback+0x5c>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001912:	3201      	adds	r2, #1
 8001914:	65da      	str	r2, [r3, #92]	; 0x5c

    	currentMotor = &backLeft;
    	currentMotor->encoderTicks++;
		currentMotor->encoderPulses++;//backLeft.encoderPulses = __HAL_TIM_GET_COUNTER(&htim4);
    }
}
 8001916:	e010      	b.n	800193a <HAL_TIM_IC_CaptureCallback+0x4e>
    } else if (htim == &htim4) {
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	4a0d      	ldr	r2, [pc, #52]	; (8001950 <HAL_TIM_IC_CaptureCallback+0x64>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d10c      	bne.n	800193a <HAL_TIM_IC_CaptureCallback+0x4e>
    	currentMotor = &backLeft;
 8001920:	4b09      	ldr	r3, [pc, #36]	; (8001948 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8001922:	4a0c      	ldr	r2, [pc, #48]	; (8001954 <HAL_TIM_IC_CaptureCallback+0x68>)
 8001924:	601a      	str	r2, [r3, #0]
    	currentMotor->encoderTicks++;
 8001926:	4b08      	ldr	r3, [pc, #32]	; (8001948 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800192c:	3201      	adds	r2, #1
 800192e:	661a      	str	r2, [r3, #96]	; 0x60
		currentMotor->encoderPulses++;//backLeft.encoderPulses = __HAL_TIM_GET_COUNTER(&htim4);
 8001930:	4b05      	ldr	r3, [pc, #20]	; (8001948 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001936:	3201      	adds	r2, #1
 8001938:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800193a:	bf00      	nop
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	bc80      	pop	{r7}
 8001942:	4770      	bx	lr
 8001944:	20000364 	.word	0x20000364
 8001948:	200004cc 	.word	0x200004cc
 800194c:	20000168 	.word	0x20000168
 8001950:	200003ac 	.word	0x200003ac
 8001954:	200000b0 	.word	0x200000b0

08001958 <calibrateIMU>:



void calibrateIMU(){
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0

		  if(MPU6050_Read_Data() > 0)
 800195c:	f000 ffda 	bl	8002914 <MPU6050_Read_Data>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	f000 8207 	beq.w	8001d76 <calibrateIMU+0x41e>
		  {
			  printf("\nIniciando Calibracion %s \n",msg2 );
 8001968:	4904      	ldr	r1, [pc, #16]	; (800197c <calibrateIMU+0x24>)
 800196a:	4805      	ldr	r0, [pc, #20]	; (8001980 <calibrateIMU+0x28>)
 800196c:	f005 fb44 	bl	8006ff8 <iprintf>
			  while(gyFinal > 0.05 || gyFinal < -0.05)
 8001970:	e1ba      	b.n	8001ce8 <calibrateIMU+0x390>
		  {
			  for(calibrationNum = 0; calibrationNum<2001; calibrationNum++)
 8001972:	4b04      	ldr	r3, [pc, #16]	; (8001984 <calibrateIMU+0x2c>)
 8001974:	f04f 0200 	mov.w	r2, #0
 8001978:	601a      	str	r2, [r3, #0]
 800197a:	e063      	b.n	8001a44 <calibrateIMU+0xec>
 800197c:	20000020 	.word	0x20000020
 8001980:	08008198 	.word	0x08008198
 8001984:	200004a0 	.word	0x200004a0
			  {
			  if(MPU6050_Read_Data() > 0)
 8001988:	f000 ffc4 	bl	8002914 <MPU6050_Read_Data>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d04a      	beq.n	8001a28 <calibrateIMU+0xd0>
			  {
				  gy = MPU6050_Get_Gy() - calibrationGyFinal;
 8001992:	f001 f805 	bl	80029a0 <MPU6050_Get_Gy>
 8001996:	4602      	mov	r2, r0
 8001998:	4b9c      	ldr	r3, [pc, #624]	; (8001c0c <calibrateIMU+0x2b4>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4619      	mov	r1, r3
 800199e:	4610      	mov	r0, r2
 80019a0:	f7ff f8a0 	bl	8000ae4 <__aeabi_fsub>
 80019a4:	4603      	mov	r3, r0
 80019a6:	461a      	mov	r2, r3
 80019a8:	4b99      	ldr	r3, [pc, #612]	; (8001c10 <calibrateIMU+0x2b8>)
 80019aa:	601a      	str	r2, [r3, #0]
				  gx = MPU6050_Get_Gx() - calibrationGxFinal;
 80019ac:	f000 ffde 	bl	800296c <MPU6050_Get_Gx>
 80019b0:	4602      	mov	r2, r0
 80019b2:	4b98      	ldr	r3, [pc, #608]	; (8001c14 <calibrateIMU+0x2bc>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4619      	mov	r1, r3
 80019b8:	4610      	mov	r0, r2
 80019ba:	f7ff f893 	bl	8000ae4 <__aeabi_fsub>
 80019be:	4603      	mov	r3, r0
 80019c0:	461a      	mov	r2, r3
 80019c2:	4b95      	ldr	r3, [pc, #596]	; (8001c18 <calibrateIMU+0x2c0>)
 80019c4:	601a      	str	r2, [r3, #0]
				  gz = MPU6050_Get_Gz() - calibrationGzFinal;
 80019c6:	f001 f805 	bl	80029d4 <MPU6050_Get_Gz>
 80019ca:	4602      	mov	r2, r0
 80019cc:	4b93      	ldr	r3, [pc, #588]	; (8001c1c <calibrateIMU+0x2c4>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4619      	mov	r1, r3
 80019d2:	4610      	mov	r0, r2
 80019d4:	f7ff f886 	bl	8000ae4 <__aeabi_fsub>
 80019d8:	4603      	mov	r3, r0
 80019da:	461a      	mov	r2, r3
 80019dc:	4b90      	ldr	r3, [pc, #576]	; (8001c20 <calibrateIMU+0x2c8>)
 80019de:	601a      	str	r2, [r3, #0]

				  calibrationGx = calibrationGx + gx;
 80019e0:	4b90      	ldr	r3, [pc, #576]	; (8001c24 <calibrateIMU+0x2cc>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a8c      	ldr	r2, [pc, #560]	; (8001c18 <calibrateIMU+0x2c0>)
 80019e6:	6812      	ldr	r2, [r2, #0]
 80019e8:	4611      	mov	r1, r2
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7ff f87c 	bl	8000ae8 <__addsf3>
 80019f0:	4603      	mov	r3, r0
 80019f2:	461a      	mov	r2, r3
 80019f4:	4b8b      	ldr	r3, [pc, #556]	; (8001c24 <calibrateIMU+0x2cc>)
 80019f6:	601a      	str	r2, [r3, #0]
				  calibrationGy = calibrationGy + gy;
 80019f8:	4b8b      	ldr	r3, [pc, #556]	; (8001c28 <calibrateIMU+0x2d0>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a84      	ldr	r2, [pc, #528]	; (8001c10 <calibrateIMU+0x2b8>)
 80019fe:	6812      	ldr	r2, [r2, #0]
 8001a00:	4611      	mov	r1, r2
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7ff f870 	bl	8000ae8 <__addsf3>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	4b86      	ldr	r3, [pc, #536]	; (8001c28 <calibrateIMU+0x2d0>)
 8001a0e:	601a      	str	r2, [r3, #0]
				  calibrationGz = calibrationGz + gz;
 8001a10:	4b86      	ldr	r3, [pc, #536]	; (8001c2c <calibrateIMU+0x2d4>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a82      	ldr	r2, [pc, #520]	; (8001c20 <calibrateIMU+0x2c8>)
 8001a16:	6812      	ldr	r2, [r2, #0]
 8001a18:	4611      	mov	r1, r2
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7ff f864 	bl	8000ae8 <__addsf3>
 8001a20:	4603      	mov	r3, r0
 8001a22:	461a      	mov	r2, r3
 8001a24:	4b81      	ldr	r3, [pc, #516]	; (8001c2c <calibrateIMU+0x2d4>)
 8001a26:	601a      	str	r2, [r3, #0]
			  }
				  else("No lee %s",msg2);
				  HAL_Delay(1);
 8001a28:	2001      	movs	r0, #1
 8001a2a:	f001 fb99 	bl	8003160 <HAL_Delay>
			  for(calibrationNum = 0; calibrationNum<2001; calibrationNum++)
 8001a2e:	4b80      	ldr	r3, [pc, #512]	; (8001c30 <calibrateIMU+0x2d8>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff f856 	bl	8000ae8 <__addsf3>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	461a      	mov	r2, r3
 8001a40:	4b7b      	ldr	r3, [pc, #492]	; (8001c30 <calibrateIMU+0x2d8>)
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	4b7a      	ldr	r3, [pc, #488]	; (8001c30 <calibrateIMU+0x2d8>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	497a      	ldr	r1, [pc, #488]	; (8001c34 <calibrateIMU+0x2dc>)
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7ff faf2 	bl	8001034 <__aeabi_fcmplt>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d198      	bne.n	8001988 <calibrateIMU+0x30>
			}

			printf("calibrationGx = %d\n", (int)calibrationGx);
 8001a56:	4b73      	ldr	r3, [pc, #460]	; (8001c24 <calibrateIMU+0x2cc>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7ff fb12 	bl	8001084 <__aeabi_f2iz>
 8001a60:	4603      	mov	r3, r0
 8001a62:	4619      	mov	r1, r3
 8001a64:	4874      	ldr	r0, [pc, #464]	; (8001c38 <calibrateIMU+0x2e0>)
 8001a66:	f005 fac7 	bl	8006ff8 <iprintf>
			printf("calibrationGy = %d\n", (int)calibrationGy);
 8001a6a:	4b6f      	ldr	r3, [pc, #444]	; (8001c28 <calibrateIMU+0x2d0>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7ff fb08 	bl	8001084 <__aeabi_f2iz>
 8001a74:	4603      	mov	r3, r0
 8001a76:	4619      	mov	r1, r3
 8001a78:	4870      	ldr	r0, [pc, #448]	; (8001c3c <calibrateIMU+0x2e4>)
 8001a7a:	f005 fabd 	bl	8006ff8 <iprintf>
			printf("calibrationGz = %d\n", (int)calibrationGz);
 8001a7e:	4b6b      	ldr	r3, [pc, #428]	; (8001c2c <calibrateIMU+0x2d4>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7ff fafe 	bl	8001084 <__aeabi_f2iz>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	486c      	ldr	r0, [pc, #432]	; (8001c40 <calibrateIMU+0x2e8>)
 8001a8e:	f005 fab3 	bl	8006ff8 <iprintf>

			 calibrationGxFinal= calibrationGx / 2000;
 8001a92:	4b64      	ldr	r3, [pc, #400]	; (8001c24 <calibrateIMU+0x2cc>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	496b      	ldr	r1, [pc, #428]	; (8001c44 <calibrateIMU+0x2ec>)
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff f9e1 	bl	8000e60 <__aeabi_fdiv>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	4b5c      	ldr	r3, [pc, #368]	; (8001c14 <calibrateIMU+0x2bc>)
 8001aa4:	601a      	str	r2, [r3, #0]
			 calibrationGyFinal= calibrationGy / 2000;
 8001aa6:	4b60      	ldr	r3, [pc, #384]	; (8001c28 <calibrateIMU+0x2d0>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4966      	ldr	r1, [pc, #408]	; (8001c44 <calibrateIMU+0x2ec>)
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff f9d7 	bl	8000e60 <__aeabi_fdiv>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	4b55      	ldr	r3, [pc, #340]	; (8001c0c <calibrateIMU+0x2b4>)
 8001ab8:	601a      	str	r2, [r3, #0]
			 calibrationGzFinal= calibrationGz / 2000;
 8001aba:	4b5c      	ldr	r3, [pc, #368]	; (8001c2c <calibrateIMU+0x2d4>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4961      	ldr	r1, [pc, #388]	; (8001c44 <calibrateIMU+0x2ec>)
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7ff f9cd 	bl	8000e60 <__aeabi_fdiv>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	461a      	mov	r2, r3
 8001aca:	4b54      	ldr	r3, [pc, #336]	; (8001c1c <calibrateIMU+0x2c4>)
 8001acc:	601a      	str	r2, [r3, #0]

			printf("calibrationGxFinal = %d\n", (int)calibrationGxFinal);
 8001ace:	4b51      	ldr	r3, [pc, #324]	; (8001c14 <calibrateIMU+0x2bc>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7ff fad6 	bl	8001084 <__aeabi_f2iz>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	4619      	mov	r1, r3
 8001adc:	485a      	ldr	r0, [pc, #360]	; (8001c48 <calibrateIMU+0x2f0>)
 8001ade:	f005 fa8b 	bl	8006ff8 <iprintf>
			printf("calibrationGyFinal = %d\n", (int)calibrationGyFinal);
 8001ae2:	4b4a      	ldr	r3, [pc, #296]	; (8001c0c <calibrateIMU+0x2b4>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff facc 	bl	8001084 <__aeabi_f2iz>
 8001aec:	4603      	mov	r3, r0
 8001aee:	4619      	mov	r1, r3
 8001af0:	4856      	ldr	r0, [pc, #344]	; (8001c4c <calibrateIMU+0x2f4>)
 8001af2:	f005 fa81 	bl	8006ff8 <iprintf>
			printf("calibrationGzFinal = %d\n", (int)calibrationGzFinal);
 8001af6:	4b49      	ldr	r3, [pc, #292]	; (8001c1c <calibrateIMU+0x2c4>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7ff fac2 	bl	8001084 <__aeabi_f2iz>
 8001b00:	4603      	mov	r3, r0
 8001b02:	4619      	mov	r1, r3
 8001b04:	4852      	ldr	r0, [pc, #328]	; (8001c50 <calibrateIMU+0x2f8>)
 8001b06:	f005 fa77 	bl	8006ff8 <iprintf>

			printf("Gx  = %d\n", (int)gx);
 8001b0a:	4b43      	ldr	r3, [pc, #268]	; (8001c18 <calibrateIMU+0x2c0>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7ff fab8 	bl	8001084 <__aeabi_f2iz>
 8001b14:	4603      	mov	r3, r0
 8001b16:	4619      	mov	r1, r3
 8001b18:	484e      	ldr	r0, [pc, #312]	; (8001c54 <calibrateIMU+0x2fc>)
 8001b1a:	f005 fa6d 	bl	8006ff8 <iprintf>
			printf("Gy  = %d\n", (int)gy);
 8001b1e:	4b3c      	ldr	r3, [pc, #240]	; (8001c10 <calibrateIMU+0x2b8>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7ff faae 	bl	8001084 <__aeabi_f2iz>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	484a      	ldr	r0, [pc, #296]	; (8001c58 <calibrateIMU+0x300>)
 8001b2e:	f005 fa63 	bl	8006ff8 <iprintf>
			printf("Gz  = %d\n", (int)gz);
 8001b32:	4b3b      	ldr	r3, [pc, #236]	; (8001c20 <calibrateIMU+0x2c8>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7ff faa4 	bl	8001084 <__aeabi_f2iz>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	4619      	mov	r1, r3
 8001b40:	4846      	ldr	r0, [pc, #280]	; (8001c5c <calibrateIMU+0x304>)
 8001b42:	f005 fa59 	bl	8006ff8 <iprintf>


			gxFinal= gx - calibrationGxFinal;
 8001b46:	4b34      	ldr	r3, [pc, #208]	; (8001c18 <calibrateIMU+0x2c0>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a32      	ldr	r2, [pc, #200]	; (8001c14 <calibrateIMU+0x2bc>)
 8001b4c:	6812      	ldr	r2, [r2, #0]
 8001b4e:	4611      	mov	r1, r2
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7fe ffc7 	bl	8000ae4 <__aeabi_fsub>
 8001b56:	4603      	mov	r3, r0
 8001b58:	461a      	mov	r2, r3
 8001b5a:	4b41      	ldr	r3, [pc, #260]	; (8001c60 <calibrateIMU+0x308>)
 8001b5c:	601a      	str	r2, [r3, #0]
			gyFinal= gy - calibrationGyFinal ;
 8001b5e:	4b2c      	ldr	r3, [pc, #176]	; (8001c10 <calibrateIMU+0x2b8>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a2a      	ldr	r2, [pc, #168]	; (8001c0c <calibrateIMU+0x2b4>)
 8001b64:	6812      	ldr	r2, [r2, #0]
 8001b66:	4611      	mov	r1, r2
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7fe ffbb 	bl	8000ae4 <__aeabi_fsub>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	461a      	mov	r2, r3
 8001b72:	4b3c      	ldr	r3, [pc, #240]	; (8001c64 <calibrateIMU+0x30c>)
 8001b74:	601a      	str	r2, [r3, #0]
			gzFinal = gz - calibrationGzFinal;
 8001b76:	4b2a      	ldr	r3, [pc, #168]	; (8001c20 <calibrateIMU+0x2c8>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a28      	ldr	r2, [pc, #160]	; (8001c1c <calibrateIMU+0x2c4>)
 8001b7c:	6812      	ldr	r2, [r2, #0]
 8001b7e:	4611      	mov	r1, r2
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7fe ffaf 	bl	8000ae4 <__aeabi_fsub>
 8001b86:	4603      	mov	r3, r0
 8001b88:	461a      	mov	r2, r3
 8001b8a:	4b37      	ldr	r3, [pc, #220]	; (8001c68 <calibrateIMU+0x310>)
 8001b8c:	601a      	str	r2, [r3, #0]

			printf("Gx Final = %d\n", (int)gxFinal);
 8001b8e:	4b34      	ldr	r3, [pc, #208]	; (8001c60 <calibrateIMU+0x308>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff fa76 	bl	8001084 <__aeabi_f2iz>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4833      	ldr	r0, [pc, #204]	; (8001c6c <calibrateIMU+0x314>)
 8001b9e:	f005 fa2b 	bl	8006ff8 <iprintf>
			printf("Gy Final = %d\n", (int)gyFinal);
 8001ba2:	4b30      	ldr	r3, [pc, #192]	; (8001c64 <calibrateIMU+0x30c>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7ff fa6c 	bl	8001084 <__aeabi_f2iz>
 8001bac:	4603      	mov	r3, r0
 8001bae:	4619      	mov	r1, r3
 8001bb0:	482f      	ldr	r0, [pc, #188]	; (8001c70 <calibrateIMU+0x318>)
 8001bb2:	f005 fa21 	bl	8006ff8 <iprintf>
			printf("Gz Final = %d\n", (int)gzFinal);
 8001bb6:	4b2c      	ldr	r3, [pc, #176]	; (8001c68 <calibrateIMU+0x310>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7ff fa62 	bl	8001084 <__aeabi_f2iz>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	482b      	ldr	r0, [pc, #172]	; (8001c74 <calibrateIMU+0x31c>)
 8001bc6:	f005 fa17 	bl	8006ff8 <iprintf>

			calibracionSumaTotalGy= calibrationGyFinal + calibracionSumaTotalGy;
 8001bca:	4b10      	ldr	r3, [pc, #64]	; (8001c0c <calibrateIMU+0x2b4>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a2a      	ldr	r2, [pc, #168]	; (8001c78 <calibrateIMU+0x320>)
 8001bd0:	6812      	ldr	r2, [r2, #0]
 8001bd2:	4611      	mov	r1, r2
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7fe ff87 	bl	8000ae8 <__addsf3>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	461a      	mov	r2, r3
 8001bde:	4b26      	ldr	r3, [pc, #152]	; (8001c78 <calibrateIMU+0x320>)
 8001be0:	601a      	str	r2, [r3, #0]
			printf("Gy Suma Total = %d\n", (int)calibracionSumaTotalGy);
 8001be2:	4b25      	ldr	r3, [pc, #148]	; (8001c78 <calibrateIMU+0x320>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff fa4c 	bl	8001084 <__aeabi_f2iz>
 8001bec:	4603      	mov	r3, r0
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4822      	ldr	r0, [pc, #136]	; (8001c7c <calibrateIMU+0x324>)
 8001bf2:	f005 fa01 	bl	8006ff8 <iprintf>

			calibrationGxFinal = calibrationGxFinal + calibrationGxOld;
 8001bf6:	4b07      	ldr	r3, [pc, #28]	; (8001c14 <calibrateIMU+0x2bc>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a21      	ldr	r2, [pc, #132]	; (8001c80 <calibrateIMU+0x328>)
 8001bfc:	6812      	ldr	r2, [r2, #0]
 8001bfe:	4611      	mov	r1, r2
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7fe ff71 	bl	8000ae8 <__addsf3>
 8001c06:	4603      	mov	r3, r0
 8001c08:	461a      	mov	r2, r3
 8001c0a:	e03b      	b.n	8001c84 <calibrateIMU+0x32c>
 8001c0c:	200004a8 	.word	0x200004a8
 8001c10:	20000488 	.word	0x20000488
 8001c14:	200004a4 	.word	0x200004a4
 8001c18:	2000048c 	.word	0x2000048c
 8001c1c:	200004ac 	.word	0x200004ac
 8001c20:	20000490 	.word	0x20000490
 8001c24:	20000494 	.word	0x20000494
 8001c28:	20000498 	.word	0x20000498
 8001c2c:	2000049c 	.word	0x2000049c
 8001c30:	200004a0 	.word	0x200004a0
 8001c34:	44fa2000 	.word	0x44fa2000
 8001c38:	080081b4 	.word	0x080081b4
 8001c3c:	080081c8 	.word	0x080081c8
 8001c40:	080081dc 	.word	0x080081dc
 8001c44:	44fa0000 	.word	0x44fa0000
 8001c48:	080081f0 	.word	0x080081f0
 8001c4c:	0800820c 	.word	0x0800820c
 8001c50:	08008228 	.word	0x08008228
 8001c54:	08008244 	.word	0x08008244
 8001c58:	08008250 	.word	0x08008250
 8001c5c:	0800825c 	.word	0x0800825c
 8001c60:	20000000 	.word	0x20000000
 8001c64:	20000004 	.word	0x20000004
 8001c68:	20000008 	.word	0x20000008
 8001c6c:	08008268 	.word	0x08008268
 8001c70:	08008278 	.word	0x08008278
 8001c74:	08008288 	.word	0x08008288
 8001c78:	200004bc 	.word	0x200004bc
 8001c7c:	08008298 	.word	0x08008298
 8001c80:	200004b0 	.word	0x200004b0
 8001c84:	4b42      	ldr	r3, [pc, #264]	; (8001d90 <calibrateIMU+0x438>)
 8001c86:	601a      	str	r2, [r3, #0]
			calibrationGyFinal = calibrationGyFinal + calibrationGyOld;
 8001c88:	4b42      	ldr	r3, [pc, #264]	; (8001d94 <calibrateIMU+0x43c>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a42      	ldr	r2, [pc, #264]	; (8001d98 <calibrateIMU+0x440>)
 8001c8e:	6812      	ldr	r2, [r2, #0]
 8001c90:	4611      	mov	r1, r2
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7fe ff28 	bl	8000ae8 <__addsf3>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	4b3d      	ldr	r3, [pc, #244]	; (8001d94 <calibrateIMU+0x43c>)
 8001c9e:	601a      	str	r2, [r3, #0]
			calibrationGzFinal= calibrationGzFinal + calibrationGzOld;
 8001ca0:	4b3e      	ldr	r3, [pc, #248]	; (8001d9c <calibrateIMU+0x444>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a3e      	ldr	r2, [pc, #248]	; (8001da0 <calibrateIMU+0x448>)
 8001ca6:	6812      	ldr	r2, [r2, #0]
 8001ca8:	4611      	mov	r1, r2
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7fe ff1c 	bl	8000ae8 <__addsf3>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	4b39      	ldr	r3, [pc, #228]	; (8001d9c <calibrateIMU+0x444>)
 8001cb6:	601a      	str	r2, [r3, #0]
			calibrationGxOld= calibrationGxFinal;
 8001cb8:	4b35      	ldr	r3, [pc, #212]	; (8001d90 <calibrateIMU+0x438>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a39      	ldr	r2, [pc, #228]	; (8001da4 <calibrateIMU+0x44c>)
 8001cbe:	6013      	str	r3, [r2, #0]
			calibrationGyOld= calibrationGyFinal;
 8001cc0:	4b34      	ldr	r3, [pc, #208]	; (8001d94 <calibrateIMU+0x43c>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a34      	ldr	r2, [pc, #208]	; (8001d98 <calibrateIMU+0x440>)
 8001cc6:	6013      	str	r3, [r2, #0]
			calibrationGzOld= calibrationGzFinal;
 8001cc8:	4b34      	ldr	r3, [pc, #208]	; (8001d9c <calibrateIMU+0x444>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a34      	ldr	r2, [pc, #208]	; (8001da0 <calibrateIMU+0x448>)
 8001cce:	6013      	str	r3, [r2, #0]
			calibrationGx =0 ;
 8001cd0:	4b35      	ldr	r3, [pc, #212]	; (8001da8 <calibrateIMU+0x450>)
 8001cd2:	f04f 0200 	mov.w	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]
			calibrationGy = 0;
 8001cd8:	4b34      	ldr	r3, [pc, #208]	; (8001dac <calibrateIMU+0x454>)
 8001cda:	f04f 0200 	mov.w	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]
			calibrationGz = 0;
 8001ce0:	4b33      	ldr	r3, [pc, #204]	; (8001db0 <calibrateIMU+0x458>)
 8001ce2:	f04f 0200 	mov.w	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]
			  while(gyFinal > 0.05 || gyFinal < -0.05)
 8001ce8:	4b32      	ldr	r3, [pc, #200]	; (8001db4 <calibrateIMU+0x45c>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7fe fb93 	bl	8000418 <__aeabi_f2d>
 8001cf2:	a323      	add	r3, pc, #140	; (adr r3, 8001d80 <calibrateIMU+0x428>)
 8001cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf8:	f7fe fe76 	bl	80009e8 <__aeabi_dcmpgt>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	f47f ae37 	bne.w	8001972 <calibrateIMU+0x1a>
 8001d04:	4b2b      	ldr	r3, [pc, #172]	; (8001db4 <calibrateIMU+0x45c>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7fe fb85 	bl	8000418 <__aeabi_f2d>
 8001d0e:	a31e      	add	r3, pc, #120	; (adr r3, 8001d88 <calibrateIMU+0x430>)
 8001d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d14:	f7fe fe4a 	bl	80009ac <__aeabi_dcmplt>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	f47f ae29 	bne.w	8001972 <calibrateIMU+0x1a>
	  }

		printf(" %s\n", msg1);
 8001d20:	4925      	ldr	r1, [pc, #148]	; (8001db8 <calibrateIMU+0x460>)
 8001d22:	4826      	ldr	r0, [pc, #152]	; (8001dbc <calibrateIMU+0x464>)
 8001d24:	f005 f968 	bl	8006ff8 <iprintf>
		printf("Gy Suma Total= %f\n", calibracionSumaTotalGy);
 8001d28:	4b25      	ldr	r3, [pc, #148]	; (8001dc0 <calibrateIMU+0x468>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7fe fb73 	bl	8000418 <__aeabi_f2d>
 8001d32:	4602      	mov	r2, r0
 8001d34:	460b      	mov	r3, r1
 8001d36:	4823      	ldr	r0, [pc, #140]	; (8001dc4 <calibrateIMU+0x46c>)
 8001d38:	f005 f95e 	bl	8006ff8 <iprintf>
		resetVal = 0 ;
 8001d3c:	4b22      	ldr	r3, [pc, #136]	; (8001dc8 <calibrateIMU+0x470>)
 8001d3e:	f04f 0200 	mov.w	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]
		printf("RxBefore= %i \n",rxData );
 8001d44:	4b21      	ldr	r3, [pc, #132]	; (8001dcc <calibrateIMU+0x474>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4821      	ldr	r0, [pc, #132]	; (8001dd0 <calibrateIMU+0x478>)
 8001d4c:	f005 f954 	bl	8006ff8 <iprintf>
		printf("RxAfter= %i \n",rxData );
 8001d50:	4b1e      	ldr	r3, [pc, #120]	; (8001dcc <calibrateIMU+0x474>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	4619      	mov	r1, r3
 8001d56:	481f      	ldr	r0, [pc, #124]	; (8001dd4 <calibrateIMU+0x47c>)
 8001d58:	f005 f94e 	bl	8006ff8 <iprintf>
		printf("ResetVal= %f \n",resetVal);
 8001d5c:	4b1a      	ldr	r3, [pc, #104]	; (8001dc8 <calibrateIMU+0x470>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7fe fb59 	bl	8000418 <__aeabi_f2d>
 8001d66:	4602      	mov	r2, r0
 8001d68:	460b      	mov	r3, r1
 8001d6a:	481b      	ldr	r0, [pc, #108]	; (8001dd8 <calibrateIMU+0x480>)
 8001d6c:	f005 f944 	bl	8006ff8 <iprintf>

			  rxData = 0;
 8001d70:	4b16      	ldr	r3, [pc, #88]	; (8001dcc <calibrateIMU+0x474>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	701a      	strb	r2, [r3, #0]



}
}
 8001d76:	bf00      	nop
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	f3af 8000 	nop.w
 8001d80:	9999999a 	.word	0x9999999a
 8001d84:	3fa99999 	.word	0x3fa99999
 8001d88:	9999999a 	.word	0x9999999a
 8001d8c:	bfa99999 	.word	0xbfa99999
 8001d90:	200004a4 	.word	0x200004a4
 8001d94:	200004a8 	.word	0x200004a8
 8001d98:	200004b4 	.word	0x200004b4
 8001d9c:	200004ac 	.word	0x200004ac
 8001da0:	200004b8 	.word	0x200004b8
 8001da4:	200004b0 	.word	0x200004b0
 8001da8:	20000494 	.word	0x20000494
 8001dac:	20000498 	.word	0x20000498
 8001db0:	2000049c 	.word	0x2000049c
 8001db4:	20000004 	.word	0x20000004
 8001db8:	2000000c 	.word	0x2000000c
 8001dbc:	080082ac 	.word	0x080082ac
 8001dc0:	200004bc 	.word	0x200004bc
 8001dc4:	080082b4 	.word	0x080082b4
 8001dc8:	200004c0 	.word	0x200004c0
 8001dcc:	20000484 	.word	0x20000484
 8001dd0:	080082c8 	.word	0x080082c8
 8001dd4:	080082d8 	.word	0x080082d8
 8001dd8:	080082e8 	.word	0x080082e8
 8001ddc:	00000000 	.word	0x00000000

08001de0 <getAngle>:

float getAngle(){
 8001de0:	b5b0      	push	{r4, r5, r7, lr}
 8001de2:	af00      	add	r7, sp, #0

	  if (calibracionSumaTotalGy != 0){
 8001de4:	4b50      	ldr	r3, [pc, #320]	; (8001f28 <getAngle+0x148>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f04f 0100 	mov.w	r1, #0
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff f917 	bl	8001020 <__aeabi_fcmpeq>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	f040 8089 	bne.w	8001f0c <getAngle+0x12c>
	  if(MPU6050_Read_Data() > 0)
 8001dfa:	f000 fd8b 	bl	8002914 <MPU6050_Read_Data>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d07b      	beq.n	8001efc <getAngle+0x11c>
		  {

			gy = MPU6050_Get_Gy();  //monitoreo de gy
 8001e04:	f000 fdcc 	bl	80029a0 <MPU6050_Get_Gy>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	4a48      	ldr	r2, [pc, #288]	; (8001f2c <getAngle+0x14c>)
 8001e0c:	6013      	str	r3, [r2, #0]

			gy= gy - calibracionSumaTotalGy ; //cambiar por sumaTotalGy
 8001e0e:	4b47      	ldr	r3, [pc, #284]	; (8001f2c <getAngle+0x14c>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a45      	ldr	r2, [pc, #276]	; (8001f28 <getAngle+0x148>)
 8001e14:	6812      	ldr	r2, [r2, #0]
 8001e16:	4611      	mov	r1, r2
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7fe fe63 	bl	8000ae4 <__aeabi_fsub>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	461a      	mov	r2, r3
 8001e22:	4b42      	ldr	r3, [pc, #264]	; (8001f2c <getAngle+0x14c>)
 8001e24:	601a      	str	r2, [r3, #0]
			//Delay de 160 -> gy*0.23
			gyAngle = gyAngle+gy*0.23*0.25  ;
 8001e26:	4b42      	ldr	r3, [pc, #264]	; (8001f30 <getAngle+0x150>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7fe faf4 	bl	8000418 <__aeabi_f2d>
 8001e30:	4604      	mov	r4, r0
 8001e32:	460d      	mov	r5, r1
 8001e34:	4b3d      	ldr	r3, [pc, #244]	; (8001f2c <getAngle+0x14c>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7fe faed 	bl	8000418 <__aeabi_f2d>
 8001e3e:	a336      	add	r3, pc, #216	; (adr r3, 8001f18 <getAngle+0x138>)
 8001e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e44:	f7fe fb40 	bl	80004c8 <__aeabi_dmul>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	4610      	mov	r0, r2
 8001e4e:	4619      	mov	r1, r3
 8001e50:	f04f 0200 	mov.w	r2, #0
 8001e54:	4b37      	ldr	r3, [pc, #220]	; (8001f34 <getAngle+0x154>)
 8001e56:	f7fe fb37 	bl	80004c8 <__aeabi_dmul>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	4620      	mov	r0, r4
 8001e60:	4629      	mov	r1, r5
 8001e62:	f7fe f97b 	bl	800015c <__adddf3>
 8001e66:	4602      	mov	r2, r0
 8001e68:	460b      	mov	r3, r1
 8001e6a:	4610      	mov	r0, r2
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	f7fe fde5 	bl	8000a3c <__aeabi_d2f>
 8001e72:	4603      	mov	r3, r0
 8001e74:	4a2e      	ldr	r2, [pc, #184]	; (8001f30 <getAngle+0x150>)
 8001e76:	6013      	str	r3, [r2, #0]


			if(gyAngle < gyOld - 0.80 || gyAngle > gyOld + 0.80){
 8001e78:	4b2d      	ldr	r3, [pc, #180]	; (8001f30 <getAngle+0x150>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7fe facb 	bl	8000418 <__aeabi_f2d>
 8001e82:	4604      	mov	r4, r0
 8001e84:	460d      	mov	r5, r1
 8001e86:	4b2c      	ldr	r3, [pc, #176]	; (8001f38 <getAngle+0x158>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7fe fac4 	bl	8000418 <__aeabi_f2d>
 8001e90:	a323      	add	r3, pc, #140	; (adr r3, 8001f20 <getAngle+0x140>)
 8001e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e96:	f7fe f95f 	bl	8000158 <__aeabi_dsub>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	4620      	mov	r0, r4
 8001ea0:	4629      	mov	r1, r5
 8001ea2:	f7fe fd83 	bl	80009ac <__aeabi_dcmplt>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d119      	bne.n	8001ee0 <getAngle+0x100>
 8001eac:	4b20      	ldr	r3, [pc, #128]	; (8001f30 <getAngle+0x150>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7fe fab1 	bl	8000418 <__aeabi_f2d>
 8001eb6:	4604      	mov	r4, r0
 8001eb8:	460d      	mov	r5, r1
 8001eba:	4b1f      	ldr	r3, [pc, #124]	; (8001f38 <getAngle+0x158>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7fe faaa 	bl	8000418 <__aeabi_f2d>
 8001ec4:	a316      	add	r3, pc, #88	; (adr r3, 8001f20 <getAngle+0x140>)
 8001ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eca:	f7fe f947 	bl	800015c <__adddf3>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	4620      	mov	r0, r4
 8001ed4:	4629      	mov	r1, r5
 8001ed6:	f7fe fd87 	bl	80009e8 <__aeabi_dcmpgt>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d004      	beq.n	8001eea <getAngle+0x10a>
					gyAngle = gyAngle;
 8001ee0:	4b13      	ldr	r3, [pc, #76]	; (8001f30 <getAngle+0x150>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a12      	ldr	r2, [pc, #72]	; (8001f30 <getAngle+0x150>)
 8001ee6:	6013      	str	r3, [r2, #0]
 8001ee8:	e003      	b.n	8001ef2 <getAngle+0x112>

			}
			else{
				gyAngle=gyOld;
 8001eea:	4b13      	ldr	r3, [pc, #76]	; (8001f38 <getAngle+0x158>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a10      	ldr	r2, [pc, #64]	; (8001f30 <getAngle+0x150>)
 8001ef0:	6013      	str	r3, [r2, #0]
			}

			gyOld = gyAngle;
 8001ef2:	4b0f      	ldr	r3, [pc, #60]	; (8001f30 <getAngle+0x150>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a10      	ldr	r2, [pc, #64]	; (8001f38 <getAngle+0x158>)
 8001ef8:	6013      	str	r3, [r2, #0]
 8001efa:	e007      	b.n	8001f0c <getAngle+0x12c>
		//	printf("gy=  %d\n ",(int)gy);

		  }

	  	  else{
	  		  if(MPU6050_Read_Data() == 0)
 8001efc:	f000 fd0a 	bl	8002914 <MPU6050_Read_Data>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d102      	bne.n	8001f0c <getAngle+0x12c>
	  			  	  printf("No jala\r\n");
 8001f06:	480d      	ldr	r0, [pc, #52]	; (8001f3c <getAngle+0x15c>)
 8001f08:	f005 f8dc 	bl	80070c4 <puts>
	  	  	  }
  }
	  return gyAngle;
 8001f0c:	4b08      	ldr	r3, [pc, #32]	; (8001f30 <getAngle+0x150>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	bdb0      	pop	{r4, r5, r7, pc}
 8001f14:	f3af 8000 	nop.w
 8001f18:	d70a3d71 	.word	0xd70a3d71
 8001f1c:	3fcd70a3 	.word	0x3fcd70a3
 8001f20:	9999999a 	.word	0x9999999a
 8001f24:	3fe99999 	.word	0x3fe99999
 8001f28:	200004bc 	.word	0x200004bc
 8001f2c:	20000488 	.word	0x20000488
 8001f30:	200004c4 	.word	0x200004c4
 8001f34:	3fd00000 	.word	0x3fd00000
 8001f38:	200004c8 	.word	0x200004c8
 8001f3c:	080082f8 	.word	0x080082f8

08001f40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f40:	b5b0      	push	{r4, r5, r7, lr}
 8001f42:	b08e      	sub	sp, #56	; 0x38
 8001f44:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f46:	f001 f8a9 	bl	800309c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f4a:	f000 f959 	bl	8002200 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	HAL_Init();
 8001f4e:	f001 f8a5 	bl	800309c <HAL_Init>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f52:	f000 fc25 	bl	80027a0 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001f56:	f000 f9f5 	bl	8002344 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8001f5a:	f000 fbf7 	bl	800274c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001f5e:	f000 fa93 	bl	8002488 <MX_TIM2_Init>
  MX_I2C1_Init();
 8001f62:	f000 f993 	bl	800228c <MX_I2C1_Init>
  MX_TIM4_Init();
 8001f66:	f000 fb73 	bl	8002650 <MX_TIM4_Init>
  MX_TIM3_Init();
 8001f6a:	f000 fb1d 	bl	80025a8 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001f6e:	f000 fbc3 	bl	80026f8 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8001f72:	f000 f9b9 	bl	80022e8 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */


	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001f76:	2100      	movs	r1, #0
 8001f78:	4891      	ldr	r0, [pc, #580]	; (80021c0 <main+0x280>)
 8001f7a:	f003 f95d 	bl	8005238 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001f7e:	2100      	movs	r1, #0
 8001f80:	4890      	ldr	r0, [pc, #576]	; (80021c4 <main+0x284>)
 8001f82:	f003 f959 	bl	8005238 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001f86:	2104      	movs	r1, #4
 8001f88:	488e      	ldr	r0, [pc, #568]	; (80021c4 <main+0x284>)
 8001f8a:	f003 f955 	bl	8005238 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8001f8e:	213c      	movs	r1, #60	; 0x3c
 8001f90:	488d      	ldr	r0, [pc, #564]	; (80021c8 <main+0x288>)
 8001f92:	f003 fa95 	bl	80054c0 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8001f96:	213c      	movs	r1, #60	; 0x3c
 8001f98:	488c      	ldr	r0, [pc, #560]	; (80021cc <main+0x28c>)
 8001f9a:	f003 fa91 	bl	80054c0 <HAL_TIM_Encoder_Start_IT>

	//HAL_UART_Receive_IT(&huart1,(uint8_t*)&rxData,1);


	//float angle;
	double setpoint = 100.0;
 8001f9e:	f04f 0200 	mov.w	r2, #0
 8001fa2:	4b8b      	ldr	r3, [pc, #556]	; (80021d0 <main+0x290>)
 8001fa4:	e9c7 2306 	strd	r2, r3, [r7, #24]
	float currentMillis = 0;
 8001fa8:	f04f 0300 	mov.w	r3, #0
 8001fac:	637b      	str	r3, [r7, #52]	; 0x34
	float prevMillis = 0;
 8001fae:	f04f 0300 	mov.w	r3, #0
 8001fb2:	617b      	str	r3, [r7, #20]
	float angle;
	float setpointDegrees = 0 ;
 8001fb4:	f04f 0300 	mov.w	r3, #0
 8001fb8:	633b      	str	r3, [r7, #48]	; 0x30
	double distance = 0;
 8001fba:	f04f 0200 	mov.w	r2, #0
 8001fbe:	f04f 0300 	mov.w	r3, #0
 8001fc2:	e9c7 2302 	strd	r2, r3, [r7, #8]
	double totalDistance = 0;
 8001fc6:	f04f 0200 	mov.w	r2, #0
 8001fca:	f04f 0300 	mov.w	r3, #0
 8001fce:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	bool estado = 0; // 0 PARA RECTA Y 1 PARA CURVA
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t counter = 0;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	calibrateIMU();
 8001fde:	f7ff fcbb 	bl	8001958 <calibrateIMU>
	initMovement();
 8001fe2:	f7ff fa0f 	bl	8001404 <initMovement>
	MPU6050_Init();
 8001fe6:	f000 fc6f 	bl	80028c8 <MPU6050_Init>
	currentMotor = &backLeft;
 8001fea:	4b7a      	ldr	r3, [pc, #488]	; (80021d4 <main+0x294>)
 8001fec:	4a7a      	ldr	r2, [pc, #488]	; (80021d8 <main+0x298>)
 8001fee:	601a      	str	r2, [r3, #0]
	PIDreset(&(currentMotor->motorPid));
 8001ff0:	4b78      	ldr	r3, [pc, #480]	; (80021d4 <main+0x294>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	3370      	adds	r3, #112	; 0x70
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7ff fbb0 	bl	800175c <PIDreset>
	currentMotor = &backLeft;
 8001ffc:	4b75      	ldr	r3, [pc, #468]	; (80021d4 <main+0x294>)
 8001ffe:	4a76      	ldr	r2, [pc, #472]	; (80021d8 <main+0x298>)
 8002000:	601a      	str	r2, [r3, #0]
	PIDreset(&(currentMotor->motorPid));
 8002002:	4b74      	ldr	r3, [pc, #464]	; (80021d4 <main+0x294>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	3370      	adds	r3, #112	; 0x70
 8002008:	4618      	mov	r0, r3
 800200a:	f7ff fba7 	bl	800175c <PIDreset>
	while (1)
	{
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
		//goStraight();
		angle = getAngle();
 800200e:	f7ff fee7 	bl	8001de0 <getAngle>
 8002012:	6078      	str	r0, [r7, #4]
		currentMillis = HAL_GetTick();
 8002014:	f001 f89a 	bl	800314c <HAL_GetTick>
 8002018:	4603      	mov	r3, r0
 800201a:	4618      	mov	r0, r3
 800201c:	f7fe fe14 	bl	8000c48 <__aeabi_ui2f>
 8002020:	4603      	mov	r3, r0
 8002022:	637b      	str	r3, [r7, #52]	; 0x34
		printf("angle %d\r\n", (int)angle);
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f7ff f82d 	bl	8001084 <__aeabi_f2iz>
 800202a:	4603      	mov	r3, r0
 800202c:	4619      	mov	r1, r3
 800202e:	486b      	ldr	r0, [pc, #428]	; (80021dc <main+0x29c>)
 8002030:	f004 ffe2 	bl	8006ff8 <iprintf>
		printf("Desired angle %d\r\n", (int)setpointDegrees);
 8002034:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002036:	f7ff f825 	bl	8001084 <__aeabi_f2iz>
 800203a:	4603      	mov	r3, r0
 800203c:	4619      	mov	r1, r3
 800203e:	4868      	ldr	r0, [pc, #416]	; (80021e0 <main+0x2a0>)
 8002040:	f004 ffda 	bl	8006ff8 <iprintf>
		//moveToDegrees(angle, setpointDegrees);

		if(counter < 4){
 8002044:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002048:	2b03      	cmp	r3, #3
 800204a:	f200 80af 	bhi.w	80021ac <main+0x26c>
			if(estado == 1){
 800204e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002052:	2b00      	cmp	r3, #0
 8002054:	d019      	beq.n	800208a <main+0x14a>
				constantRPM(&backRight, 90);
 8002056:	f04f 0200 	mov.w	r2, #0
 800205a:	4b62      	ldr	r3, [pc, #392]	; (80021e4 <main+0x2a4>)
 800205c:	4862      	ldr	r0, [pc, #392]	; (80021e8 <main+0x2a8>)
 800205e:	f7ff f917 	bl	8001290 <constantRPM>
				constantRPM(&backLeft, setpoint);
 8002062:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002066:	485c      	ldr	r0, [pc, #368]	; (80021d8 <main+0x298>)
 8002068:	f7ff f912 	bl	8001290 <constantRPM>
				moveToDegreesT(setpointDegrees, angle, 60);
 800206c:	223c      	movs	r2, #60	; 0x3c
 800206e:	6879      	ldr	r1, [r7, #4]
 8002070:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002072:	f7ff fbb5 	bl	80017e0 <moveToDegreesT>

				if(angle >= setpointDegrees){
 8002076:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f7fe ffef 	bl	800105c <__aeabi_fcmpge>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d002      	beq.n	800208a <main+0x14a>
					estado = 0;
 8002084:	2300      	movs	r3, #0
 8002086:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				}
			}

			if(estado == 0){
 800208a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800208e:	f083 0301 	eor.w	r3, r3, #1
 8002092:	b2db      	uxtb	r3, r3
 8002094:	2b00      	cmp	r3, #0
 8002096:	d0ba      	beq.n	800200e <main+0xce>
				constantRPM(&backRight, setpoint);
 8002098:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800209c:	4852      	ldr	r0, [pc, #328]	; (80021e8 <main+0x2a8>)
 800209e:	f7ff f8f7 	bl	8001290 <constantRPM>
				constantRPM(&backLeft, setpoint);
 80020a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020a6:	484c      	ldr	r0, [pc, #304]	; (80021d8 <main+0x298>)
 80020a8:	f7ff f8f2 	bl	8001290 <constantRPM>

			if (totalDistance < 70.0) {
 80020ac:	f04f 0200 	mov.w	r2, #0
 80020b0:	4b4e      	ldr	r3, [pc, #312]	; (80021ec <main+0x2ac>)
 80020b2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80020b6:	f7fe fc79 	bl	80009ac <__aeabi_dcmplt>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d045      	beq.n	800214c <main+0x20c>
				distance = backLeft.encoderTicks * (backLeft.details.kWheelDiameter * 3.1416) / backLeft.details.kPulsesPerRevolution;
 80020c0:	4b45      	ldr	r3, [pc, #276]	; (80021d8 <main+0x298>)
 80020c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7fe f995 	bl	80003f4 <__aeabi_i2d>
 80020ca:	4604      	mov	r4, r0
 80020cc:	460d      	mov	r5, r1
 80020ce:	4b42      	ldr	r3, [pc, #264]	; (80021d8 <main+0x298>)
 80020d0:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80020d4:	a338      	add	r3, pc, #224	; (adr r3, 80021b8 <main+0x278>)
 80020d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020da:	f7fe f9f5 	bl	80004c8 <__aeabi_dmul>
 80020de:	4602      	mov	r2, r0
 80020e0:	460b      	mov	r3, r1
 80020e2:	4620      	mov	r0, r4
 80020e4:	4629      	mov	r1, r5
 80020e6:	f7fe f9ef 	bl	80004c8 <__aeabi_dmul>
 80020ea:	4602      	mov	r2, r0
 80020ec:	460b      	mov	r3, r1
 80020ee:	4610      	mov	r0, r2
 80020f0:	4619      	mov	r1, r3
 80020f2:	4b39      	ldr	r3, [pc, #228]	; (80021d8 <main+0x298>)
 80020f4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80020f8:	f7fe fb10 	bl	800071c <__aeabi_ddiv>
 80020fc:	4602      	mov	r2, r0
 80020fe:	460b      	mov	r3, r1
 8002100:	e9c7 2302 	strd	r2, r3, [r7, #8]
				totalDistance += distance;
 8002104:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002108:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800210c:	f7fe f826 	bl	800015c <__adddf3>
 8002110:	4602      	mov	r2, r0
 8002112:	460b      	mov	r3, r1
 8002114:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
				moveToDegreesT(setpointDegrees, angle, 90);
 8002118:	225a      	movs	r2, #90	; 0x5a
 800211a:	6879      	ldr	r1, [r7, #4]
 800211c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800211e:	f7ff fb5f 	bl	80017e0 <moveToDegreesT>
				printf("BackLeft RPM: %d\r\n", (int)backLeft.current_speed);
 8002122:	4b2d      	ldr	r3, [pc, #180]	; (80021d8 <main+0x298>)
 8002124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002126:	4618      	mov	r0, r3
 8002128:	f7fe ffac 	bl	8001084 <__aeabi_f2iz>
 800212c:	4603      	mov	r3, r0
 800212e:	4619      	mov	r1, r3
 8002130:	482f      	ldr	r0, [pc, #188]	; (80021f0 <main+0x2b0>)
 8002132:	f004 ff61 	bl	8006ff8 <iprintf>
				printf("BackRight RPM: %d\r\n", (int)backRight.current_speed);
 8002136:	4b2c      	ldr	r3, [pc, #176]	; (80021e8 <main+0x2a8>)
 8002138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800213a:	4618      	mov	r0, r3
 800213c:	f7fe ffa2 	bl	8001084 <__aeabi_f2iz>
 8002140:	4603      	mov	r3, r0
 8002142:	4619      	mov	r1, r3
 8002144:	482b      	ldr	r0, [pc, #172]	; (80021f4 <main+0x2b4>)
 8002146:	f004 ff57 	bl	8006ff8 <iprintf>
 800214a:	e760      	b.n	800200e <main+0xce>
			} else {
				stop();
 800214c:	f7ff f992 	bl	8001474 <stop>
				prevMillis = currentMillis;
 8002150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002152:	617b      	str	r3, [r7, #20]
				 while ((currentMillis - prevMillis) < 5000) {
 8002154:	e009      	b.n	800216a <main+0x22a>
					stop();
 8002156:	f7ff f98d 	bl	8001474 <stop>
					currentMillis = HAL_GetTick();
 800215a:	f000 fff7 	bl	800314c <HAL_GetTick>
 800215e:	4603      	mov	r3, r0
 8002160:	4618      	mov	r0, r3
 8002162:	f7fe fd71 	bl	8000c48 <__aeabi_ui2f>
 8002166:	4603      	mov	r3, r0
 8002168:	637b      	str	r3, [r7, #52]	; 0x34
				 while ((currentMillis - prevMillis) < 5000) {
 800216a:	6979      	ldr	r1, [r7, #20]
 800216c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800216e:	f7fe fcb9 	bl	8000ae4 <__aeabi_fsub>
 8002172:	4603      	mov	r3, r0
 8002174:	4920      	ldr	r1, [pc, #128]	; (80021f8 <main+0x2b8>)
 8002176:	4618      	mov	r0, r3
 8002178:	f7fe ff5c 	bl	8001034 <__aeabi_fcmplt>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d1e9      	bne.n	8002156 <main+0x216>

				 }
					estado = 1;
 8002182:	2301      	movs	r3, #1
 8002184:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					counter++;
 8002188:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800218c:	3301      	adds	r3, #1
 800218e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					totalDistance = 0;
 8002192:	f04f 0200 	mov.w	r2, #0
 8002196:	f04f 0300 	mov.w	r3, #0
 800219a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
					setpointDegrees = angle + 130;
 800219e:	4917      	ldr	r1, [pc, #92]	; (80021fc <main+0x2bc>)
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f7fe fca1 	bl	8000ae8 <__addsf3>
 80021a6:	4603      	mov	r3, r0
 80021a8:	633b      	str	r3, [r7, #48]	; 0x30
 80021aa:	e730      	b.n	800200e <main+0xce>

				}
			}
		} else{
			stop();
 80021ac:	f7ff f962 	bl	8001474 <stop>
		angle = getAngle();
 80021b0:	e72d      	b.n	800200e <main+0xce>
 80021b2:	bf00      	nop
 80021b4:	f3af 8000 	nop.w
 80021b8:	2e48e8a7 	.word	0x2e48e8a7
 80021bc:	400921ff 	.word	0x400921ff
 80021c0:	200002d4 	.word	0x200002d4
 80021c4:	2000031c 	.word	0x2000031c
 80021c8:	20000364 	.word	0x20000364
 80021cc:	200003ac 	.word	0x200003ac
 80021d0:	40590000 	.word	0x40590000
 80021d4:	200004cc 	.word	0x200004cc
 80021d8:	200000b0 	.word	0x200000b0
 80021dc:	08008304 	.word	0x08008304
 80021e0:	08008310 	.word	0x08008310
 80021e4:	40568000 	.word	0x40568000
 80021e8:	20000168 	.word	0x20000168
 80021ec:	40518000 	.word	0x40518000
 80021f0:	08008324 	.word	0x08008324
 80021f4:	08008338 	.word	0x08008338
 80021f8:	459c4000 	.word	0x459c4000
 80021fc:	43020000 	.word	0x43020000

08002200 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b090      	sub	sp, #64	; 0x40
 8002204:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002206:	f107 0318 	add.w	r3, r7, #24
 800220a:	2228      	movs	r2, #40	; 0x28
 800220c:	2100      	movs	r1, #0
 800220e:	4618      	mov	r0, r3
 8002210:	f005 f86c 	bl	80072ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002214:	1d3b      	adds	r3, r7, #4
 8002216:	2200      	movs	r2, #0
 8002218:	601a      	str	r2, [r3, #0]
 800221a:	605a      	str	r2, [r3, #4]
 800221c:	609a      	str	r2, [r3, #8]
 800221e:	60da      	str	r2, [r3, #12]
 8002220:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002222:	2301      	movs	r3, #1
 8002224:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002226:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800222a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800222c:	2300      	movs	r3, #0
 800222e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002230:	2301      	movs	r3, #1
 8002232:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002234:	2302      	movs	r3, #2
 8002236:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002238:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800223c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800223e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002242:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002244:	f107 0318 	add.w	r3, r7, #24
 8002248:	4618      	mov	r0, r3
 800224a:	f002 fb3d 	bl	80048c8 <HAL_RCC_OscConfig>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d001      	beq.n	8002258 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002254:	f000 fb2e 	bl	80028b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002258:	230f      	movs	r3, #15
 800225a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800225c:	2302      	movs	r3, #2
 800225e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002260:	2300      	movs	r3, #0
 8002262:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002264:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8002268:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800226a:	2300      	movs	r3, #0
 800226c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800226e:	1d3b      	adds	r3, r7, #4
 8002270:	2102      	movs	r1, #2
 8002272:	4618      	mov	r0, r3
 8002274:	f002 fdaa 	bl	8004dcc <HAL_RCC_ClockConfig>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800227e:	f000 fb19 	bl	80028b4 <Error_Handler>
  }
}
 8002282:	bf00      	nop
 8002284:	3740      	adds	r7, #64	; 0x40
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
	...

0800228c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002290:	4b12      	ldr	r3, [pc, #72]	; (80022dc <MX_I2C1_Init+0x50>)
 8002292:	4a13      	ldr	r2, [pc, #76]	; (80022e0 <MX_I2C1_Init+0x54>)
 8002294:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002296:	4b11      	ldr	r3, [pc, #68]	; (80022dc <MX_I2C1_Init+0x50>)
 8002298:	4a12      	ldr	r2, [pc, #72]	; (80022e4 <MX_I2C1_Init+0x58>)
 800229a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800229c:	4b0f      	ldr	r3, [pc, #60]	; (80022dc <MX_I2C1_Init+0x50>)
 800229e:	2200      	movs	r2, #0
 80022a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80022a2:	4b0e      	ldr	r3, [pc, #56]	; (80022dc <MX_I2C1_Init+0x50>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80022a8:	4b0c      	ldr	r3, [pc, #48]	; (80022dc <MX_I2C1_Init+0x50>)
 80022aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80022ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80022b0:	4b0a      	ldr	r3, [pc, #40]	; (80022dc <MX_I2C1_Init+0x50>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80022b6:	4b09      	ldr	r3, [pc, #36]	; (80022dc <MX_I2C1_Init+0x50>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80022bc:	4b07      	ldr	r3, [pc, #28]	; (80022dc <MX_I2C1_Init+0x50>)
 80022be:	2200      	movs	r2, #0
 80022c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80022c2:	4b06      	ldr	r3, [pc, #24]	; (80022dc <MX_I2C1_Init+0x50>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80022c8:	4804      	ldr	r0, [pc, #16]	; (80022dc <MX_I2C1_Init+0x50>)
 80022ca:	f001 fac9 	bl	8003860 <HAL_I2C_Init>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80022d4:	f000 faee 	bl	80028b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80022d8:	bf00      	nop
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	2000022c 	.word	0x2000022c
 80022e0:	40005400 	.word	0x40005400
 80022e4:	000186a0 	.word	0x000186a0

080022e8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80022ec:	4b12      	ldr	r3, [pc, #72]	; (8002338 <MX_I2C2_Init+0x50>)
 80022ee:	4a13      	ldr	r2, [pc, #76]	; (800233c <MX_I2C2_Init+0x54>)
 80022f0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80022f2:	4b11      	ldr	r3, [pc, #68]	; (8002338 <MX_I2C2_Init+0x50>)
 80022f4:	4a12      	ldr	r2, [pc, #72]	; (8002340 <MX_I2C2_Init+0x58>)
 80022f6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80022f8:	4b0f      	ldr	r3, [pc, #60]	; (8002338 <MX_I2C2_Init+0x50>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80022fe:	4b0e      	ldr	r3, [pc, #56]	; (8002338 <MX_I2C2_Init+0x50>)
 8002300:	2200      	movs	r2, #0
 8002302:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002304:	4b0c      	ldr	r3, [pc, #48]	; (8002338 <MX_I2C2_Init+0x50>)
 8002306:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800230a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800230c:	4b0a      	ldr	r3, [pc, #40]	; (8002338 <MX_I2C2_Init+0x50>)
 800230e:	2200      	movs	r2, #0
 8002310:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002312:	4b09      	ldr	r3, [pc, #36]	; (8002338 <MX_I2C2_Init+0x50>)
 8002314:	2200      	movs	r2, #0
 8002316:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002318:	4b07      	ldr	r3, [pc, #28]	; (8002338 <MX_I2C2_Init+0x50>)
 800231a:	2200      	movs	r2, #0
 800231c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800231e:	4b06      	ldr	r3, [pc, #24]	; (8002338 <MX_I2C2_Init+0x50>)
 8002320:	2200      	movs	r2, #0
 8002322:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002324:	4804      	ldr	r0, [pc, #16]	; (8002338 <MX_I2C2_Init+0x50>)
 8002326:	f001 fa9b 	bl	8003860 <HAL_I2C_Init>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002330:	f000 fac0 	bl	80028b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002334:	bf00      	nop
 8002336:	bd80      	pop	{r7, pc}
 8002338:	20000280 	.word	0x20000280
 800233c:	40005800 	.word	0x40005800
 8002340:	000186a0 	.word	0x000186a0

08002344 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b096      	sub	sp, #88	; 0x58
 8002348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800234a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800234e:	2200      	movs	r2, #0
 8002350:	601a      	str	r2, [r3, #0]
 8002352:	605a      	str	r2, [r3, #4]
 8002354:	609a      	str	r2, [r3, #8]
 8002356:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002358:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002362:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002366:	2200      	movs	r2, #0
 8002368:	601a      	str	r2, [r3, #0]
 800236a:	605a      	str	r2, [r3, #4]
 800236c:	609a      	str	r2, [r3, #8]
 800236e:	60da      	str	r2, [r3, #12]
 8002370:	611a      	str	r2, [r3, #16]
 8002372:	615a      	str	r2, [r3, #20]
 8002374:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002376:	1d3b      	adds	r3, r7, #4
 8002378:	2220      	movs	r2, #32
 800237a:	2100      	movs	r1, #0
 800237c:	4618      	mov	r0, r3
 800237e:	f004 ffb5 	bl	80072ec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002382:	4b3f      	ldr	r3, [pc, #252]	; (8002480 <MX_TIM1_Init+0x13c>)
 8002384:	4a3f      	ldr	r2, [pc, #252]	; (8002484 <MX_TIM1_Init+0x140>)
 8002386:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 720;
 8002388:	4b3d      	ldr	r3, [pc, #244]	; (8002480 <MX_TIM1_Init+0x13c>)
 800238a:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 800238e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002390:	4b3b      	ldr	r3, [pc, #236]	; (8002480 <MX_TIM1_Init+0x13c>)
 8002392:	2200      	movs	r2, #0
 8002394:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8002396:	4b3a      	ldr	r3, [pc, #232]	; (8002480 <MX_TIM1_Init+0x13c>)
 8002398:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800239c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800239e:	4b38      	ldr	r3, [pc, #224]	; (8002480 <MX_TIM1_Init+0x13c>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80023a4:	4b36      	ldr	r3, [pc, #216]	; (8002480 <MX_TIM1_Init+0x13c>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80023aa:	4b35      	ldr	r3, [pc, #212]	; (8002480 <MX_TIM1_Init+0x13c>)
 80023ac:	2280      	movs	r2, #128	; 0x80
 80023ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80023b0:	4833      	ldr	r0, [pc, #204]	; (8002480 <MX_TIM1_Init+0x13c>)
 80023b2:	f002 fe99 	bl	80050e8 <HAL_TIM_Base_Init>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80023bc:	f000 fa7a 	bl	80028b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023c4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80023c6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80023ca:	4619      	mov	r1, r3
 80023cc:	482c      	ldr	r0, [pc, #176]	; (8002480 <MX_TIM1_Init+0x13c>)
 80023ce:	f003 faef 	bl	80059b0 <HAL_TIM_ConfigClockSource>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d001      	beq.n	80023dc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80023d8:	f000 fa6c 	bl	80028b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80023dc:	4828      	ldr	r0, [pc, #160]	; (8002480 <MX_TIM1_Init+0x13c>)
 80023de:	f002 fed2 	bl	8005186 <HAL_TIM_PWM_Init>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80023e8:	f000 fa64 	bl	80028b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023ec:	2300      	movs	r3, #0
 80023ee:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023f0:	2300      	movs	r3, #0
 80023f2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80023f4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80023f8:	4619      	mov	r1, r3
 80023fa:	4821      	ldr	r0, [pc, #132]	; (8002480 <MX_TIM1_Init+0x13c>)
 80023fc:	f003 fe68 	bl	80060d0 <HAL_TIMEx_MasterConfigSynchronization>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8002406:	f000 fa55 	bl	80028b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800240a:	2360      	movs	r3, #96	; 0x60
 800240c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800240e:	2300      	movs	r3, #0
 8002410:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002412:	2300      	movs	r3, #0
 8002414:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002416:	2300      	movs	r3, #0
 8002418:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800241a:	2300      	movs	r3, #0
 800241c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800241e:	2300      	movs	r3, #0
 8002420:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002422:	2300      	movs	r3, #0
 8002424:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002426:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800242a:	2200      	movs	r2, #0
 800242c:	4619      	mov	r1, r3
 800242e:	4814      	ldr	r0, [pc, #80]	; (8002480 <MX_TIM1_Init+0x13c>)
 8002430:	f003 f9fc 	bl	800582c <HAL_TIM_PWM_ConfigChannel>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 800243a:	f000 fa3b 	bl	80028b4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800243e:	2300      	movs	r3, #0
 8002440:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002442:	2300      	movs	r3, #0
 8002444:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002446:	2300      	movs	r3, #0
 8002448:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800244a:	2300      	movs	r3, #0
 800244c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800244e:	2300      	movs	r3, #0
 8002450:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002452:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002456:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002458:	2300      	movs	r3, #0
 800245a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800245c:	1d3b      	adds	r3, r7, #4
 800245e:	4619      	mov	r1, r3
 8002460:	4807      	ldr	r0, [pc, #28]	; (8002480 <MX_TIM1_Init+0x13c>)
 8002462:	f003 fe93 	bl	800618c <HAL_TIMEx_ConfigBreakDeadTime>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 800246c:	f000 fa22 	bl	80028b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002470:	4803      	ldr	r0, [pc, #12]	; (8002480 <MX_TIM1_Init+0x13c>)
 8002472:	f000 fc23 	bl	8002cbc <HAL_TIM_MspPostInit>

}
 8002476:	bf00      	nop
 8002478:	3758      	adds	r7, #88	; 0x58
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	200002d4 	.word	0x200002d4
 8002484:	40012c00 	.word	0x40012c00

08002488 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b08e      	sub	sp, #56	; 0x38
 800248c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800248e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002492:	2200      	movs	r2, #0
 8002494:	601a      	str	r2, [r3, #0]
 8002496:	605a      	str	r2, [r3, #4]
 8002498:	609a      	str	r2, [r3, #8]
 800249a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800249c:	f107 0320 	add.w	r3, r7, #32
 80024a0:	2200      	movs	r2, #0
 80024a2:	601a      	str	r2, [r3, #0]
 80024a4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024a6:	1d3b      	adds	r3, r7, #4
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	605a      	str	r2, [r3, #4]
 80024ae:	609a      	str	r2, [r3, #8]
 80024b0:	60da      	str	r2, [r3, #12]
 80024b2:	611a      	str	r2, [r3, #16]
 80024b4:	615a      	str	r2, [r3, #20]
 80024b6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80024b8:	4b3a      	ldr	r3, [pc, #232]	; (80025a4 <MX_TIM2_Init+0x11c>)
 80024ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80024c0:	4b38      	ldr	r3, [pc, #224]	; (80025a4 <MX_TIM2_Init+0x11c>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024c6:	4b37      	ldr	r3, [pc, #220]	; (80025a4 <MX_TIM2_Init+0x11c>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 80024cc:	4b35      	ldr	r3, [pc, #212]	; (80025a4 <MX_TIM2_Init+0x11c>)
 80024ce:	22ff      	movs	r2, #255	; 0xff
 80024d0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024d2:	4b34      	ldr	r3, [pc, #208]	; (80025a4 <MX_TIM2_Init+0x11c>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80024d8:	4b32      	ldr	r3, [pc, #200]	; (80025a4 <MX_TIM2_Init+0x11c>)
 80024da:	2280      	movs	r2, #128	; 0x80
 80024dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80024de:	4831      	ldr	r0, [pc, #196]	; (80025a4 <MX_TIM2_Init+0x11c>)
 80024e0:	f002 fe02 	bl	80050e8 <HAL_TIM_Base_Init>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80024ea:	f000 f9e3 	bl	80028b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024f2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80024f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024f8:	4619      	mov	r1, r3
 80024fa:	482a      	ldr	r0, [pc, #168]	; (80025a4 <MX_TIM2_Init+0x11c>)
 80024fc:	f003 fa58 	bl	80059b0 <HAL_TIM_ConfigClockSource>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8002506:	f000 f9d5 	bl	80028b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800250a:	4826      	ldr	r0, [pc, #152]	; (80025a4 <MX_TIM2_Init+0x11c>)
 800250c:	f002 fe3b 	bl	8005186 <HAL_TIM_PWM_Init>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8002516:	f000 f9cd 	bl	80028b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800251a:	2300      	movs	r3, #0
 800251c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800251e:	2300      	movs	r3, #0
 8002520:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002522:	f107 0320 	add.w	r3, r7, #32
 8002526:	4619      	mov	r1, r3
 8002528:	481e      	ldr	r0, [pc, #120]	; (80025a4 <MX_TIM2_Init+0x11c>)
 800252a:	f003 fdd1 	bl	80060d0 <HAL_TIMEx_MasterConfigSynchronization>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8002534:	f000 f9be 	bl	80028b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002538:	2360      	movs	r3, #96	; 0x60
 800253a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800253c:	2300      	movs	r3, #0
 800253e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002540:	2300      	movs	r3, #0
 8002542:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002544:	2300      	movs	r3, #0
 8002546:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002548:	1d3b      	adds	r3, r7, #4
 800254a:	2200      	movs	r2, #0
 800254c:	4619      	mov	r1, r3
 800254e:	4815      	ldr	r0, [pc, #84]	; (80025a4 <MX_TIM2_Init+0x11c>)
 8002550:	f003 f96c 	bl	800582c <HAL_TIM_PWM_ConfigChannel>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 800255a:	f000 f9ab 	bl	80028b4 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_1);
 800255e:	4b11      	ldr	r3, [pc, #68]	; (80025a4 <MX_TIM2_Init+0x11c>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	699a      	ldr	r2, [r3, #24]
 8002564:	4b0f      	ldr	r3, [pc, #60]	; (80025a4 <MX_TIM2_Init+0x11c>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f022 0208 	bic.w	r2, r2, #8
 800256c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800256e:	1d3b      	adds	r3, r7, #4
 8002570:	2204      	movs	r2, #4
 8002572:	4619      	mov	r1, r3
 8002574:	480b      	ldr	r0, [pc, #44]	; (80025a4 <MX_TIM2_Init+0x11c>)
 8002576:	f003 f959 	bl	800582c <HAL_TIM_PWM_ConfigChannel>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d001      	beq.n	8002584 <MX_TIM2_Init+0xfc>
  {
    Error_Handler();
 8002580:	f000 f998 	bl	80028b4 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_2);
 8002584:	4b07      	ldr	r3, [pc, #28]	; (80025a4 <MX_TIM2_Init+0x11c>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	699a      	ldr	r2, [r3, #24]
 800258a:	4b06      	ldr	r3, [pc, #24]	; (80025a4 <MX_TIM2_Init+0x11c>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002592:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM2_Init 2 */
  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002594:	4803      	ldr	r0, [pc, #12]	; (80025a4 <MX_TIM2_Init+0x11c>)
 8002596:	f000 fb91 	bl	8002cbc <HAL_TIM_MspPostInit>

}
 800259a:	bf00      	nop
 800259c:	3738      	adds	r7, #56	; 0x38
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	2000031c 	.word	0x2000031c

080025a8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b08c      	sub	sp, #48	; 0x30
 80025ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80025ae:	f107 030c 	add.w	r3, r7, #12
 80025b2:	2224      	movs	r2, #36	; 0x24
 80025b4:	2100      	movs	r1, #0
 80025b6:	4618      	mov	r0, r3
 80025b8:	f004 fe98 	bl	80072ec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025bc:	1d3b      	adds	r3, r7, #4
 80025be:	2200      	movs	r2, #0
 80025c0:	601a      	str	r2, [r3, #0]
 80025c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80025c4:	4b20      	ldr	r3, [pc, #128]	; (8002648 <MX_TIM3_Init+0xa0>)
 80025c6:	4a21      	ldr	r2, [pc, #132]	; (800264c <MX_TIM3_Init+0xa4>)
 80025c8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80025ca:	4b1f      	ldr	r3, [pc, #124]	; (8002648 <MX_TIM3_Init+0xa0>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025d0:	4b1d      	ldr	r3, [pc, #116]	; (8002648 <MX_TIM3_Init+0xa0>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80025d6:	4b1c      	ldr	r3, [pc, #112]	; (8002648 <MX_TIM3_Init+0xa0>)
 80025d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025dc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025de:	4b1a      	ldr	r3, [pc, #104]	; (8002648 <MX_TIM3_Init+0xa0>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025e4:	4b18      	ldr	r3, [pc, #96]	; (8002648 <MX_TIM3_Init+0xa0>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80025ea:	2303      	movs	r3, #3
 80025ec:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80025ee:	2302      	movs	r3, #2
 80025f0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80025f2:	2301      	movs	r3, #1
 80025f4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80025f6:	2300      	movs	r3, #0
 80025f8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80025fa:	2300      	movs	r3, #0
 80025fc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80025fe:	2302      	movs	r3, #2
 8002600:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002602:	2301      	movs	r3, #1
 8002604:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002606:	2300      	movs	r3, #0
 8002608:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800260a:	2300      	movs	r3, #0
 800260c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800260e:	f107 030c 	add.w	r3, r7, #12
 8002612:	4619      	mov	r1, r3
 8002614:	480c      	ldr	r0, [pc, #48]	; (8002648 <MX_TIM3_Init+0xa0>)
 8002616:	f002 feb1 	bl	800537c <HAL_TIM_Encoder_Init>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002620:	f000 f948 	bl	80028b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002624:	2300      	movs	r3, #0
 8002626:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002628:	2300      	movs	r3, #0
 800262a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800262c:	1d3b      	adds	r3, r7, #4
 800262e:	4619      	mov	r1, r3
 8002630:	4805      	ldr	r0, [pc, #20]	; (8002648 <MX_TIM3_Init+0xa0>)
 8002632:	f003 fd4d 	bl	80060d0 <HAL_TIMEx_MasterConfigSynchronization>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800263c:	f000 f93a 	bl	80028b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002640:	bf00      	nop
 8002642:	3730      	adds	r7, #48	; 0x30
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	20000364 	.word	0x20000364
 800264c:	40000400 	.word	0x40000400

08002650 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b08c      	sub	sp, #48	; 0x30
 8002654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002656:	f107 030c 	add.w	r3, r7, #12
 800265a:	2224      	movs	r2, #36	; 0x24
 800265c:	2100      	movs	r1, #0
 800265e:	4618      	mov	r0, r3
 8002660:	f004 fe44 	bl	80072ec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002664:	1d3b      	adds	r3, r7, #4
 8002666:	2200      	movs	r2, #0
 8002668:	601a      	str	r2, [r3, #0]
 800266a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800266c:	4b20      	ldr	r3, [pc, #128]	; (80026f0 <MX_TIM4_Init+0xa0>)
 800266e:	4a21      	ldr	r2, [pc, #132]	; (80026f4 <MX_TIM4_Init+0xa4>)
 8002670:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002672:	4b1f      	ldr	r3, [pc, #124]	; (80026f0 <MX_TIM4_Init+0xa0>)
 8002674:	2200      	movs	r2, #0
 8002676:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002678:	4b1d      	ldr	r3, [pc, #116]	; (80026f0 <MX_TIM4_Init+0xa0>)
 800267a:	2200      	movs	r2, #0
 800267c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800267e:	4b1c      	ldr	r3, [pc, #112]	; (80026f0 <MX_TIM4_Init+0xa0>)
 8002680:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002684:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002686:	4b1a      	ldr	r3, [pc, #104]	; (80026f0 <MX_TIM4_Init+0xa0>)
 8002688:	2200      	movs	r2, #0
 800268a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800268c:	4b18      	ldr	r3, [pc, #96]	; (80026f0 <MX_TIM4_Init+0xa0>)
 800268e:	2200      	movs	r2, #0
 8002690:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002692:	2303      	movs	r3, #3
 8002694:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8002696:	2302      	movs	r3, #2
 8002698:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800269a:	2301      	movs	r3, #1
 800269c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800269e:	2300      	movs	r3, #0
 80026a0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80026a2:	2300      	movs	r3, #0
 80026a4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80026a6:	2302      	movs	r3, #2
 80026a8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80026aa:	2301      	movs	r3, #1
 80026ac:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80026ae:	2300      	movs	r3, #0
 80026b0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80026b2:	2300      	movs	r3, #0
 80026b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80026b6:	f107 030c 	add.w	r3, r7, #12
 80026ba:	4619      	mov	r1, r3
 80026bc:	480c      	ldr	r0, [pc, #48]	; (80026f0 <MX_TIM4_Init+0xa0>)
 80026be:	f002 fe5d 	bl	800537c <HAL_TIM_Encoder_Init>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d001      	beq.n	80026cc <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80026c8:	f000 f8f4 	bl	80028b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026cc:	2300      	movs	r3, #0
 80026ce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026d0:	2300      	movs	r3, #0
 80026d2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80026d4:	1d3b      	adds	r3, r7, #4
 80026d6:	4619      	mov	r1, r3
 80026d8:	4805      	ldr	r0, [pc, #20]	; (80026f0 <MX_TIM4_Init+0xa0>)
 80026da:	f003 fcf9 	bl	80060d0 <HAL_TIMEx_MasterConfigSynchronization>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80026e4:	f000 f8e6 	bl	80028b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80026e8:	bf00      	nop
 80026ea:	3730      	adds	r7, #48	; 0x30
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	200003ac 	.word	0x200003ac
 80026f4:	40000800 	.word	0x40000800

080026f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80026fc:	4b11      	ldr	r3, [pc, #68]	; (8002744 <MX_USART1_UART_Init+0x4c>)
 80026fe:	4a12      	ldr	r2, [pc, #72]	; (8002748 <MX_USART1_UART_Init+0x50>)
 8002700:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002702:	4b10      	ldr	r3, [pc, #64]	; (8002744 <MX_USART1_UART_Init+0x4c>)
 8002704:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002708:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800270a:	4b0e      	ldr	r3, [pc, #56]	; (8002744 <MX_USART1_UART_Init+0x4c>)
 800270c:	2200      	movs	r2, #0
 800270e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002710:	4b0c      	ldr	r3, [pc, #48]	; (8002744 <MX_USART1_UART_Init+0x4c>)
 8002712:	2200      	movs	r2, #0
 8002714:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002716:	4b0b      	ldr	r3, [pc, #44]	; (8002744 <MX_USART1_UART_Init+0x4c>)
 8002718:	2200      	movs	r2, #0
 800271a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800271c:	4b09      	ldr	r3, [pc, #36]	; (8002744 <MX_USART1_UART_Init+0x4c>)
 800271e:	220c      	movs	r2, #12
 8002720:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002722:	4b08      	ldr	r3, [pc, #32]	; (8002744 <MX_USART1_UART_Init+0x4c>)
 8002724:	2200      	movs	r2, #0
 8002726:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002728:	4b06      	ldr	r3, [pc, #24]	; (8002744 <MX_USART1_UART_Init+0x4c>)
 800272a:	2200      	movs	r2, #0
 800272c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800272e:	4805      	ldr	r0, [pc, #20]	; (8002744 <MX_USART1_UART_Init+0x4c>)
 8002730:	f003 fd8f 	bl	8006252 <HAL_UART_Init>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800273a:	f000 f8bb 	bl	80028b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800273e:	bf00      	nop
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	200003f4 	.word	0x200003f4
 8002748:	40013800 	.word	0x40013800

0800274c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002750:	4b11      	ldr	r3, [pc, #68]	; (8002798 <MX_USART2_UART_Init+0x4c>)
 8002752:	4a12      	ldr	r2, [pc, #72]	; (800279c <MX_USART2_UART_Init+0x50>)
 8002754:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002756:	4b10      	ldr	r3, [pc, #64]	; (8002798 <MX_USART2_UART_Init+0x4c>)
 8002758:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800275c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800275e:	4b0e      	ldr	r3, [pc, #56]	; (8002798 <MX_USART2_UART_Init+0x4c>)
 8002760:	2200      	movs	r2, #0
 8002762:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002764:	4b0c      	ldr	r3, [pc, #48]	; (8002798 <MX_USART2_UART_Init+0x4c>)
 8002766:	2200      	movs	r2, #0
 8002768:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800276a:	4b0b      	ldr	r3, [pc, #44]	; (8002798 <MX_USART2_UART_Init+0x4c>)
 800276c:	2200      	movs	r2, #0
 800276e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002770:	4b09      	ldr	r3, [pc, #36]	; (8002798 <MX_USART2_UART_Init+0x4c>)
 8002772:	220c      	movs	r2, #12
 8002774:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002776:	4b08      	ldr	r3, [pc, #32]	; (8002798 <MX_USART2_UART_Init+0x4c>)
 8002778:	2200      	movs	r2, #0
 800277a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800277c:	4b06      	ldr	r3, [pc, #24]	; (8002798 <MX_USART2_UART_Init+0x4c>)
 800277e:	2200      	movs	r2, #0
 8002780:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002782:	4805      	ldr	r0, [pc, #20]	; (8002798 <MX_USART2_UART_Init+0x4c>)
 8002784:	f003 fd65 	bl	8006252 <HAL_UART_Init>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800278e:	f000 f891 	bl	80028b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002792:	bf00      	nop
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	2000043c 	.word	0x2000043c
 800279c:	40004400 	.word	0x40004400

080027a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b088      	sub	sp, #32
 80027a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027a6:	f107 0310 	add.w	r3, r7, #16
 80027aa:	2200      	movs	r2, #0
 80027ac:	601a      	str	r2, [r3, #0]
 80027ae:	605a      	str	r2, [r3, #4]
 80027b0:	609a      	str	r2, [r3, #8]
 80027b2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027b4:	4b3b      	ldr	r3, [pc, #236]	; (80028a4 <MX_GPIO_Init+0x104>)
 80027b6:	699b      	ldr	r3, [r3, #24]
 80027b8:	4a3a      	ldr	r2, [pc, #232]	; (80028a4 <MX_GPIO_Init+0x104>)
 80027ba:	f043 0310 	orr.w	r3, r3, #16
 80027be:	6193      	str	r3, [r2, #24]
 80027c0:	4b38      	ldr	r3, [pc, #224]	; (80028a4 <MX_GPIO_Init+0x104>)
 80027c2:	699b      	ldr	r3, [r3, #24]
 80027c4:	f003 0310 	and.w	r3, r3, #16
 80027c8:	60fb      	str	r3, [r7, #12]
 80027ca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80027cc:	4b35      	ldr	r3, [pc, #212]	; (80028a4 <MX_GPIO_Init+0x104>)
 80027ce:	699b      	ldr	r3, [r3, #24]
 80027d0:	4a34      	ldr	r2, [pc, #208]	; (80028a4 <MX_GPIO_Init+0x104>)
 80027d2:	f043 0320 	orr.w	r3, r3, #32
 80027d6:	6193      	str	r3, [r2, #24]
 80027d8:	4b32      	ldr	r3, [pc, #200]	; (80028a4 <MX_GPIO_Init+0x104>)
 80027da:	699b      	ldr	r3, [r3, #24]
 80027dc:	f003 0320 	and.w	r3, r3, #32
 80027e0:	60bb      	str	r3, [r7, #8]
 80027e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027e4:	4b2f      	ldr	r3, [pc, #188]	; (80028a4 <MX_GPIO_Init+0x104>)
 80027e6:	699b      	ldr	r3, [r3, #24]
 80027e8:	4a2e      	ldr	r2, [pc, #184]	; (80028a4 <MX_GPIO_Init+0x104>)
 80027ea:	f043 0304 	orr.w	r3, r3, #4
 80027ee:	6193      	str	r3, [r2, #24]
 80027f0:	4b2c      	ldr	r3, [pc, #176]	; (80028a4 <MX_GPIO_Init+0x104>)
 80027f2:	699b      	ldr	r3, [r3, #24]
 80027f4:	f003 0304 	and.w	r3, r3, #4
 80027f8:	607b      	str	r3, [r7, #4]
 80027fa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027fc:	4b29      	ldr	r3, [pc, #164]	; (80028a4 <MX_GPIO_Init+0x104>)
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	4a28      	ldr	r2, [pc, #160]	; (80028a4 <MX_GPIO_Init+0x104>)
 8002802:	f043 0308 	orr.w	r3, r3, #8
 8002806:	6193      	str	r3, [r2, #24]
 8002808:	4b26      	ldr	r3, [pc, #152]	; (80028a4 <MX_GPIO_Init+0x104>)
 800280a:	699b      	ldr	r3, [r3, #24]
 800280c:	f003 0308 	and.w	r3, r3, #8
 8002810:	603b      	str	r3, [r7, #0]
 8002812:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8002814:	2200      	movs	r2, #0
 8002816:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800281a:	4823      	ldr	r0, [pc, #140]	; (80028a8 <MX_GPIO_Init+0x108>)
 800281c:	f001 f808 	bl	8003830 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIGGER_GPIO_Port, TRIGGER_Pin, GPIO_PIN_RESET);
 8002820:	2200      	movs	r2, #0
 8002822:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002826:	4821      	ldr	r0, [pc, #132]	; (80028ac <MX_GPIO_Init+0x10c>)
 8002828:	f001 f802 	bl	8003830 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800282c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002830:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002832:	2300      	movs	r3, #0
 8002834:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002836:	2300      	movs	r3, #0
 8002838:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800283a:	f107 0310 	add.w	r3, r7, #16
 800283e:	4619      	mov	r1, r3
 8002840:	481b      	ldr	r0, [pc, #108]	; (80028b0 <MX_GPIO_Init+0x110>)
 8002842:	f000 fe71 	bl	8003528 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002846:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800284a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800284c:	2301      	movs	r3, #1
 800284e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002850:	2300      	movs	r3, #0
 8002852:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002854:	2302      	movs	r3, #2
 8002856:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002858:	f107 0310 	add.w	r3, r7, #16
 800285c:	4619      	mov	r1, r3
 800285e:	4812      	ldr	r0, [pc, #72]	; (80028a8 <MX_GPIO_Init+0x108>)
 8002860:	f000 fe62 	bl	8003528 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIGGER_Pin */
  GPIO_InitStruct.Pin = TRIGGER_Pin;
 8002864:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002868:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800286a:	2301      	movs	r3, #1
 800286c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286e:	2300      	movs	r3, #0
 8002870:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002872:	2302      	movs	r3, #2
 8002874:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TRIGGER_GPIO_Port, &GPIO_InitStruct);
 8002876:	f107 0310 	add.w	r3, r7, #16
 800287a:	4619      	mov	r1, r3
 800287c:	480b      	ldr	r0, [pc, #44]	; (80028ac <MX_GPIO_Init+0x10c>)
 800287e:	f000 fe53 	bl	8003528 <HAL_GPIO_Init>

  /*Configure GPIO pin : ECHO_Pin */
  GPIO_InitStruct.Pin = ECHO_Pin;
 8002882:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002886:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002888:	2300      	movs	r3, #0
 800288a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288c:	2300      	movs	r3, #0
 800288e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 8002890:	f107 0310 	add.w	r3, r7, #16
 8002894:	4619      	mov	r1, r3
 8002896:	4805      	ldr	r0, [pc, #20]	; (80028ac <MX_GPIO_Init+0x10c>)
 8002898:	f000 fe46 	bl	8003528 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800289c:	bf00      	nop
 800289e:	3720      	adds	r7, #32
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	40021000 	.word	0x40021000
 80028a8:	40010c00 	.word	0x40010c00
 80028ac:	40010800 	.word	0x40010800
 80028b0:	40011000 	.word	0x40011000

080028b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028b8:	b672      	cpsid	i
}
 80028ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  printf("TIM 2 CHANNEL 3 Not WORKING\r\n");
 80028bc:	4801      	ldr	r0, [pc, #4]	; (80028c4 <Error_Handler+0x10>)
 80028be:	f004 fc01 	bl	80070c4 <puts>
 80028c2:	e7fb      	b.n	80028bc <Error_Handler+0x8>
 80028c4:	0800834c 	.word	0x0800834c

080028c8 <MPU6050_Init>:

uint8_t data_tx[2];
uint8_t data_rx[15];

void MPU6050_Init(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af02      	add	r7, sp, #8
	data_tx[0] = 0x6B;
 80028ce:	4b0f      	ldr	r3, [pc, #60]	; (800290c <MPU6050_Init+0x44>)
 80028d0:	226b      	movs	r2, #107	; 0x6b
 80028d2:	701a      	strb	r2, [r3, #0]
	data_tx[1] = 0x00;
 80028d4:	4b0d      	ldr	r3, [pc, #52]	; (800290c <MPU6050_Init+0x44>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)MPU6050_ADDRESS, data_tx, 2, 100);
 80028da:	2364      	movs	r3, #100	; 0x64
 80028dc:	9300      	str	r3, [sp, #0]
 80028de:	2302      	movs	r3, #2
 80028e0:	4a0a      	ldr	r2, [pc, #40]	; (800290c <MPU6050_Init+0x44>)
 80028e2:	21d0      	movs	r1, #208	; 0xd0
 80028e4:	480a      	ldr	r0, [pc, #40]	; (8002910 <MPU6050_Init+0x48>)
 80028e6:	f001 f8ff 	bl	8003ae8 <HAL_I2C_Master_Transmit>

	data_tx[0] = 0x19;
 80028ea:	4b08      	ldr	r3, [pc, #32]	; (800290c <MPU6050_Init+0x44>)
 80028ec:	2219      	movs	r2, #25
 80028ee:	701a      	strb	r2, [r3, #0]
	data_tx[1] = 0x07;
 80028f0:	4b06      	ldr	r3, [pc, #24]	; (800290c <MPU6050_Init+0x44>)
 80028f2:	2207      	movs	r2, #7
 80028f4:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)MPU6050_ADDRESS, data_tx, 2, 100);
 80028f6:	2364      	movs	r3, #100	; 0x64
 80028f8:	9300      	str	r3, [sp, #0]
 80028fa:	2302      	movs	r3, #2
 80028fc:	4a03      	ldr	r2, [pc, #12]	; (800290c <MPU6050_Init+0x44>)
 80028fe:	21d0      	movs	r1, #208	; 0xd0
 8002900:	4803      	ldr	r0, [pc, #12]	; (8002910 <MPU6050_Init+0x48>)
 8002902:	f001 f8f1 	bl	8003ae8 <HAL_I2C_Master_Transmit>
}
 8002906:	bf00      	nop
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	200004d0 	.word	0x200004d0
 8002910:	2000022c 	.word	0x2000022c

08002914 <MPU6050_Read_Data>:

uint8_t MPU6050_Read_Data(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af02      	add	r7, sp, #8
	HAL_StatusTypeDef status;
	data_tx[0] = 0x3B;
 800291a:	4b11      	ldr	r3, [pc, #68]	; (8002960 <MPU6050_Read_Data+0x4c>)
 800291c:	223b      	movs	r2, #59	; 0x3b
 800291e:	701a      	strb	r2, [r3, #0]
	data_tx[1] = 0x00;
 8002920:	4b0f      	ldr	r3, [pc, #60]	; (8002960 <MPU6050_Read_Data+0x4c>)
 8002922:	2200      	movs	r2, #0
 8002924:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)MPU6050_ADDRESS, &data_tx[0], 1, 100);
 8002926:	2364      	movs	r3, #100	; 0x64
 8002928:	9300      	str	r3, [sp, #0]
 800292a:	2301      	movs	r3, #1
 800292c:	4a0c      	ldr	r2, [pc, #48]	; (8002960 <MPU6050_Read_Data+0x4c>)
 800292e:	21d0      	movs	r1, #208	; 0xd0
 8002930:	480c      	ldr	r0, [pc, #48]	; (8002964 <MPU6050_Read_Data+0x50>)
 8002932:	f001 f8d9 	bl	8003ae8 <HAL_I2C_Master_Transmit>
	status = HAL_I2C_Master_Receive(&hi2c1, (uint16_t)MPU6050_ADDRESS, data_rx, 14, 100);
 8002936:	2364      	movs	r3, #100	; 0x64
 8002938:	9300      	str	r3, [sp, #0]
 800293a:	230e      	movs	r3, #14
 800293c:	4a0a      	ldr	r2, [pc, #40]	; (8002968 <MPU6050_Read_Data+0x54>)
 800293e:	21d0      	movs	r1, #208	; 0xd0
 8002940:	4808      	ldr	r0, [pc, #32]	; (8002964 <MPU6050_Read_Data+0x50>)
 8002942:	f001 f9cf 	bl	8003ce4 <HAL_I2C_Master_Receive>
 8002946:	4603      	mov	r3, r0
 8002948:	71fb      	strb	r3, [r7, #7]
	return (status == HAL_OK) ? 1 : 0;
 800294a:	79fb      	ldrb	r3, [r7, #7]
 800294c:	2b00      	cmp	r3, #0
 800294e:	bf0c      	ite	eq
 8002950:	2301      	moveq	r3, #1
 8002952:	2300      	movne	r3, #0
 8002954:	b2db      	uxtb	r3, r3
}
 8002956:	4618      	mov	r0, r3
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	200004d0 	.word	0x200004d0
 8002964:	2000022c 	.word	0x2000022c
 8002968:	200004d4 	.word	0x200004d4

0800296c <MPU6050_Get_Gx>:
{
	return (float)(((int16_t)(data_rx[4]<<8 | data_rx[5]))/(float)16384);
}

float MPU6050_Get_Gx(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
	return (float)(((int16_t)(data_rx[10]<<8 | data_rx[11]))/(float)131);
 8002970:	4b09      	ldr	r3, [pc, #36]	; (8002998 <MPU6050_Get_Gx+0x2c>)
 8002972:	7a9b      	ldrb	r3, [r3, #10]
 8002974:	021b      	lsls	r3, r3, #8
 8002976:	b21a      	sxth	r2, r3
 8002978:	4b07      	ldr	r3, [pc, #28]	; (8002998 <MPU6050_Get_Gx+0x2c>)
 800297a:	7adb      	ldrb	r3, [r3, #11]
 800297c:	b21b      	sxth	r3, r3
 800297e:	4313      	orrs	r3, r2
 8002980:	b21b      	sxth	r3, r3
 8002982:	4618      	mov	r0, r3
 8002984:	f7fe f964 	bl	8000c50 <__aeabi_i2f>
 8002988:	4603      	mov	r3, r0
 800298a:	4904      	ldr	r1, [pc, #16]	; (800299c <MPU6050_Get_Gx+0x30>)
 800298c:	4618      	mov	r0, r3
 800298e:	f7fe fa67 	bl	8000e60 <__aeabi_fdiv>
 8002992:	4603      	mov	r3, r0
}
 8002994:	4618      	mov	r0, r3
 8002996:	bd80      	pop	{r7, pc}
 8002998:	200004d4 	.word	0x200004d4
 800299c:	43030000 	.word	0x43030000

080029a0 <MPU6050_Get_Gy>:

float MPU6050_Get_Gy(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
	return (float)(((int16_t)(data_rx[12]<<8 | data_rx[13]))/(float)131);
 80029a4:	4b09      	ldr	r3, [pc, #36]	; (80029cc <MPU6050_Get_Gy+0x2c>)
 80029a6:	7b1b      	ldrb	r3, [r3, #12]
 80029a8:	021b      	lsls	r3, r3, #8
 80029aa:	b21a      	sxth	r2, r3
 80029ac:	4b07      	ldr	r3, [pc, #28]	; (80029cc <MPU6050_Get_Gy+0x2c>)
 80029ae:	7b5b      	ldrb	r3, [r3, #13]
 80029b0:	b21b      	sxth	r3, r3
 80029b2:	4313      	orrs	r3, r2
 80029b4:	b21b      	sxth	r3, r3
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7fe f94a 	bl	8000c50 <__aeabi_i2f>
 80029bc:	4603      	mov	r3, r0
 80029be:	4904      	ldr	r1, [pc, #16]	; (80029d0 <MPU6050_Get_Gy+0x30>)
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7fe fa4d 	bl	8000e60 <__aeabi_fdiv>
 80029c6:	4603      	mov	r3, r0
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	200004d4 	.word	0x200004d4
 80029d0:	43030000 	.word	0x43030000

080029d4 <MPU6050_Get_Gz>:

float MPU6050_Get_Gz(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	af00      	add	r7, sp, #0
	return (float)(((int16_t)(data_rx[8]<<8 | data_rx[9]))/(float)131);
 80029d8:	4b09      	ldr	r3, [pc, #36]	; (8002a00 <MPU6050_Get_Gz+0x2c>)
 80029da:	7a1b      	ldrb	r3, [r3, #8]
 80029dc:	021b      	lsls	r3, r3, #8
 80029de:	b21a      	sxth	r2, r3
 80029e0:	4b07      	ldr	r3, [pc, #28]	; (8002a00 <MPU6050_Get_Gz+0x2c>)
 80029e2:	7a5b      	ldrb	r3, [r3, #9]
 80029e4:	b21b      	sxth	r3, r3
 80029e6:	4313      	orrs	r3, r2
 80029e8:	b21b      	sxth	r3, r3
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7fe f930 	bl	8000c50 <__aeabi_i2f>
 80029f0:	4603      	mov	r3, r0
 80029f2:	4904      	ldr	r1, [pc, #16]	; (8002a04 <MPU6050_Get_Gz+0x30>)
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7fe fa33 	bl	8000e60 <__aeabi_fdiv>
 80029fa:	4603      	mov	r3, r0
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	200004d4 	.word	0x200004d4
 8002a04:	43030000 	.word	0x43030000

08002a08 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b085      	sub	sp, #20
 8002a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002a0e:	4b15      	ldr	r3, [pc, #84]	; (8002a64 <HAL_MspInit+0x5c>)
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	4a14      	ldr	r2, [pc, #80]	; (8002a64 <HAL_MspInit+0x5c>)
 8002a14:	f043 0301 	orr.w	r3, r3, #1
 8002a18:	6193      	str	r3, [r2, #24]
 8002a1a:	4b12      	ldr	r3, [pc, #72]	; (8002a64 <HAL_MspInit+0x5c>)
 8002a1c:	699b      	ldr	r3, [r3, #24]
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	60bb      	str	r3, [r7, #8]
 8002a24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a26:	4b0f      	ldr	r3, [pc, #60]	; (8002a64 <HAL_MspInit+0x5c>)
 8002a28:	69db      	ldr	r3, [r3, #28]
 8002a2a:	4a0e      	ldr	r2, [pc, #56]	; (8002a64 <HAL_MspInit+0x5c>)
 8002a2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a30:	61d3      	str	r3, [r2, #28]
 8002a32:	4b0c      	ldr	r3, [pc, #48]	; (8002a64 <HAL_MspInit+0x5c>)
 8002a34:	69db      	ldr	r3, [r3, #28]
 8002a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a3a:	607b      	str	r3, [r7, #4]
 8002a3c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002a3e:	4b0a      	ldr	r3, [pc, #40]	; (8002a68 <HAL_MspInit+0x60>)
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	60fb      	str	r3, [r7, #12]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002a4a:	60fb      	str	r3, [r7, #12]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a52:	60fb      	str	r3, [r7, #12]
 8002a54:	4a04      	ldr	r2, [pc, #16]	; (8002a68 <HAL_MspInit+0x60>)
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a5a:	bf00      	nop
 8002a5c:	3714      	adds	r7, #20
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bc80      	pop	{r7}
 8002a62:	4770      	bx	lr
 8002a64:	40021000 	.word	0x40021000
 8002a68:	40010000 	.word	0x40010000

08002a6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b08c      	sub	sp, #48	; 0x30
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a74:	f107 031c 	add.w	r3, r7, #28
 8002a78:	2200      	movs	r2, #0
 8002a7a:	601a      	str	r2, [r3, #0]
 8002a7c:	605a      	str	r2, [r3, #4]
 8002a7e:	609a      	str	r2, [r3, #8]
 8002a80:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a32      	ldr	r2, [pc, #200]	; (8002b50 <HAL_I2C_MspInit+0xe4>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d133      	bne.n	8002af4 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a8c:	4b31      	ldr	r3, [pc, #196]	; (8002b54 <HAL_I2C_MspInit+0xe8>)
 8002a8e:	699b      	ldr	r3, [r3, #24]
 8002a90:	4a30      	ldr	r2, [pc, #192]	; (8002b54 <HAL_I2C_MspInit+0xe8>)
 8002a92:	f043 0308 	orr.w	r3, r3, #8
 8002a96:	6193      	str	r3, [r2, #24]
 8002a98:	4b2e      	ldr	r3, [pc, #184]	; (8002b54 <HAL_I2C_MspInit+0xe8>)
 8002a9a:	699b      	ldr	r3, [r3, #24]
 8002a9c:	f003 0308 	and.w	r3, r3, #8
 8002aa0:	61bb      	str	r3, [r7, #24]
 8002aa2:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002aa4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002aa8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002aaa:	2312      	movs	r3, #18
 8002aac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ab2:	f107 031c 	add.w	r3, r7, #28
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	4827      	ldr	r0, [pc, #156]	; (8002b58 <HAL_I2C_MspInit+0xec>)
 8002aba:	f000 fd35 	bl	8003528 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8002abe:	4b27      	ldr	r3, [pc, #156]	; (8002b5c <HAL_I2C_MspInit+0xf0>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ac6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002aca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ace:	f043 0302 	orr.w	r3, r3, #2
 8002ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ad4:	4a21      	ldr	r2, [pc, #132]	; (8002b5c <HAL_I2C_MspInit+0xf0>)
 8002ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ad8:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002ada:	4b1e      	ldr	r3, [pc, #120]	; (8002b54 <HAL_I2C_MspInit+0xe8>)
 8002adc:	69db      	ldr	r3, [r3, #28]
 8002ade:	4a1d      	ldr	r2, [pc, #116]	; (8002b54 <HAL_I2C_MspInit+0xe8>)
 8002ae0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ae4:	61d3      	str	r3, [r2, #28]
 8002ae6:	4b1b      	ldr	r3, [pc, #108]	; (8002b54 <HAL_I2C_MspInit+0xe8>)
 8002ae8:	69db      	ldr	r3, [r3, #28]
 8002aea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aee:	617b      	str	r3, [r7, #20]
 8002af0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002af2:	e029      	b.n	8002b48 <HAL_I2C_MspInit+0xdc>
  else if(hi2c->Instance==I2C2)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a19      	ldr	r2, [pc, #100]	; (8002b60 <HAL_I2C_MspInit+0xf4>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d124      	bne.n	8002b48 <HAL_I2C_MspInit+0xdc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002afe:	4b15      	ldr	r3, [pc, #84]	; (8002b54 <HAL_I2C_MspInit+0xe8>)
 8002b00:	699b      	ldr	r3, [r3, #24]
 8002b02:	4a14      	ldr	r2, [pc, #80]	; (8002b54 <HAL_I2C_MspInit+0xe8>)
 8002b04:	f043 0308 	orr.w	r3, r3, #8
 8002b08:	6193      	str	r3, [r2, #24]
 8002b0a:	4b12      	ldr	r3, [pc, #72]	; (8002b54 <HAL_I2C_MspInit+0xe8>)
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	f003 0308 	and.w	r3, r3, #8
 8002b12:	613b      	str	r3, [r7, #16]
 8002b14:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002b16:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002b1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b1c:	2312      	movs	r3, #18
 8002b1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b20:	2303      	movs	r3, #3
 8002b22:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b24:	f107 031c 	add.w	r3, r7, #28
 8002b28:	4619      	mov	r1, r3
 8002b2a:	480b      	ldr	r0, [pc, #44]	; (8002b58 <HAL_I2C_MspInit+0xec>)
 8002b2c:	f000 fcfc 	bl	8003528 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002b30:	4b08      	ldr	r3, [pc, #32]	; (8002b54 <HAL_I2C_MspInit+0xe8>)
 8002b32:	69db      	ldr	r3, [r3, #28]
 8002b34:	4a07      	ldr	r2, [pc, #28]	; (8002b54 <HAL_I2C_MspInit+0xe8>)
 8002b36:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b3a:	61d3      	str	r3, [r2, #28]
 8002b3c:	4b05      	ldr	r3, [pc, #20]	; (8002b54 <HAL_I2C_MspInit+0xe8>)
 8002b3e:	69db      	ldr	r3, [r3, #28]
 8002b40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b44:	60fb      	str	r3, [r7, #12]
 8002b46:	68fb      	ldr	r3, [r7, #12]
}
 8002b48:	bf00      	nop
 8002b4a:	3730      	adds	r7, #48	; 0x30
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	40005400 	.word	0x40005400
 8002b54:	40021000 	.word	0x40021000
 8002b58:	40010c00 	.word	0x40010c00
 8002b5c:	40010000 	.word	0x40010000
 8002b60:	40005800 	.word	0x40005800

08002b64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b085      	sub	sp, #20
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a12      	ldr	r2, [pc, #72]	; (8002bbc <HAL_TIM_Base_MspInit+0x58>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d10c      	bne.n	8002b90 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002b76:	4b12      	ldr	r3, [pc, #72]	; (8002bc0 <HAL_TIM_Base_MspInit+0x5c>)
 8002b78:	699b      	ldr	r3, [r3, #24]
 8002b7a:	4a11      	ldr	r2, [pc, #68]	; (8002bc0 <HAL_TIM_Base_MspInit+0x5c>)
 8002b7c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b80:	6193      	str	r3, [r2, #24]
 8002b82:	4b0f      	ldr	r3, [pc, #60]	; (8002bc0 <HAL_TIM_Base_MspInit+0x5c>)
 8002b84:	699b      	ldr	r3, [r3, #24]
 8002b86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b8a:	60fb      	str	r3, [r7, #12]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002b8e:	e010      	b.n	8002bb2 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b98:	d10b      	bne.n	8002bb2 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b9a:	4b09      	ldr	r3, [pc, #36]	; (8002bc0 <HAL_TIM_Base_MspInit+0x5c>)
 8002b9c:	69db      	ldr	r3, [r3, #28]
 8002b9e:	4a08      	ldr	r2, [pc, #32]	; (8002bc0 <HAL_TIM_Base_MspInit+0x5c>)
 8002ba0:	f043 0301 	orr.w	r3, r3, #1
 8002ba4:	61d3      	str	r3, [r2, #28]
 8002ba6:	4b06      	ldr	r3, [pc, #24]	; (8002bc0 <HAL_TIM_Base_MspInit+0x5c>)
 8002ba8:	69db      	ldr	r3, [r3, #28]
 8002baa:	f003 0301 	and.w	r3, r3, #1
 8002bae:	60bb      	str	r3, [r7, #8]
 8002bb0:	68bb      	ldr	r3, [r7, #8]
}
 8002bb2:	bf00      	nop
 8002bb4:	3714      	adds	r7, #20
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bc80      	pop	{r7}
 8002bba:	4770      	bx	lr
 8002bbc:	40012c00 	.word	0x40012c00
 8002bc0:	40021000 	.word	0x40021000

08002bc4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b08a      	sub	sp, #40	; 0x28
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bcc:	f107 0318 	add.w	r3, r7, #24
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	601a      	str	r2, [r3, #0]
 8002bd4:	605a      	str	r2, [r3, #4]
 8002bd6:	609a      	str	r2, [r3, #8]
 8002bd8:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a32      	ldr	r2, [pc, #200]	; (8002ca8 <HAL_TIM_Encoder_MspInit+0xe4>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d12c      	bne.n	8002c3e <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002be4:	4b31      	ldr	r3, [pc, #196]	; (8002cac <HAL_TIM_Encoder_MspInit+0xe8>)
 8002be6:	69db      	ldr	r3, [r3, #28]
 8002be8:	4a30      	ldr	r2, [pc, #192]	; (8002cac <HAL_TIM_Encoder_MspInit+0xe8>)
 8002bea:	f043 0302 	orr.w	r3, r3, #2
 8002bee:	61d3      	str	r3, [r2, #28]
 8002bf0:	4b2e      	ldr	r3, [pc, #184]	; (8002cac <HAL_TIM_Encoder_MspInit+0xe8>)
 8002bf2:	69db      	ldr	r3, [r3, #28]
 8002bf4:	f003 0302 	and.w	r3, r3, #2
 8002bf8:	617b      	str	r3, [r7, #20]
 8002bfa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bfc:	4b2b      	ldr	r3, [pc, #172]	; (8002cac <HAL_TIM_Encoder_MspInit+0xe8>)
 8002bfe:	699b      	ldr	r3, [r3, #24]
 8002c00:	4a2a      	ldr	r2, [pc, #168]	; (8002cac <HAL_TIM_Encoder_MspInit+0xe8>)
 8002c02:	f043 0304 	orr.w	r3, r3, #4
 8002c06:	6193      	str	r3, [r2, #24]
 8002c08:	4b28      	ldr	r3, [pc, #160]	; (8002cac <HAL_TIM_Encoder_MspInit+0xe8>)
 8002c0a:	699b      	ldr	r3, [r3, #24]
 8002c0c:	f003 0304 	and.w	r3, r3, #4
 8002c10:	613b      	str	r3, [r7, #16]
 8002c12:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002c14:	23c0      	movs	r3, #192	; 0xc0
 8002c16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c20:	f107 0318 	add.w	r3, r7, #24
 8002c24:	4619      	mov	r1, r3
 8002c26:	4822      	ldr	r0, [pc, #136]	; (8002cb0 <HAL_TIM_Encoder_MspInit+0xec>)
 8002c28:	f000 fc7e 	bl	8003528 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	2100      	movs	r1, #0
 8002c30:	201d      	movs	r0, #29
 8002c32:	f000 fb90 	bl	8003356 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002c36:	201d      	movs	r0, #29
 8002c38:	f000 fba9 	bl	800338e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002c3c:	e030      	b.n	8002ca0 <HAL_TIM_Encoder_MspInit+0xdc>
  else if(htim_encoder->Instance==TIM4)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a1c      	ldr	r2, [pc, #112]	; (8002cb4 <HAL_TIM_Encoder_MspInit+0xf0>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d12b      	bne.n	8002ca0 <HAL_TIM_Encoder_MspInit+0xdc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002c48:	4b18      	ldr	r3, [pc, #96]	; (8002cac <HAL_TIM_Encoder_MspInit+0xe8>)
 8002c4a:	69db      	ldr	r3, [r3, #28]
 8002c4c:	4a17      	ldr	r2, [pc, #92]	; (8002cac <HAL_TIM_Encoder_MspInit+0xe8>)
 8002c4e:	f043 0304 	orr.w	r3, r3, #4
 8002c52:	61d3      	str	r3, [r2, #28]
 8002c54:	4b15      	ldr	r3, [pc, #84]	; (8002cac <HAL_TIM_Encoder_MspInit+0xe8>)
 8002c56:	69db      	ldr	r3, [r3, #28]
 8002c58:	f003 0304 	and.w	r3, r3, #4
 8002c5c:	60fb      	str	r3, [r7, #12]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c60:	4b12      	ldr	r3, [pc, #72]	; (8002cac <HAL_TIM_Encoder_MspInit+0xe8>)
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	4a11      	ldr	r2, [pc, #68]	; (8002cac <HAL_TIM_Encoder_MspInit+0xe8>)
 8002c66:	f043 0308 	orr.w	r3, r3, #8
 8002c6a:	6193      	str	r3, [r2, #24]
 8002c6c:	4b0f      	ldr	r3, [pc, #60]	; (8002cac <HAL_TIM_Encoder_MspInit+0xe8>)
 8002c6e:	699b      	ldr	r3, [r3, #24]
 8002c70:	f003 0308 	and.w	r3, r3, #8
 8002c74:	60bb      	str	r3, [r7, #8]
 8002c76:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENCODERA_RIGHT_Pin|ENCODERA_LEFT_Pin;
 8002c78:	23c0      	movs	r3, #192	; 0xc0
 8002c7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c80:	2300      	movs	r3, #0
 8002c82:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c84:	f107 0318 	add.w	r3, r7, #24
 8002c88:	4619      	mov	r1, r3
 8002c8a:	480b      	ldr	r0, [pc, #44]	; (8002cb8 <HAL_TIM_Encoder_MspInit+0xf4>)
 8002c8c:	f000 fc4c 	bl	8003528 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002c90:	2200      	movs	r2, #0
 8002c92:	2100      	movs	r1, #0
 8002c94:	201e      	movs	r0, #30
 8002c96:	f000 fb5e 	bl	8003356 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002c9a:	201e      	movs	r0, #30
 8002c9c:	f000 fb77 	bl	800338e <HAL_NVIC_EnableIRQ>
}
 8002ca0:	bf00      	nop
 8002ca2:	3728      	adds	r7, #40	; 0x28
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	40000400 	.word	0x40000400
 8002cac:	40021000 	.word	0x40021000
 8002cb0:	40010800 	.word	0x40010800
 8002cb4:	40000800 	.word	0x40000800
 8002cb8:	40010c00 	.word	0x40010c00

08002cbc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b088      	sub	sp, #32
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cc4:	f107 0310 	add.w	r3, r7, #16
 8002cc8:	2200      	movs	r2, #0
 8002cca:	601a      	str	r2, [r3, #0]
 8002ccc:	605a      	str	r2, [r3, #4]
 8002cce:	609a      	str	r2, [r3, #8]
 8002cd0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a1f      	ldr	r2, [pc, #124]	; (8002d54 <HAL_TIM_MspPostInit+0x98>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d119      	bne.n	8002d10 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cdc:	4b1e      	ldr	r3, [pc, #120]	; (8002d58 <HAL_TIM_MspPostInit+0x9c>)
 8002cde:	699b      	ldr	r3, [r3, #24]
 8002ce0:	4a1d      	ldr	r2, [pc, #116]	; (8002d58 <HAL_TIM_MspPostInit+0x9c>)
 8002ce2:	f043 0304 	orr.w	r3, r3, #4
 8002ce6:	6193      	str	r3, [r2, #24]
 8002ce8:	4b1b      	ldr	r3, [pc, #108]	; (8002d58 <HAL_TIM_MspPostInit+0x9c>)
 8002cea:	699b      	ldr	r3, [r3, #24]
 8002cec:	f003 0304 	and.w	r3, r3, #4
 8002cf0:	60fb      	str	r3, [r7, #12]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002cf4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002cf8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cfe:	2302      	movs	r3, #2
 8002d00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d02:	f107 0310 	add.w	r3, r7, #16
 8002d06:	4619      	mov	r1, r3
 8002d08:	4814      	ldr	r0, [pc, #80]	; (8002d5c <HAL_TIM_MspPostInit+0xa0>)
 8002d0a:	f000 fc0d 	bl	8003528 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002d0e:	e01c      	b.n	8002d4a <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM2)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d18:	d117      	bne.n	8002d4a <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d1a:	4b0f      	ldr	r3, [pc, #60]	; (8002d58 <HAL_TIM_MspPostInit+0x9c>)
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	4a0e      	ldr	r2, [pc, #56]	; (8002d58 <HAL_TIM_MspPostInit+0x9c>)
 8002d20:	f043 0304 	orr.w	r3, r3, #4
 8002d24:	6193      	str	r3, [r2, #24]
 8002d26:	4b0c      	ldr	r3, [pc, #48]	; (8002d58 <HAL_TIM_MspPostInit+0x9c>)
 8002d28:	699b      	ldr	r3, [r3, #24]
 8002d2a:	f003 0304 	and.w	r3, r3, #4
 8002d2e:	60bb      	str	r3, [r7, #8]
 8002d30:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = backRightPWM_Pin|backLeftPWM_Pin;
 8002d32:	2303      	movs	r3, #3
 8002d34:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d36:	2302      	movs	r3, #2
 8002d38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d3a:	2302      	movs	r3, #2
 8002d3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d3e:	f107 0310 	add.w	r3, r7, #16
 8002d42:	4619      	mov	r1, r3
 8002d44:	4805      	ldr	r0, [pc, #20]	; (8002d5c <HAL_TIM_MspPostInit+0xa0>)
 8002d46:	f000 fbef 	bl	8003528 <HAL_GPIO_Init>
}
 8002d4a:	bf00      	nop
 8002d4c:	3720      	adds	r7, #32
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	40012c00 	.word	0x40012c00
 8002d58:	40021000 	.word	0x40021000
 8002d5c:	40010800 	.word	0x40010800

08002d60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b08a      	sub	sp, #40	; 0x28
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d68:	f107 0318 	add.w	r3, r7, #24
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	601a      	str	r2, [r3, #0]
 8002d70:	605a      	str	r2, [r3, #4]
 8002d72:	609a      	str	r2, [r3, #8]
 8002d74:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a3b      	ldr	r2, [pc, #236]	; (8002e68 <HAL_UART_MspInit+0x108>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d13a      	bne.n	8002df6 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d80:	4b3a      	ldr	r3, [pc, #232]	; (8002e6c <HAL_UART_MspInit+0x10c>)
 8002d82:	699b      	ldr	r3, [r3, #24]
 8002d84:	4a39      	ldr	r2, [pc, #228]	; (8002e6c <HAL_UART_MspInit+0x10c>)
 8002d86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d8a:	6193      	str	r3, [r2, #24]
 8002d8c:	4b37      	ldr	r3, [pc, #220]	; (8002e6c <HAL_UART_MspInit+0x10c>)
 8002d8e:	699b      	ldr	r3, [r3, #24]
 8002d90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d94:	617b      	str	r3, [r7, #20]
 8002d96:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d98:	4b34      	ldr	r3, [pc, #208]	; (8002e6c <HAL_UART_MspInit+0x10c>)
 8002d9a:	699b      	ldr	r3, [r3, #24]
 8002d9c:	4a33      	ldr	r2, [pc, #204]	; (8002e6c <HAL_UART_MspInit+0x10c>)
 8002d9e:	f043 0304 	orr.w	r3, r3, #4
 8002da2:	6193      	str	r3, [r2, #24]
 8002da4:	4b31      	ldr	r3, [pc, #196]	; (8002e6c <HAL_UART_MspInit+0x10c>)
 8002da6:	699b      	ldr	r3, [r3, #24]
 8002da8:	f003 0304 	and.w	r3, r3, #4
 8002dac:	613b      	str	r3, [r7, #16]
 8002dae:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002db0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002db4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002db6:	2302      	movs	r3, #2
 8002db8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dbe:	f107 0318 	add.w	r3, r7, #24
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	482a      	ldr	r0, [pc, #168]	; (8002e70 <HAL_UART_MspInit+0x110>)
 8002dc6:	f000 fbaf 	bl	8003528 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002dca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002dce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dd8:	f107 0318 	add.w	r3, r7, #24
 8002ddc:	4619      	mov	r1, r3
 8002dde:	4824      	ldr	r0, [pc, #144]	; (8002e70 <HAL_UART_MspInit+0x110>)
 8002de0:	f000 fba2 	bl	8003528 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002de4:	2200      	movs	r2, #0
 8002de6:	2100      	movs	r1, #0
 8002de8:	2025      	movs	r0, #37	; 0x25
 8002dea:	f000 fab4 	bl	8003356 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002dee:	2025      	movs	r0, #37	; 0x25
 8002df0:	f000 facd 	bl	800338e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002df4:	e034      	b.n	8002e60 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a1e      	ldr	r2, [pc, #120]	; (8002e74 <HAL_UART_MspInit+0x114>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d12f      	bne.n	8002e60 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e00:	4b1a      	ldr	r3, [pc, #104]	; (8002e6c <HAL_UART_MspInit+0x10c>)
 8002e02:	69db      	ldr	r3, [r3, #28]
 8002e04:	4a19      	ldr	r2, [pc, #100]	; (8002e6c <HAL_UART_MspInit+0x10c>)
 8002e06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e0a:	61d3      	str	r3, [r2, #28]
 8002e0c:	4b17      	ldr	r3, [pc, #92]	; (8002e6c <HAL_UART_MspInit+0x10c>)
 8002e0e:	69db      	ldr	r3, [r3, #28]
 8002e10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e14:	60fb      	str	r3, [r7, #12]
 8002e16:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e18:	4b14      	ldr	r3, [pc, #80]	; (8002e6c <HAL_UART_MspInit+0x10c>)
 8002e1a:	699b      	ldr	r3, [r3, #24]
 8002e1c:	4a13      	ldr	r2, [pc, #76]	; (8002e6c <HAL_UART_MspInit+0x10c>)
 8002e1e:	f043 0304 	orr.w	r3, r3, #4
 8002e22:	6193      	str	r3, [r2, #24]
 8002e24:	4b11      	ldr	r3, [pc, #68]	; (8002e6c <HAL_UART_MspInit+0x10c>)
 8002e26:	699b      	ldr	r3, [r3, #24]
 8002e28:	f003 0304 	and.w	r3, r3, #4
 8002e2c:	60bb      	str	r3, [r7, #8]
 8002e2e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002e30:	2304      	movs	r3, #4
 8002e32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e34:	2302      	movs	r3, #2
 8002e36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e3c:	f107 0318 	add.w	r3, r7, #24
 8002e40:	4619      	mov	r1, r3
 8002e42:	480b      	ldr	r0, [pc, #44]	; (8002e70 <HAL_UART_MspInit+0x110>)
 8002e44:	f000 fb70 	bl	8003528 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002e48:	2308      	movs	r3, #8
 8002e4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e50:	2300      	movs	r3, #0
 8002e52:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e54:	f107 0318 	add.w	r3, r7, #24
 8002e58:	4619      	mov	r1, r3
 8002e5a:	4805      	ldr	r0, [pc, #20]	; (8002e70 <HAL_UART_MspInit+0x110>)
 8002e5c:	f000 fb64 	bl	8003528 <HAL_GPIO_Init>
}
 8002e60:	bf00      	nop
 8002e62:	3728      	adds	r7, #40	; 0x28
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	40013800 	.word	0x40013800
 8002e6c:	40021000 	.word	0x40021000
 8002e70:	40010800 	.word	0x40010800
 8002e74:	40004400 	.word	0x40004400

08002e78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e7c:	e7fe      	b.n	8002e7c <NMI_Handler+0x4>

08002e7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e7e:	b480      	push	{r7}
 8002e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e82:	e7fe      	b.n	8002e82 <HardFault_Handler+0x4>

08002e84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e84:	b480      	push	{r7}
 8002e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e88:	e7fe      	b.n	8002e88 <MemManage_Handler+0x4>

08002e8a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e8a:	b480      	push	{r7}
 8002e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e8e:	e7fe      	b.n	8002e8e <BusFault_Handler+0x4>

08002e90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e90:	b480      	push	{r7}
 8002e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e94:	e7fe      	b.n	8002e94 <UsageFault_Handler+0x4>

08002e96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e96:	b480      	push	{r7}
 8002e98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e9a:	bf00      	nop
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bc80      	pop	{r7}
 8002ea0:	4770      	bx	lr

08002ea2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ea2:	b480      	push	{r7}
 8002ea4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ea6:	bf00      	nop
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bc80      	pop	{r7}
 8002eac:	4770      	bx	lr

08002eae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002eae:	b480      	push	{r7}
 8002eb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002eb2:	bf00      	nop
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bc80      	pop	{r7}
 8002eb8:	4770      	bx	lr

08002eba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ebe:	f000 f933 	bl	8003128 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ec2:	bf00      	nop
 8002ec4:	bd80      	pop	{r7, pc}
	...

08002ec8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002ecc:	4802      	ldr	r0, [pc, #8]	; (8002ed8 <TIM3_IRQHandler+0x10>)
 8002ece:	f002 fba5 	bl	800561c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002ed2:	bf00      	nop
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	20000364 	.word	0x20000364

08002edc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002ee0:	4802      	ldr	r0, [pc, #8]	; (8002eec <TIM4_IRQHandler+0x10>)
 8002ee2:	f002 fb9b 	bl	800561c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002ee6:	bf00      	nop
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	200003ac 	.word	0x200003ac

08002ef0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002ef4:	4802      	ldr	r0, [pc, #8]	; (8002f00 <USART1_IRQHandler+0x10>)
 8002ef6:	f003 fa7f 	bl	80063f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002efa:	bf00      	nop
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	200003f4 	.word	0x200003f4

08002f04 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b086      	sub	sp, #24
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f10:	2300      	movs	r3, #0
 8002f12:	617b      	str	r3, [r7, #20]
 8002f14:	e00a      	b.n	8002f2c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002f16:	f3af 8000 	nop.w
 8002f1a:	4601      	mov	r1, r0
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	1c5a      	adds	r2, r3, #1
 8002f20:	60ba      	str	r2, [r7, #8]
 8002f22:	b2ca      	uxtb	r2, r1
 8002f24:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	3301      	adds	r3, #1
 8002f2a:	617b      	str	r3, [r7, #20]
 8002f2c:	697a      	ldr	r2, [r7, #20]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	dbf0      	blt.n	8002f16 <_read+0x12>
  }

  return len;
 8002f34:	687b      	ldr	r3, [r7, #4]
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3718      	adds	r7, #24
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}

08002f3e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b086      	sub	sp, #24
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	60f8      	str	r0, [r7, #12]
 8002f46:	60b9      	str	r1, [r7, #8]
 8002f48:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	617b      	str	r3, [r7, #20]
 8002f4e:	e009      	b.n	8002f64 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	1c5a      	adds	r2, r3, #1
 8002f54:	60ba      	str	r2, [r7, #8]
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7fe fca7 	bl	80018ac <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	3301      	adds	r3, #1
 8002f62:	617b      	str	r3, [r7, #20]
 8002f64:	697a      	ldr	r2, [r7, #20]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	dbf1      	blt.n	8002f50 <_write+0x12>
  }
  return len;
 8002f6c:	687b      	ldr	r3, [r7, #4]
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3718      	adds	r7, #24
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}

08002f76 <_close>:

int _close(int file)
{
 8002f76:	b480      	push	{r7}
 8002f78:	b083      	sub	sp, #12
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002f7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	370c      	adds	r7, #12
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bc80      	pop	{r7}
 8002f8a:	4770      	bx	lr

08002f8c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f9c:	605a      	str	r2, [r3, #4]
  return 0;
 8002f9e:	2300      	movs	r3, #0
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bc80      	pop	{r7}
 8002fa8:	4770      	bx	lr

08002faa <_isatty>:

int _isatty(int file)
{
 8002faa:	b480      	push	{r7}
 8002fac:	b083      	sub	sp, #12
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002fb2:	2301      	movs	r3, #1
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bc80      	pop	{r7}
 8002fbc:	4770      	bx	lr

08002fbe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002fbe:	b480      	push	{r7}
 8002fc0:	b085      	sub	sp, #20
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	60f8      	str	r0, [r7, #12]
 8002fc6:	60b9      	str	r1, [r7, #8]
 8002fc8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
   return 0;
 8002fca:	2300      	movs	r3, #0
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3714      	adds	r7, #20
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bc80      	pop	{r7}
 8002fd4:	4770      	bx	lr
	...

08002fd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b086      	sub	sp, #24
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002fe0:	4a14      	ldr	r2, [pc, #80]	; (8003034 <_sbrk+0x5c>)
 8002fe2:	4b15      	ldr	r3, [pc, #84]	; (8003038 <_sbrk+0x60>)
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002fec:	4b13      	ldr	r3, [pc, #76]	; (800303c <_sbrk+0x64>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d102      	bne.n	8002ffa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ff4:	4b11      	ldr	r3, [pc, #68]	; (800303c <_sbrk+0x64>)
 8002ff6:	4a12      	ldr	r2, [pc, #72]	; (8003040 <_sbrk+0x68>)
 8002ff8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ffa:	4b10      	ldr	r3, [pc, #64]	; (800303c <_sbrk+0x64>)
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4413      	add	r3, r2
 8003002:	693a      	ldr	r2, [r7, #16]
 8003004:	429a      	cmp	r2, r3
 8003006:	d207      	bcs.n	8003018 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003008:	f004 f9be 	bl	8007388 <__errno>
 800300c:	4603      	mov	r3, r0
 800300e:	220c      	movs	r2, #12
 8003010:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003012:	f04f 33ff 	mov.w	r3, #4294967295
 8003016:	e009      	b.n	800302c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003018:	4b08      	ldr	r3, [pc, #32]	; (800303c <_sbrk+0x64>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800301e:	4b07      	ldr	r3, [pc, #28]	; (800303c <_sbrk+0x64>)
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4413      	add	r3, r2
 8003026:	4a05      	ldr	r2, [pc, #20]	; (800303c <_sbrk+0x64>)
 8003028:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800302a:	68fb      	ldr	r3, [r7, #12]
}
 800302c:	4618      	mov	r0, r3
 800302e:	3718      	adds	r7, #24
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	20005000 	.word	0x20005000
 8003038:	00000400 	.word	0x00000400
 800303c:	200004e4 	.word	0x200004e4
 8003040:	20000638 	.word	0x20000638

08003044 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003044:	b480      	push	{r7}
 8003046:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003048:	bf00      	nop
 800304a:	46bd      	mov	sp, r7
 800304c:	bc80      	pop	{r7}
 800304e:	4770      	bx	lr

08003050 <Reset_Handler>:
  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/    bl  SystemInit
 8003050:	f7ff fff8 	bl	8003044 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003054:	480b      	ldr	r0, [pc, #44]	; (8003084 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003056:	490c      	ldr	r1, [pc, #48]	; (8003088 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003058:	4a0c      	ldr	r2, [pc, #48]	; (800308c <LoopFillZerobss+0x16>)
  movs r3, #0
 800305a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800305c:	e002      	b.n	8003064 <LoopCopyDataInit>

0800305e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800305e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003060:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003062:	3304      	adds	r3, #4

08003064 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003064:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003066:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003068:	d3f9      	bcc.n	800305e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800306a:	4a09      	ldr	r2, [pc, #36]	; (8003090 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800306c:	4c09      	ldr	r4, [pc, #36]	; (8003094 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800306e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003070:	e001      	b.n	8003076 <LoopFillZerobss>

08003072 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003072:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003074:	3204      	adds	r2, #4

08003076 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003076:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003078:	d3fb      	bcc.n	8003072 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800307a:	f004 f98b 	bl	8007394 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800307e:	f7fe ff5f 	bl	8001f40 <main>
  bx lr
 8003082:	4770      	bx	lr
  ldr r0, =_sdata
 8003084:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003088:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 800308c:	080083d4 	.word	0x080083d4
  ldr r2, =_sbss
 8003090:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8003094:	20000638 	.word	0x20000638

08003098 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003098:	e7fe      	b.n	8003098 <ADC1_2_IRQHandler>
	...

0800309c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030a0:	4b08      	ldr	r3, [pc, #32]	; (80030c4 <HAL_Init+0x28>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a07      	ldr	r2, [pc, #28]	; (80030c4 <HAL_Init+0x28>)
 80030a6:	f043 0310 	orr.w	r3, r3, #16
 80030aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030ac:	2003      	movs	r0, #3
 80030ae:	f000 f947 	bl	8003340 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030b2:	200f      	movs	r0, #15
 80030b4:	f000 f808 	bl	80030c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030b8:	f7ff fca6 	bl	8002a08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	40022000 	.word	0x40022000

080030c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030d0:	4b12      	ldr	r3, [pc, #72]	; (800311c <HAL_InitTick+0x54>)
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	4b12      	ldr	r3, [pc, #72]	; (8003120 <HAL_InitTick+0x58>)
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	4619      	mov	r1, r3
 80030da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030de:	fbb3 f3f1 	udiv	r3, r3, r1
 80030e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80030e6:	4618      	mov	r0, r3
 80030e8:	f000 f95f 	bl	80033aa <HAL_SYSTICK_Config>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d001      	beq.n	80030f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e00e      	b.n	8003114 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2b0f      	cmp	r3, #15
 80030fa:	d80a      	bhi.n	8003112 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030fc:	2200      	movs	r2, #0
 80030fe:	6879      	ldr	r1, [r7, #4]
 8003100:	f04f 30ff 	mov.w	r0, #4294967295
 8003104:	f000 f927 	bl	8003356 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003108:	4a06      	ldr	r2, [pc, #24]	; (8003124 <HAL_InitTick+0x5c>)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800310e:	2300      	movs	r3, #0
 8003110:	e000      	b.n	8003114 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
}
 8003114:	4618      	mov	r0, r3
 8003116:	3708      	adds	r7, #8
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	20000024 	.word	0x20000024
 8003120:	2000002c 	.word	0x2000002c
 8003124:	20000028 	.word	0x20000028

08003128 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003128:	b480      	push	{r7}
 800312a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800312c:	4b05      	ldr	r3, [pc, #20]	; (8003144 <HAL_IncTick+0x1c>)
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	461a      	mov	r2, r3
 8003132:	4b05      	ldr	r3, [pc, #20]	; (8003148 <HAL_IncTick+0x20>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4413      	add	r3, r2
 8003138:	4a03      	ldr	r2, [pc, #12]	; (8003148 <HAL_IncTick+0x20>)
 800313a:	6013      	str	r3, [r2, #0]
}
 800313c:	bf00      	nop
 800313e:	46bd      	mov	sp, r7
 8003140:	bc80      	pop	{r7}
 8003142:	4770      	bx	lr
 8003144:	2000002c 	.word	0x2000002c
 8003148:	200004e8 	.word	0x200004e8

0800314c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800314c:	b480      	push	{r7}
 800314e:	af00      	add	r7, sp, #0
  return uwTick;
 8003150:	4b02      	ldr	r3, [pc, #8]	; (800315c <HAL_GetTick+0x10>)
 8003152:	681b      	ldr	r3, [r3, #0]
}
 8003154:	4618      	mov	r0, r3
 8003156:	46bd      	mov	sp, r7
 8003158:	bc80      	pop	{r7}
 800315a:	4770      	bx	lr
 800315c:	200004e8 	.word	0x200004e8

08003160 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003168:	f7ff fff0 	bl	800314c <HAL_GetTick>
 800316c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003178:	d005      	beq.n	8003186 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800317a:	4b0a      	ldr	r3, [pc, #40]	; (80031a4 <HAL_Delay+0x44>)
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	461a      	mov	r2, r3
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	4413      	add	r3, r2
 8003184:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003186:	bf00      	nop
 8003188:	f7ff ffe0 	bl	800314c <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	68fa      	ldr	r2, [r7, #12]
 8003194:	429a      	cmp	r2, r3
 8003196:	d8f7      	bhi.n	8003188 <HAL_Delay+0x28>
  {
  }
}
 8003198:	bf00      	nop
 800319a:	bf00      	nop
 800319c:	3710      	adds	r7, #16
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	2000002c 	.word	0x2000002c

080031a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b085      	sub	sp, #20
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f003 0307 	and.w	r3, r3, #7
 80031b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031b8:	4b0c      	ldr	r3, [pc, #48]	; (80031ec <__NVIC_SetPriorityGrouping+0x44>)
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031be:	68ba      	ldr	r2, [r7, #8]
 80031c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031c4:	4013      	ands	r3, r2
 80031c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031da:	4a04      	ldr	r2, [pc, #16]	; (80031ec <__NVIC_SetPriorityGrouping+0x44>)
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	60d3      	str	r3, [r2, #12]
}
 80031e0:	bf00      	nop
 80031e2:	3714      	adds	r7, #20
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bc80      	pop	{r7}
 80031e8:	4770      	bx	lr
 80031ea:	bf00      	nop
 80031ec:	e000ed00 	.word	0xe000ed00

080031f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031f0:	b480      	push	{r7}
 80031f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031f4:	4b04      	ldr	r3, [pc, #16]	; (8003208 <__NVIC_GetPriorityGrouping+0x18>)
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	0a1b      	lsrs	r3, r3, #8
 80031fa:	f003 0307 	and.w	r3, r3, #7
}
 80031fe:	4618      	mov	r0, r3
 8003200:	46bd      	mov	sp, r7
 8003202:	bc80      	pop	{r7}
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop
 8003208:	e000ed00 	.word	0xe000ed00

0800320c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	4603      	mov	r3, r0
 8003214:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800321a:	2b00      	cmp	r3, #0
 800321c:	db0b      	blt.n	8003236 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800321e:	79fb      	ldrb	r3, [r7, #7]
 8003220:	f003 021f 	and.w	r2, r3, #31
 8003224:	4906      	ldr	r1, [pc, #24]	; (8003240 <__NVIC_EnableIRQ+0x34>)
 8003226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800322a:	095b      	lsrs	r3, r3, #5
 800322c:	2001      	movs	r0, #1
 800322e:	fa00 f202 	lsl.w	r2, r0, r2
 8003232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003236:	bf00      	nop
 8003238:	370c      	adds	r7, #12
 800323a:	46bd      	mov	sp, r7
 800323c:	bc80      	pop	{r7}
 800323e:	4770      	bx	lr
 8003240:	e000e100 	.word	0xe000e100

08003244 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	4603      	mov	r3, r0
 800324c:	6039      	str	r1, [r7, #0]
 800324e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003250:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003254:	2b00      	cmp	r3, #0
 8003256:	db0a      	blt.n	800326e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	b2da      	uxtb	r2, r3
 800325c:	490c      	ldr	r1, [pc, #48]	; (8003290 <__NVIC_SetPriority+0x4c>)
 800325e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003262:	0112      	lsls	r2, r2, #4
 8003264:	b2d2      	uxtb	r2, r2
 8003266:	440b      	add	r3, r1
 8003268:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800326c:	e00a      	b.n	8003284 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	b2da      	uxtb	r2, r3
 8003272:	4908      	ldr	r1, [pc, #32]	; (8003294 <__NVIC_SetPriority+0x50>)
 8003274:	79fb      	ldrb	r3, [r7, #7]
 8003276:	f003 030f 	and.w	r3, r3, #15
 800327a:	3b04      	subs	r3, #4
 800327c:	0112      	lsls	r2, r2, #4
 800327e:	b2d2      	uxtb	r2, r2
 8003280:	440b      	add	r3, r1
 8003282:	761a      	strb	r2, [r3, #24]
}
 8003284:	bf00      	nop
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	bc80      	pop	{r7}
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	e000e100 	.word	0xe000e100
 8003294:	e000ed00 	.word	0xe000ed00

08003298 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003298:	b480      	push	{r7}
 800329a:	b089      	sub	sp, #36	; 0x24
 800329c:	af00      	add	r7, sp, #0
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f003 0307 	and.w	r3, r3, #7
 80032aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	f1c3 0307 	rsb	r3, r3, #7
 80032b2:	2b04      	cmp	r3, #4
 80032b4:	bf28      	it	cs
 80032b6:	2304      	movcs	r3, #4
 80032b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	3304      	adds	r3, #4
 80032be:	2b06      	cmp	r3, #6
 80032c0:	d902      	bls.n	80032c8 <NVIC_EncodePriority+0x30>
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	3b03      	subs	r3, #3
 80032c6:	e000      	b.n	80032ca <NVIC_EncodePriority+0x32>
 80032c8:	2300      	movs	r3, #0
 80032ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032cc:	f04f 32ff 	mov.w	r2, #4294967295
 80032d0:	69bb      	ldr	r3, [r7, #24]
 80032d2:	fa02 f303 	lsl.w	r3, r2, r3
 80032d6:	43da      	mvns	r2, r3
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	401a      	ands	r2, r3
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032e0:	f04f 31ff 	mov.w	r1, #4294967295
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	fa01 f303 	lsl.w	r3, r1, r3
 80032ea:	43d9      	mvns	r1, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032f0:	4313      	orrs	r3, r2
         );
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3724      	adds	r7, #36	; 0x24
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bc80      	pop	{r7}
 80032fa:	4770      	bx	lr

080032fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	3b01      	subs	r3, #1
 8003308:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800330c:	d301      	bcc.n	8003312 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800330e:	2301      	movs	r3, #1
 8003310:	e00f      	b.n	8003332 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003312:	4a0a      	ldr	r2, [pc, #40]	; (800333c <SysTick_Config+0x40>)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	3b01      	subs	r3, #1
 8003318:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800331a:	210f      	movs	r1, #15
 800331c:	f04f 30ff 	mov.w	r0, #4294967295
 8003320:	f7ff ff90 	bl	8003244 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003324:	4b05      	ldr	r3, [pc, #20]	; (800333c <SysTick_Config+0x40>)
 8003326:	2200      	movs	r2, #0
 8003328:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800332a:	4b04      	ldr	r3, [pc, #16]	; (800333c <SysTick_Config+0x40>)
 800332c:	2207      	movs	r2, #7
 800332e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	3708      	adds	r7, #8
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	e000e010 	.word	0xe000e010

08003340 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f7ff ff2d 	bl	80031a8 <__NVIC_SetPriorityGrouping>
}
 800334e:	bf00      	nop
 8003350:	3708      	adds	r7, #8
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}

08003356 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003356:	b580      	push	{r7, lr}
 8003358:	b086      	sub	sp, #24
 800335a:	af00      	add	r7, sp, #0
 800335c:	4603      	mov	r3, r0
 800335e:	60b9      	str	r1, [r7, #8]
 8003360:	607a      	str	r2, [r7, #4]
 8003362:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003364:	2300      	movs	r3, #0
 8003366:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003368:	f7ff ff42 	bl	80031f0 <__NVIC_GetPriorityGrouping>
 800336c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	68b9      	ldr	r1, [r7, #8]
 8003372:	6978      	ldr	r0, [r7, #20]
 8003374:	f7ff ff90 	bl	8003298 <NVIC_EncodePriority>
 8003378:	4602      	mov	r2, r0
 800337a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800337e:	4611      	mov	r1, r2
 8003380:	4618      	mov	r0, r3
 8003382:	f7ff ff5f 	bl	8003244 <__NVIC_SetPriority>
}
 8003386:	bf00      	nop
 8003388:	3718      	adds	r7, #24
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}

0800338e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800338e:	b580      	push	{r7, lr}
 8003390:	b082      	sub	sp, #8
 8003392:	af00      	add	r7, sp, #0
 8003394:	4603      	mov	r3, r0
 8003396:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800339c:	4618      	mov	r0, r3
 800339e:	f7ff ff35 	bl	800320c <__NVIC_EnableIRQ>
}
 80033a2:	bf00      	nop
 80033a4:	3708      	adds	r7, #8
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}

080033aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033aa:	b580      	push	{r7, lr}
 80033ac:	b082      	sub	sp, #8
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f7ff ffa2 	bl	80032fc <SysTick_Config>
 80033b8:	4603      	mov	r3, r0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3708      	adds	r7, #8
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80033c2:	b480      	push	{r7}
 80033c4:	b085      	sub	sp, #20
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033ca:	2300      	movs	r3, #0
 80033cc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d008      	beq.n	80033ec <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2204      	movs	r2, #4
 80033de:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e020      	b.n	800342e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f022 020e 	bic.w	r2, r2, #14
 80033fa:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f022 0201 	bic.w	r2, r2, #1
 800340a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003414:	2101      	movs	r1, #1
 8003416:	fa01 f202 	lsl.w	r2, r1, r2
 800341a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800342c:	7bfb      	ldrb	r3, [r7, #15]
}
 800342e:	4618      	mov	r0, r3
 8003430:	3714      	adds	r7, #20
 8003432:	46bd      	mov	sp, r7
 8003434:	bc80      	pop	{r7}
 8003436:	4770      	bx	lr

08003438 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003440:	2300      	movs	r3, #0
 8003442:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800344a:	b2db      	uxtb	r3, r3
 800344c:	2b02      	cmp	r3, #2
 800344e:	d005      	beq.n	800345c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2204      	movs	r2, #4
 8003454:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	73fb      	strb	r3, [r7, #15]
 800345a:	e051      	b.n	8003500 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f022 020e 	bic.w	r2, r2, #14
 800346a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f022 0201 	bic.w	r2, r2, #1
 800347a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a22      	ldr	r2, [pc, #136]	; (800350c <HAL_DMA_Abort_IT+0xd4>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d029      	beq.n	80034da <HAL_DMA_Abort_IT+0xa2>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a21      	ldr	r2, [pc, #132]	; (8003510 <HAL_DMA_Abort_IT+0xd8>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d022      	beq.n	80034d6 <HAL_DMA_Abort_IT+0x9e>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a1f      	ldr	r2, [pc, #124]	; (8003514 <HAL_DMA_Abort_IT+0xdc>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d01a      	beq.n	80034d0 <HAL_DMA_Abort_IT+0x98>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a1e      	ldr	r2, [pc, #120]	; (8003518 <HAL_DMA_Abort_IT+0xe0>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d012      	beq.n	80034ca <HAL_DMA_Abort_IT+0x92>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a1c      	ldr	r2, [pc, #112]	; (800351c <HAL_DMA_Abort_IT+0xe4>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d00a      	beq.n	80034c4 <HAL_DMA_Abort_IT+0x8c>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a1b      	ldr	r2, [pc, #108]	; (8003520 <HAL_DMA_Abort_IT+0xe8>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d102      	bne.n	80034be <HAL_DMA_Abort_IT+0x86>
 80034b8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80034bc:	e00e      	b.n	80034dc <HAL_DMA_Abort_IT+0xa4>
 80034be:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80034c2:	e00b      	b.n	80034dc <HAL_DMA_Abort_IT+0xa4>
 80034c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80034c8:	e008      	b.n	80034dc <HAL_DMA_Abort_IT+0xa4>
 80034ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034ce:	e005      	b.n	80034dc <HAL_DMA_Abort_IT+0xa4>
 80034d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034d4:	e002      	b.n	80034dc <HAL_DMA_Abort_IT+0xa4>
 80034d6:	2310      	movs	r3, #16
 80034d8:	e000      	b.n	80034dc <HAL_DMA_Abort_IT+0xa4>
 80034da:	2301      	movs	r3, #1
 80034dc:	4a11      	ldr	r2, [pc, #68]	; (8003524 <HAL_DMA_Abort_IT+0xec>)
 80034de:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d003      	beq.n	8003500 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	4798      	blx	r3
    } 
  }
  return status;
 8003500:	7bfb      	ldrb	r3, [r7, #15]
}
 8003502:	4618      	mov	r0, r3
 8003504:	3710      	adds	r7, #16
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	40020008 	.word	0x40020008
 8003510:	4002001c 	.word	0x4002001c
 8003514:	40020030 	.word	0x40020030
 8003518:	40020044 	.word	0x40020044
 800351c:	40020058 	.word	0x40020058
 8003520:	4002006c 	.word	0x4002006c
 8003524:	40020000 	.word	0x40020000

08003528 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003528:	b480      	push	{r7}
 800352a:	b08b      	sub	sp, #44	; 0x2c
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003532:	2300      	movs	r3, #0
 8003534:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003536:	2300      	movs	r3, #0
 8003538:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800353a:	e169      	b.n	8003810 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800353c:	2201      	movs	r2, #1
 800353e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003540:	fa02 f303 	lsl.w	r3, r2, r3
 8003544:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	69fa      	ldr	r2, [r7, #28]
 800354c:	4013      	ands	r3, r2
 800354e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003550:	69ba      	ldr	r2, [r7, #24]
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	429a      	cmp	r2, r3
 8003556:	f040 8158 	bne.w	800380a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	4a9a      	ldr	r2, [pc, #616]	; (80037c8 <HAL_GPIO_Init+0x2a0>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d05e      	beq.n	8003622 <HAL_GPIO_Init+0xfa>
 8003564:	4a98      	ldr	r2, [pc, #608]	; (80037c8 <HAL_GPIO_Init+0x2a0>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d875      	bhi.n	8003656 <HAL_GPIO_Init+0x12e>
 800356a:	4a98      	ldr	r2, [pc, #608]	; (80037cc <HAL_GPIO_Init+0x2a4>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d058      	beq.n	8003622 <HAL_GPIO_Init+0xfa>
 8003570:	4a96      	ldr	r2, [pc, #600]	; (80037cc <HAL_GPIO_Init+0x2a4>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d86f      	bhi.n	8003656 <HAL_GPIO_Init+0x12e>
 8003576:	4a96      	ldr	r2, [pc, #600]	; (80037d0 <HAL_GPIO_Init+0x2a8>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d052      	beq.n	8003622 <HAL_GPIO_Init+0xfa>
 800357c:	4a94      	ldr	r2, [pc, #592]	; (80037d0 <HAL_GPIO_Init+0x2a8>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d869      	bhi.n	8003656 <HAL_GPIO_Init+0x12e>
 8003582:	4a94      	ldr	r2, [pc, #592]	; (80037d4 <HAL_GPIO_Init+0x2ac>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d04c      	beq.n	8003622 <HAL_GPIO_Init+0xfa>
 8003588:	4a92      	ldr	r2, [pc, #584]	; (80037d4 <HAL_GPIO_Init+0x2ac>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d863      	bhi.n	8003656 <HAL_GPIO_Init+0x12e>
 800358e:	4a92      	ldr	r2, [pc, #584]	; (80037d8 <HAL_GPIO_Init+0x2b0>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d046      	beq.n	8003622 <HAL_GPIO_Init+0xfa>
 8003594:	4a90      	ldr	r2, [pc, #576]	; (80037d8 <HAL_GPIO_Init+0x2b0>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d85d      	bhi.n	8003656 <HAL_GPIO_Init+0x12e>
 800359a:	2b12      	cmp	r3, #18
 800359c:	d82a      	bhi.n	80035f4 <HAL_GPIO_Init+0xcc>
 800359e:	2b12      	cmp	r3, #18
 80035a0:	d859      	bhi.n	8003656 <HAL_GPIO_Init+0x12e>
 80035a2:	a201      	add	r2, pc, #4	; (adr r2, 80035a8 <HAL_GPIO_Init+0x80>)
 80035a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035a8:	08003623 	.word	0x08003623
 80035ac:	080035fd 	.word	0x080035fd
 80035b0:	0800360f 	.word	0x0800360f
 80035b4:	08003651 	.word	0x08003651
 80035b8:	08003657 	.word	0x08003657
 80035bc:	08003657 	.word	0x08003657
 80035c0:	08003657 	.word	0x08003657
 80035c4:	08003657 	.word	0x08003657
 80035c8:	08003657 	.word	0x08003657
 80035cc:	08003657 	.word	0x08003657
 80035d0:	08003657 	.word	0x08003657
 80035d4:	08003657 	.word	0x08003657
 80035d8:	08003657 	.word	0x08003657
 80035dc:	08003657 	.word	0x08003657
 80035e0:	08003657 	.word	0x08003657
 80035e4:	08003657 	.word	0x08003657
 80035e8:	08003657 	.word	0x08003657
 80035ec:	08003605 	.word	0x08003605
 80035f0:	08003619 	.word	0x08003619
 80035f4:	4a79      	ldr	r2, [pc, #484]	; (80037dc <HAL_GPIO_Init+0x2b4>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d013      	beq.n	8003622 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80035fa:	e02c      	b.n	8003656 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	623b      	str	r3, [r7, #32]
          break;
 8003602:	e029      	b.n	8003658 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	3304      	adds	r3, #4
 800360a:	623b      	str	r3, [r7, #32]
          break;
 800360c:	e024      	b.n	8003658 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	3308      	adds	r3, #8
 8003614:	623b      	str	r3, [r7, #32]
          break;
 8003616:	e01f      	b.n	8003658 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	330c      	adds	r3, #12
 800361e:	623b      	str	r3, [r7, #32]
          break;
 8003620:	e01a      	b.n	8003658 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d102      	bne.n	8003630 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800362a:	2304      	movs	r3, #4
 800362c:	623b      	str	r3, [r7, #32]
          break;
 800362e:	e013      	b.n	8003658 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	2b01      	cmp	r3, #1
 8003636:	d105      	bne.n	8003644 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003638:	2308      	movs	r3, #8
 800363a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	69fa      	ldr	r2, [r7, #28]
 8003640:	611a      	str	r2, [r3, #16]
          break;
 8003642:	e009      	b.n	8003658 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003644:	2308      	movs	r3, #8
 8003646:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	69fa      	ldr	r2, [r7, #28]
 800364c:	615a      	str	r2, [r3, #20]
          break;
 800364e:	e003      	b.n	8003658 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003650:	2300      	movs	r3, #0
 8003652:	623b      	str	r3, [r7, #32]
          break;
 8003654:	e000      	b.n	8003658 <HAL_GPIO_Init+0x130>
          break;
 8003656:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	2bff      	cmp	r3, #255	; 0xff
 800365c:	d801      	bhi.n	8003662 <HAL_GPIO_Init+0x13a>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	e001      	b.n	8003666 <HAL_GPIO_Init+0x13e>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	3304      	adds	r3, #4
 8003666:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	2bff      	cmp	r3, #255	; 0xff
 800366c:	d802      	bhi.n	8003674 <HAL_GPIO_Init+0x14c>
 800366e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	e002      	b.n	800367a <HAL_GPIO_Init+0x152>
 8003674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003676:	3b08      	subs	r3, #8
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	210f      	movs	r1, #15
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	fa01 f303 	lsl.w	r3, r1, r3
 8003688:	43db      	mvns	r3, r3
 800368a:	401a      	ands	r2, r3
 800368c:	6a39      	ldr	r1, [r7, #32]
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	fa01 f303 	lsl.w	r3, r1, r3
 8003694:	431a      	orrs	r2, r3
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	f000 80b1 	beq.w	800380a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80036a8:	4b4d      	ldr	r3, [pc, #308]	; (80037e0 <HAL_GPIO_Init+0x2b8>)
 80036aa:	699b      	ldr	r3, [r3, #24]
 80036ac:	4a4c      	ldr	r2, [pc, #304]	; (80037e0 <HAL_GPIO_Init+0x2b8>)
 80036ae:	f043 0301 	orr.w	r3, r3, #1
 80036b2:	6193      	str	r3, [r2, #24]
 80036b4:	4b4a      	ldr	r3, [pc, #296]	; (80037e0 <HAL_GPIO_Init+0x2b8>)
 80036b6:	699b      	ldr	r3, [r3, #24]
 80036b8:	f003 0301 	and.w	r3, r3, #1
 80036bc:	60bb      	str	r3, [r7, #8]
 80036be:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80036c0:	4a48      	ldr	r2, [pc, #288]	; (80037e4 <HAL_GPIO_Init+0x2bc>)
 80036c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c4:	089b      	lsrs	r3, r3, #2
 80036c6:	3302      	adds	r3, #2
 80036c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036cc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80036ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d0:	f003 0303 	and.w	r3, r3, #3
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	220f      	movs	r2, #15
 80036d8:	fa02 f303 	lsl.w	r3, r2, r3
 80036dc:	43db      	mvns	r3, r3
 80036de:	68fa      	ldr	r2, [r7, #12]
 80036e0:	4013      	ands	r3, r2
 80036e2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	4a40      	ldr	r2, [pc, #256]	; (80037e8 <HAL_GPIO_Init+0x2c0>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d013      	beq.n	8003714 <HAL_GPIO_Init+0x1ec>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	4a3f      	ldr	r2, [pc, #252]	; (80037ec <HAL_GPIO_Init+0x2c4>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d00d      	beq.n	8003710 <HAL_GPIO_Init+0x1e8>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	4a3e      	ldr	r2, [pc, #248]	; (80037f0 <HAL_GPIO_Init+0x2c8>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d007      	beq.n	800370c <HAL_GPIO_Init+0x1e4>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	4a3d      	ldr	r2, [pc, #244]	; (80037f4 <HAL_GPIO_Init+0x2cc>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d101      	bne.n	8003708 <HAL_GPIO_Init+0x1e0>
 8003704:	2303      	movs	r3, #3
 8003706:	e006      	b.n	8003716 <HAL_GPIO_Init+0x1ee>
 8003708:	2304      	movs	r3, #4
 800370a:	e004      	b.n	8003716 <HAL_GPIO_Init+0x1ee>
 800370c:	2302      	movs	r3, #2
 800370e:	e002      	b.n	8003716 <HAL_GPIO_Init+0x1ee>
 8003710:	2301      	movs	r3, #1
 8003712:	e000      	b.n	8003716 <HAL_GPIO_Init+0x1ee>
 8003714:	2300      	movs	r3, #0
 8003716:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003718:	f002 0203 	and.w	r2, r2, #3
 800371c:	0092      	lsls	r2, r2, #2
 800371e:	4093      	lsls	r3, r2
 8003720:	68fa      	ldr	r2, [r7, #12]
 8003722:	4313      	orrs	r3, r2
 8003724:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003726:	492f      	ldr	r1, [pc, #188]	; (80037e4 <HAL_GPIO_Init+0x2bc>)
 8003728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372a:	089b      	lsrs	r3, r3, #2
 800372c:	3302      	adds	r3, #2
 800372e:	68fa      	ldr	r2, [r7, #12]
 8003730:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d006      	beq.n	800374e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003740:	4b2d      	ldr	r3, [pc, #180]	; (80037f8 <HAL_GPIO_Init+0x2d0>)
 8003742:	689a      	ldr	r2, [r3, #8]
 8003744:	492c      	ldr	r1, [pc, #176]	; (80037f8 <HAL_GPIO_Init+0x2d0>)
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	4313      	orrs	r3, r2
 800374a:	608b      	str	r3, [r1, #8]
 800374c:	e006      	b.n	800375c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800374e:	4b2a      	ldr	r3, [pc, #168]	; (80037f8 <HAL_GPIO_Init+0x2d0>)
 8003750:	689a      	ldr	r2, [r3, #8]
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	43db      	mvns	r3, r3
 8003756:	4928      	ldr	r1, [pc, #160]	; (80037f8 <HAL_GPIO_Init+0x2d0>)
 8003758:	4013      	ands	r3, r2
 800375a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d006      	beq.n	8003776 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003768:	4b23      	ldr	r3, [pc, #140]	; (80037f8 <HAL_GPIO_Init+0x2d0>)
 800376a:	68da      	ldr	r2, [r3, #12]
 800376c:	4922      	ldr	r1, [pc, #136]	; (80037f8 <HAL_GPIO_Init+0x2d0>)
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	4313      	orrs	r3, r2
 8003772:	60cb      	str	r3, [r1, #12]
 8003774:	e006      	b.n	8003784 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003776:	4b20      	ldr	r3, [pc, #128]	; (80037f8 <HAL_GPIO_Init+0x2d0>)
 8003778:	68da      	ldr	r2, [r3, #12]
 800377a:	69bb      	ldr	r3, [r7, #24]
 800377c:	43db      	mvns	r3, r3
 800377e:	491e      	ldr	r1, [pc, #120]	; (80037f8 <HAL_GPIO_Init+0x2d0>)
 8003780:	4013      	ands	r3, r2
 8003782:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d006      	beq.n	800379e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003790:	4b19      	ldr	r3, [pc, #100]	; (80037f8 <HAL_GPIO_Init+0x2d0>)
 8003792:	685a      	ldr	r2, [r3, #4]
 8003794:	4918      	ldr	r1, [pc, #96]	; (80037f8 <HAL_GPIO_Init+0x2d0>)
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	4313      	orrs	r3, r2
 800379a:	604b      	str	r3, [r1, #4]
 800379c:	e006      	b.n	80037ac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800379e:	4b16      	ldr	r3, [pc, #88]	; (80037f8 <HAL_GPIO_Init+0x2d0>)
 80037a0:	685a      	ldr	r2, [r3, #4]
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	43db      	mvns	r3, r3
 80037a6:	4914      	ldr	r1, [pc, #80]	; (80037f8 <HAL_GPIO_Init+0x2d0>)
 80037a8:	4013      	ands	r3, r2
 80037aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d021      	beq.n	80037fc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80037b8:	4b0f      	ldr	r3, [pc, #60]	; (80037f8 <HAL_GPIO_Init+0x2d0>)
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	490e      	ldr	r1, [pc, #56]	; (80037f8 <HAL_GPIO_Init+0x2d0>)
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	600b      	str	r3, [r1, #0]
 80037c4:	e021      	b.n	800380a <HAL_GPIO_Init+0x2e2>
 80037c6:	bf00      	nop
 80037c8:	10320000 	.word	0x10320000
 80037cc:	10310000 	.word	0x10310000
 80037d0:	10220000 	.word	0x10220000
 80037d4:	10210000 	.word	0x10210000
 80037d8:	10120000 	.word	0x10120000
 80037dc:	10110000 	.word	0x10110000
 80037e0:	40021000 	.word	0x40021000
 80037e4:	40010000 	.word	0x40010000
 80037e8:	40010800 	.word	0x40010800
 80037ec:	40010c00 	.word	0x40010c00
 80037f0:	40011000 	.word	0x40011000
 80037f4:	40011400 	.word	0x40011400
 80037f8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80037fc:	4b0b      	ldr	r3, [pc, #44]	; (800382c <HAL_GPIO_Init+0x304>)
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	43db      	mvns	r3, r3
 8003804:	4909      	ldr	r1, [pc, #36]	; (800382c <HAL_GPIO_Init+0x304>)
 8003806:	4013      	ands	r3, r2
 8003808:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800380a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380c:	3301      	adds	r3, #1
 800380e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003816:	fa22 f303 	lsr.w	r3, r2, r3
 800381a:	2b00      	cmp	r3, #0
 800381c:	f47f ae8e 	bne.w	800353c <HAL_GPIO_Init+0x14>
  }
}
 8003820:	bf00      	nop
 8003822:	bf00      	nop
 8003824:	372c      	adds	r7, #44	; 0x2c
 8003826:	46bd      	mov	sp, r7
 8003828:	bc80      	pop	{r7}
 800382a:	4770      	bx	lr
 800382c:	40010400 	.word	0x40010400

08003830 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	460b      	mov	r3, r1
 800383a:	807b      	strh	r3, [r7, #2]
 800383c:	4613      	mov	r3, r2
 800383e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003840:	787b      	ldrb	r3, [r7, #1]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d003      	beq.n	800384e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003846:	887a      	ldrh	r2, [r7, #2]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800384c:	e003      	b.n	8003856 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800384e:	887b      	ldrh	r3, [r7, #2]
 8003850:	041a      	lsls	r2, r3, #16
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	611a      	str	r2, [r3, #16]
}
 8003856:	bf00      	nop
 8003858:	370c      	adds	r7, #12
 800385a:	46bd      	mov	sp, r7
 800385c:	bc80      	pop	{r7}
 800385e:	4770      	bx	lr

08003860 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e12b      	b.n	8003aca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003878:	b2db      	uxtb	r3, r3
 800387a:	2b00      	cmp	r3, #0
 800387c:	d106      	bne.n	800388c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f7ff f8f0 	bl	8002a6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2224      	movs	r2, #36	; 0x24
 8003890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f022 0201 	bic.w	r2, r2, #1
 80038a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80038c4:	f001 fbca 	bl	800505c <HAL_RCC_GetPCLK1Freq>
 80038c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	4a81      	ldr	r2, [pc, #516]	; (8003ad4 <HAL_I2C_Init+0x274>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d807      	bhi.n	80038e4 <HAL_I2C_Init+0x84>
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	4a80      	ldr	r2, [pc, #512]	; (8003ad8 <HAL_I2C_Init+0x278>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	bf94      	ite	ls
 80038dc:	2301      	movls	r3, #1
 80038de:	2300      	movhi	r3, #0
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	e006      	b.n	80038f2 <HAL_I2C_Init+0x92>
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	4a7d      	ldr	r2, [pc, #500]	; (8003adc <HAL_I2C_Init+0x27c>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	bf94      	ite	ls
 80038ec:	2301      	movls	r3, #1
 80038ee:	2300      	movhi	r3, #0
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d001      	beq.n	80038fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e0e7      	b.n	8003aca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	4a78      	ldr	r2, [pc, #480]	; (8003ae0 <HAL_I2C_Init+0x280>)
 80038fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003902:	0c9b      	lsrs	r3, r3, #18
 8003904:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	68ba      	ldr	r2, [r7, #8]
 8003916:	430a      	orrs	r2, r1
 8003918:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	6a1b      	ldr	r3, [r3, #32]
 8003920:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	4a6a      	ldr	r2, [pc, #424]	; (8003ad4 <HAL_I2C_Init+0x274>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d802      	bhi.n	8003934 <HAL_I2C_Init+0xd4>
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	3301      	adds	r3, #1
 8003932:	e009      	b.n	8003948 <HAL_I2C_Init+0xe8>
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800393a:	fb02 f303 	mul.w	r3, r2, r3
 800393e:	4a69      	ldr	r2, [pc, #420]	; (8003ae4 <HAL_I2C_Init+0x284>)
 8003940:	fba2 2303 	umull	r2, r3, r2, r3
 8003944:	099b      	lsrs	r3, r3, #6
 8003946:	3301      	adds	r3, #1
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	6812      	ldr	r2, [r2, #0]
 800394c:	430b      	orrs	r3, r1
 800394e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	69db      	ldr	r3, [r3, #28]
 8003956:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800395a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	495c      	ldr	r1, [pc, #368]	; (8003ad4 <HAL_I2C_Init+0x274>)
 8003964:	428b      	cmp	r3, r1
 8003966:	d819      	bhi.n	800399c <HAL_I2C_Init+0x13c>
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	1e59      	subs	r1, r3, #1
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	005b      	lsls	r3, r3, #1
 8003972:	fbb1 f3f3 	udiv	r3, r1, r3
 8003976:	1c59      	adds	r1, r3, #1
 8003978:	f640 73fc 	movw	r3, #4092	; 0xffc
 800397c:	400b      	ands	r3, r1
 800397e:	2b00      	cmp	r3, #0
 8003980:	d00a      	beq.n	8003998 <HAL_I2C_Init+0x138>
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	1e59      	subs	r1, r3, #1
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	005b      	lsls	r3, r3, #1
 800398c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003990:	3301      	adds	r3, #1
 8003992:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003996:	e051      	b.n	8003a3c <HAL_I2C_Init+0x1dc>
 8003998:	2304      	movs	r3, #4
 800399a:	e04f      	b.n	8003a3c <HAL_I2C_Init+0x1dc>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d111      	bne.n	80039c8 <HAL_I2C_Init+0x168>
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	1e58      	subs	r0, r3, #1
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6859      	ldr	r1, [r3, #4]
 80039ac:	460b      	mov	r3, r1
 80039ae:	005b      	lsls	r3, r3, #1
 80039b0:	440b      	add	r3, r1
 80039b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80039b6:	3301      	adds	r3, #1
 80039b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039bc:	2b00      	cmp	r3, #0
 80039be:	bf0c      	ite	eq
 80039c0:	2301      	moveq	r3, #1
 80039c2:	2300      	movne	r3, #0
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	e012      	b.n	80039ee <HAL_I2C_Init+0x18e>
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	1e58      	subs	r0, r3, #1
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6859      	ldr	r1, [r3, #4]
 80039d0:	460b      	mov	r3, r1
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	440b      	add	r3, r1
 80039d6:	0099      	lsls	r1, r3, #2
 80039d8:	440b      	add	r3, r1
 80039da:	fbb0 f3f3 	udiv	r3, r0, r3
 80039de:	3301      	adds	r3, #1
 80039e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	bf0c      	ite	eq
 80039e8:	2301      	moveq	r3, #1
 80039ea:	2300      	movne	r3, #0
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d001      	beq.n	80039f6 <HAL_I2C_Init+0x196>
 80039f2:	2301      	movs	r3, #1
 80039f4:	e022      	b.n	8003a3c <HAL_I2C_Init+0x1dc>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d10e      	bne.n	8003a1c <HAL_I2C_Init+0x1bc>
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	1e58      	subs	r0, r3, #1
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6859      	ldr	r1, [r3, #4]
 8003a06:	460b      	mov	r3, r1
 8003a08:	005b      	lsls	r3, r3, #1
 8003a0a:	440b      	add	r3, r1
 8003a0c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a10:	3301      	adds	r3, #1
 8003a12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a1a:	e00f      	b.n	8003a3c <HAL_I2C_Init+0x1dc>
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	1e58      	subs	r0, r3, #1
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6859      	ldr	r1, [r3, #4]
 8003a24:	460b      	mov	r3, r1
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	440b      	add	r3, r1
 8003a2a:	0099      	lsls	r1, r3, #2
 8003a2c:	440b      	add	r3, r1
 8003a2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a32:	3301      	adds	r3, #1
 8003a34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a3c:	6879      	ldr	r1, [r7, #4]
 8003a3e:	6809      	ldr	r1, [r1, #0]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	69da      	ldr	r2, [r3, #28]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a1b      	ldr	r3, [r3, #32]
 8003a56:	431a      	orrs	r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	430a      	orrs	r2, r1
 8003a5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003a6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	6911      	ldr	r1, [r2, #16]
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	68d2      	ldr	r2, [r2, #12]
 8003a76:	4311      	orrs	r1, r2
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	6812      	ldr	r2, [r2, #0]
 8003a7c:	430b      	orrs	r3, r1
 8003a7e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	695a      	ldr	r2, [r3, #20]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	699b      	ldr	r3, [r3, #24]
 8003a92:	431a      	orrs	r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	430a      	orrs	r2, r1
 8003a9a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f042 0201 	orr.w	r2, r2, #1
 8003aaa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2220      	movs	r2, #32
 8003ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3710      	adds	r7, #16
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	000186a0 	.word	0x000186a0
 8003ad8:	001e847f 	.word	0x001e847f
 8003adc:	003d08ff 	.word	0x003d08ff
 8003ae0:	431bde83 	.word	0x431bde83
 8003ae4:	10624dd3 	.word	0x10624dd3

08003ae8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b088      	sub	sp, #32
 8003aec:	af02      	add	r7, sp, #8
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	607a      	str	r2, [r7, #4]
 8003af2:	461a      	mov	r2, r3
 8003af4:	460b      	mov	r3, r1
 8003af6:	817b      	strh	r3, [r7, #10]
 8003af8:	4613      	mov	r3, r2
 8003afa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003afc:	f7ff fb26 	bl	800314c <HAL_GetTick>
 8003b00:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	2b20      	cmp	r3, #32
 8003b0c:	f040 80e0 	bne.w	8003cd0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	9300      	str	r3, [sp, #0]
 8003b14:	2319      	movs	r3, #25
 8003b16:	2201      	movs	r2, #1
 8003b18:	4970      	ldr	r1, [pc, #448]	; (8003cdc <HAL_I2C_Master_Transmit+0x1f4>)
 8003b1a:	68f8      	ldr	r0, [r7, #12]
 8003b1c:	f000 fc9e 	bl	800445c <I2C_WaitOnFlagUntilTimeout>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d001      	beq.n	8003b2a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003b26:	2302      	movs	r3, #2
 8003b28:	e0d3      	b.n	8003cd2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d101      	bne.n	8003b38 <HAL_I2C_Master_Transmit+0x50>
 8003b34:	2302      	movs	r3, #2
 8003b36:	e0cc      	b.n	8003cd2 <HAL_I2C_Master_Transmit+0x1ea>
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0301 	and.w	r3, r3, #1
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d007      	beq.n	8003b5e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f042 0201 	orr.w	r2, r2, #1
 8003b5c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b6c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2221      	movs	r2, #33	; 0x21
 8003b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2210      	movs	r2, #16
 8003b7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2200      	movs	r2, #0
 8003b82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	893a      	ldrh	r2, [r7, #8]
 8003b8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b94:	b29a      	uxth	r2, r3
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	4a50      	ldr	r2, [pc, #320]	; (8003ce0 <HAL_I2C_Master_Transmit+0x1f8>)
 8003b9e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003ba0:	8979      	ldrh	r1, [r7, #10]
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	6a3a      	ldr	r2, [r7, #32]
 8003ba6:	68f8      	ldr	r0, [r7, #12]
 8003ba8:	f000 fb08 	bl	80041bc <I2C_MasterRequestWrite>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d001      	beq.n	8003bb6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e08d      	b.n	8003cd2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	613b      	str	r3, [r7, #16]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	695b      	ldr	r3, [r3, #20]
 8003bc0:	613b      	str	r3, [r7, #16]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	699b      	ldr	r3, [r3, #24]
 8003bc8:	613b      	str	r3, [r7, #16]
 8003bca:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003bcc:	e066      	b.n	8003c9c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bce:	697a      	ldr	r2, [r7, #20]
 8003bd0:	6a39      	ldr	r1, [r7, #32]
 8003bd2:	68f8      	ldr	r0, [r7, #12]
 8003bd4:	f000 fd5c 	bl	8004690 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d00d      	beq.n	8003bfa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be2:	2b04      	cmp	r3, #4
 8003be4:	d107      	bne.n	8003bf6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bf4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e06b      	b.n	8003cd2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfe:	781a      	ldrb	r2, [r3, #0]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0a:	1c5a      	adds	r2, r3, #1
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	3b01      	subs	r3, #1
 8003c18:	b29a      	uxth	r2, r3
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c22:	3b01      	subs	r3, #1
 8003c24:	b29a      	uxth	r2, r3
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	695b      	ldr	r3, [r3, #20]
 8003c30:	f003 0304 	and.w	r3, r3, #4
 8003c34:	2b04      	cmp	r3, #4
 8003c36:	d11b      	bne.n	8003c70 <HAL_I2C_Master_Transmit+0x188>
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d017      	beq.n	8003c70 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c44:	781a      	ldrb	r2, [r3, #0]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c50:	1c5a      	adds	r2, r3, #1
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	3b01      	subs	r3, #1
 8003c5e:	b29a      	uxth	r2, r3
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c68:	3b01      	subs	r3, #1
 8003c6a:	b29a      	uxth	r2, r3
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c70:	697a      	ldr	r2, [r7, #20]
 8003c72:	6a39      	ldr	r1, [r7, #32]
 8003c74:	68f8      	ldr	r0, [r7, #12]
 8003c76:	f000 fd53 	bl	8004720 <I2C_WaitOnBTFFlagUntilTimeout>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d00d      	beq.n	8003c9c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c84:	2b04      	cmp	r3, #4
 8003c86:	d107      	bne.n	8003c98 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c96:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e01a      	b.n	8003cd2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d194      	bne.n	8003bce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2220      	movs	r2, #32
 8003cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	e000      	b.n	8003cd2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003cd0:	2302      	movs	r3, #2
  }
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3718      	adds	r7, #24
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	00100002 	.word	0x00100002
 8003ce0:	ffff0000 	.word	0xffff0000

08003ce4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b08c      	sub	sp, #48	; 0x30
 8003ce8:	af02      	add	r7, sp, #8
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	607a      	str	r2, [r7, #4]
 8003cee:	461a      	mov	r2, r3
 8003cf0:	460b      	mov	r3, r1
 8003cf2:	817b      	strh	r3, [r7, #10]
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003cfc:	f7ff fa26 	bl	800314c <HAL_GetTick>
 8003d00:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	2b20      	cmp	r3, #32
 8003d0c:	f040 824b 	bne.w	80041a6 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d12:	9300      	str	r3, [sp, #0]
 8003d14:	2319      	movs	r3, #25
 8003d16:	2201      	movs	r2, #1
 8003d18:	497f      	ldr	r1, [pc, #508]	; (8003f18 <HAL_I2C_Master_Receive+0x234>)
 8003d1a:	68f8      	ldr	r0, [r7, #12]
 8003d1c:	f000 fb9e 	bl	800445c <I2C_WaitOnFlagUntilTimeout>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d001      	beq.n	8003d2a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8003d26:	2302      	movs	r3, #2
 8003d28:	e23e      	b.n	80041a8 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d101      	bne.n	8003d38 <HAL_I2C_Master_Receive+0x54>
 8003d34:	2302      	movs	r3, #2
 8003d36:	e237      	b.n	80041a8 <HAL_I2C_Master_Receive+0x4c4>
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0301 	and.w	r3, r3, #1
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d007      	beq.n	8003d5e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f042 0201 	orr.w	r2, r2, #1
 8003d5c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d6c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2222      	movs	r2, #34	; 0x22
 8003d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2210      	movs	r2, #16
 8003d7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2200      	movs	r2, #0
 8003d82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	893a      	ldrh	r2, [r7, #8]
 8003d8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d94:	b29a      	uxth	r2, r3
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	4a5f      	ldr	r2, [pc, #380]	; (8003f1c <HAL_I2C_Master_Receive+0x238>)
 8003d9e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003da0:	8979      	ldrh	r1, [r7, #10]
 8003da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003da6:	68f8      	ldr	r0, [r7, #12]
 8003da8:	f000 fa8a 	bl	80042c0 <I2C_MasterRequestRead>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d001      	beq.n	8003db6 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e1f8      	b.n	80041a8 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d113      	bne.n	8003de6 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	61fb      	str	r3, [r7, #28]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	695b      	ldr	r3, [r3, #20]
 8003dc8:	61fb      	str	r3, [r7, #28]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	699b      	ldr	r3, [r3, #24]
 8003dd0:	61fb      	str	r3, [r7, #28]
 8003dd2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003de2:	601a      	str	r2, [r3, #0]
 8003de4:	e1cc      	b.n	8004180 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d11e      	bne.n	8003e2c <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dfc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003dfe:	b672      	cpsid	i
}
 8003e00:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e02:	2300      	movs	r3, #0
 8003e04:	61bb      	str	r3, [r7, #24]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	695b      	ldr	r3, [r3, #20]
 8003e0c:	61bb      	str	r3, [r7, #24]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	699b      	ldr	r3, [r3, #24]
 8003e14:	61bb      	str	r3, [r7, #24]
 8003e16:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e26:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003e28:	b662      	cpsie	i
}
 8003e2a:	e035      	b.n	8003e98 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d11e      	bne.n	8003e72 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e42:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003e44:	b672      	cpsid	i
}
 8003e46:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e48:	2300      	movs	r3, #0
 8003e4a:	617b      	str	r3, [r7, #20]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	695b      	ldr	r3, [r3, #20]
 8003e52:	617b      	str	r3, [r7, #20]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	699b      	ldr	r3, [r3, #24]
 8003e5a:	617b      	str	r3, [r7, #20]
 8003e5c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e6c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003e6e:	b662      	cpsie	i
}
 8003e70:	e012      	b.n	8003e98 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e80:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e82:	2300      	movs	r3, #0
 8003e84:	613b      	str	r3, [r7, #16]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	695b      	ldr	r3, [r3, #20]
 8003e8c:	613b      	str	r3, [r7, #16]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	699b      	ldr	r3, [r3, #24]
 8003e94:	613b      	str	r3, [r7, #16]
 8003e96:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003e98:	e172      	b.n	8004180 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e9e:	2b03      	cmp	r3, #3
 8003ea0:	f200 811f 	bhi.w	80040e2 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d123      	bne.n	8003ef4 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003eac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003eb0:	68f8      	ldr	r0, [r7, #12]
 8003eb2:	f000 fc7d 	bl	80047b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d001      	beq.n	8003ec0 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e173      	b.n	80041a8 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	691a      	ldr	r2, [r3, #16]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eca:	b2d2      	uxtb	r2, r2
 8003ecc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed2:	1c5a      	adds	r2, r3, #1
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003edc:	3b01      	subs	r3, #1
 8003ede:	b29a      	uxth	r2, r3
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	3b01      	subs	r3, #1
 8003eec:	b29a      	uxth	r2, r3
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ef2:	e145      	b.n	8004180 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d152      	bne.n	8003fa2 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efe:	9300      	str	r3, [sp, #0]
 8003f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f02:	2200      	movs	r2, #0
 8003f04:	4906      	ldr	r1, [pc, #24]	; (8003f20 <HAL_I2C_Master_Receive+0x23c>)
 8003f06:	68f8      	ldr	r0, [r7, #12]
 8003f08:	f000 faa8 	bl	800445c <I2C_WaitOnFlagUntilTimeout>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d008      	beq.n	8003f24 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e148      	b.n	80041a8 <HAL_I2C_Master_Receive+0x4c4>
 8003f16:	bf00      	nop
 8003f18:	00100002 	.word	0x00100002
 8003f1c:	ffff0000 	.word	0xffff0000
 8003f20:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003f24:	b672      	cpsid	i
}
 8003f26:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	691a      	ldr	r2, [r3, #16]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f42:	b2d2      	uxtb	r2, r2
 8003f44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4a:	1c5a      	adds	r2, r3, #1
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f54:	3b01      	subs	r3, #1
 8003f56:	b29a      	uxth	r2, r3
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	3b01      	subs	r3, #1
 8003f64:	b29a      	uxth	r2, r3
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003f6a:	b662      	cpsie	i
}
 8003f6c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	691a      	ldr	r2, [r3, #16]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f78:	b2d2      	uxtb	r2, r2
 8003f7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f80:	1c5a      	adds	r2, r3, #1
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	b29a      	uxth	r2, r3
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	3b01      	subs	r3, #1
 8003f9a:	b29a      	uxth	r2, r3
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003fa0:	e0ee      	b.n	8004180 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa4:	9300      	str	r3, [sp, #0]
 8003fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa8:	2200      	movs	r2, #0
 8003faa:	4981      	ldr	r1, [pc, #516]	; (80041b0 <HAL_I2C_Master_Receive+0x4cc>)
 8003fac:	68f8      	ldr	r0, [r7, #12]
 8003fae:	f000 fa55 	bl	800445c <I2C_WaitOnFlagUntilTimeout>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d001      	beq.n	8003fbc <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e0f5      	b.n	80041a8 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fca:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003fcc:	b672      	cpsid	i
}
 8003fce:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	691a      	ldr	r2, [r3, #16]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fda:	b2d2      	uxtb	r2, r2
 8003fdc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe2:	1c5a      	adds	r2, r3, #1
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fec:	3b01      	subs	r3, #1
 8003fee:	b29a      	uxth	r2, r3
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	b29a      	uxth	r2, r3
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004002:	4b6c      	ldr	r3, [pc, #432]	; (80041b4 <HAL_I2C_Master_Receive+0x4d0>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	08db      	lsrs	r3, r3, #3
 8004008:	4a6b      	ldr	r2, [pc, #428]	; (80041b8 <HAL_I2C_Master_Receive+0x4d4>)
 800400a:	fba2 2303 	umull	r2, r3, r2, r3
 800400e:	0a1a      	lsrs	r2, r3, #8
 8004010:	4613      	mov	r3, r2
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	4413      	add	r3, r2
 8004016:	00da      	lsls	r2, r3, #3
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800401c:	6a3b      	ldr	r3, [r7, #32]
 800401e:	3b01      	subs	r3, #1
 8004020:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004022:	6a3b      	ldr	r3, [r7, #32]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d118      	bne.n	800405a <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2200      	movs	r2, #0
 800402c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2220      	movs	r2, #32
 8004032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004042:	f043 0220 	orr.w	r2, r3, #32
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800404a:	b662      	cpsie	i
}
 800404c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2200      	movs	r2, #0
 8004052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e0a6      	b.n	80041a8 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	695b      	ldr	r3, [r3, #20]
 8004060:	f003 0304 	and.w	r3, r3, #4
 8004064:	2b04      	cmp	r3, #4
 8004066:	d1d9      	bne.n	800401c <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004076:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	691a      	ldr	r2, [r3, #16]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004082:	b2d2      	uxtb	r2, r2
 8004084:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408a:	1c5a      	adds	r2, r3, #1
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004094:	3b01      	subs	r3, #1
 8004096:	b29a      	uxth	r2, r3
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	3b01      	subs	r3, #1
 80040a4:	b29a      	uxth	r2, r3
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80040aa:	b662      	cpsie	i
}
 80040ac:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	691a      	ldr	r2, [r3, #16]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b8:	b2d2      	uxtb	r2, r2
 80040ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c0:	1c5a      	adds	r2, r3, #1
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ca:	3b01      	subs	r3, #1
 80040cc:	b29a      	uxth	r2, r3
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	3b01      	subs	r3, #1
 80040da:	b29a      	uxth	r2, r3
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80040e0:	e04e      	b.n	8004180 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80040e6:	68f8      	ldr	r0, [r7, #12]
 80040e8:	f000 fb62 	bl	80047b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d001      	beq.n	80040f6 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e058      	b.n	80041a8 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	691a      	ldr	r2, [r3, #16]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004100:	b2d2      	uxtb	r2, r2
 8004102:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004108:	1c5a      	adds	r2, r3, #1
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004112:	3b01      	subs	r3, #1
 8004114:	b29a      	uxth	r2, r3
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800411e:	b29b      	uxth	r3, r3
 8004120:	3b01      	subs	r3, #1
 8004122:	b29a      	uxth	r2, r3
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	695b      	ldr	r3, [r3, #20]
 800412e:	f003 0304 	and.w	r3, r3, #4
 8004132:	2b04      	cmp	r3, #4
 8004134:	d124      	bne.n	8004180 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800413a:	2b03      	cmp	r3, #3
 800413c:	d107      	bne.n	800414e <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800414c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	691a      	ldr	r2, [r3, #16]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004158:	b2d2      	uxtb	r2, r2
 800415a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004160:	1c5a      	adds	r2, r3, #1
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800416a:	3b01      	subs	r3, #1
 800416c:	b29a      	uxth	r2, r3
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004176:	b29b      	uxth	r3, r3
 8004178:	3b01      	subs	r3, #1
 800417a:	b29a      	uxth	r2, r3
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004184:	2b00      	cmp	r3, #0
 8004186:	f47f ae88 	bne.w	8003e9a <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2220      	movs	r2, #32
 800418e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2200      	movs	r2, #0
 800419e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80041a2:	2300      	movs	r3, #0
 80041a4:	e000      	b.n	80041a8 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 80041a6:	2302      	movs	r3, #2
  }
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3728      	adds	r7, #40	; 0x28
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	00010004 	.word	0x00010004
 80041b4:	20000024 	.word	0x20000024
 80041b8:	14f8b589 	.word	0x14f8b589

080041bc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b088      	sub	sp, #32
 80041c0:	af02      	add	r7, sp, #8
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	607a      	str	r2, [r7, #4]
 80041c6:	603b      	str	r3, [r7, #0]
 80041c8:	460b      	mov	r3, r1
 80041ca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	2b08      	cmp	r3, #8
 80041d6:	d006      	beq.n	80041e6 <I2C_MasterRequestWrite+0x2a>
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d003      	beq.n	80041e6 <I2C_MasterRequestWrite+0x2a>
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80041e4:	d108      	bne.n	80041f8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041f4:	601a      	str	r2, [r3, #0]
 80041f6:	e00b      	b.n	8004210 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041fc:	2b12      	cmp	r3, #18
 80041fe:	d107      	bne.n	8004210 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800420e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	9300      	str	r3, [sp, #0]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800421c:	68f8      	ldr	r0, [r7, #12]
 800421e:	f000 f91d 	bl	800445c <I2C_WaitOnFlagUntilTimeout>
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00d      	beq.n	8004244 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004232:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004236:	d103      	bne.n	8004240 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800423e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004240:	2303      	movs	r3, #3
 8004242:	e035      	b.n	80042b0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	691b      	ldr	r3, [r3, #16]
 8004248:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800424c:	d108      	bne.n	8004260 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800424e:	897b      	ldrh	r3, [r7, #10]
 8004250:	b2db      	uxtb	r3, r3
 8004252:	461a      	mov	r2, r3
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800425c:	611a      	str	r2, [r3, #16]
 800425e:	e01b      	b.n	8004298 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004260:	897b      	ldrh	r3, [r7, #10]
 8004262:	11db      	asrs	r3, r3, #7
 8004264:	b2db      	uxtb	r3, r3
 8004266:	f003 0306 	and.w	r3, r3, #6
 800426a:	b2db      	uxtb	r3, r3
 800426c:	f063 030f 	orn	r3, r3, #15
 8004270:	b2da      	uxtb	r2, r3
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	490e      	ldr	r1, [pc, #56]	; (80042b8 <I2C_MasterRequestWrite+0xfc>)
 800427e:	68f8      	ldr	r0, [r7, #12]
 8004280:	f000 f966 	bl	8004550 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004284:	4603      	mov	r3, r0
 8004286:	2b00      	cmp	r3, #0
 8004288:	d001      	beq.n	800428e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e010      	b.n	80042b0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800428e:	897b      	ldrh	r3, [r7, #10]
 8004290:	b2da      	uxtb	r2, r3
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	4907      	ldr	r1, [pc, #28]	; (80042bc <I2C_MasterRequestWrite+0x100>)
 800429e:	68f8      	ldr	r0, [r7, #12]
 80042a0:	f000 f956 	bl	8004550 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d001      	beq.n	80042ae <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e000      	b.n	80042b0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80042ae:	2300      	movs	r3, #0
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3718      	adds	r7, #24
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	00010008 	.word	0x00010008
 80042bc:	00010002 	.word	0x00010002

080042c0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b088      	sub	sp, #32
 80042c4:	af02      	add	r7, sp, #8
 80042c6:	60f8      	str	r0, [r7, #12]
 80042c8:	607a      	str	r2, [r7, #4]
 80042ca:	603b      	str	r3, [r7, #0]
 80042cc:	460b      	mov	r3, r1
 80042ce:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80042e4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	2b08      	cmp	r3, #8
 80042ea:	d006      	beq.n	80042fa <I2C_MasterRequestRead+0x3a>
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d003      	beq.n	80042fa <I2C_MasterRequestRead+0x3a>
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80042f8:	d108      	bne.n	800430c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004308:	601a      	str	r2, [r3, #0]
 800430a:	e00b      	b.n	8004324 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004310:	2b11      	cmp	r3, #17
 8004312:	d107      	bne.n	8004324 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004322:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	9300      	str	r3, [sp, #0]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004330:	68f8      	ldr	r0, [r7, #12]
 8004332:	f000 f893 	bl	800445c <I2C_WaitOnFlagUntilTimeout>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d00d      	beq.n	8004358 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004346:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800434a:	d103      	bne.n	8004354 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004352:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004354:	2303      	movs	r3, #3
 8004356:	e079      	b.n	800444c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	691b      	ldr	r3, [r3, #16]
 800435c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004360:	d108      	bne.n	8004374 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004362:	897b      	ldrh	r3, [r7, #10]
 8004364:	b2db      	uxtb	r3, r3
 8004366:	f043 0301 	orr.w	r3, r3, #1
 800436a:	b2da      	uxtb	r2, r3
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	611a      	str	r2, [r3, #16]
 8004372:	e05f      	b.n	8004434 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004374:	897b      	ldrh	r3, [r7, #10]
 8004376:	11db      	asrs	r3, r3, #7
 8004378:	b2db      	uxtb	r3, r3
 800437a:	f003 0306 	and.w	r3, r3, #6
 800437e:	b2db      	uxtb	r3, r3
 8004380:	f063 030f 	orn	r3, r3, #15
 8004384:	b2da      	uxtb	r2, r3
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	4930      	ldr	r1, [pc, #192]	; (8004454 <I2C_MasterRequestRead+0x194>)
 8004392:	68f8      	ldr	r0, [r7, #12]
 8004394:	f000 f8dc 	bl	8004550 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004398:	4603      	mov	r3, r0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d001      	beq.n	80043a2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e054      	b.n	800444c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80043a2:	897b      	ldrh	r3, [r7, #10]
 80043a4:	b2da      	uxtb	r2, r3
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	4929      	ldr	r1, [pc, #164]	; (8004458 <I2C_MasterRequestRead+0x198>)
 80043b2:	68f8      	ldr	r0, [r7, #12]
 80043b4:	f000 f8cc 	bl	8004550 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d001      	beq.n	80043c2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e044      	b.n	800444c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043c2:	2300      	movs	r3, #0
 80043c4:	613b      	str	r3, [r7, #16]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	695b      	ldr	r3, [r3, #20]
 80043cc:	613b      	str	r3, [r7, #16]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	699b      	ldr	r3, [r3, #24]
 80043d4:	613b      	str	r3, [r7, #16]
 80043d6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043e6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	9300      	str	r3, [sp, #0]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80043f4:	68f8      	ldr	r0, [r7, #12]
 80043f6:	f000 f831 	bl	800445c <I2C_WaitOnFlagUntilTimeout>
 80043fa:	4603      	mov	r3, r0
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d00d      	beq.n	800441c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800440a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800440e:	d103      	bne.n	8004418 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004416:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004418:	2303      	movs	r3, #3
 800441a:	e017      	b.n	800444c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800441c:	897b      	ldrh	r3, [r7, #10]
 800441e:	11db      	asrs	r3, r3, #7
 8004420:	b2db      	uxtb	r3, r3
 8004422:	f003 0306 	and.w	r3, r3, #6
 8004426:	b2db      	uxtb	r3, r3
 8004428:	f063 030e 	orn	r3, r3, #14
 800442c:	b2da      	uxtb	r2, r3
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	4907      	ldr	r1, [pc, #28]	; (8004458 <I2C_MasterRequestRead+0x198>)
 800443a:	68f8      	ldr	r0, [r7, #12]
 800443c:	f000 f888 	bl	8004550 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d001      	beq.n	800444a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e000      	b.n	800444c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800444a:	2300      	movs	r3, #0
}
 800444c:	4618      	mov	r0, r3
 800444e:	3718      	adds	r7, #24
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}
 8004454:	00010008 	.word	0x00010008
 8004458:	00010002 	.word	0x00010002

0800445c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	60b9      	str	r1, [r7, #8]
 8004466:	603b      	str	r3, [r7, #0]
 8004468:	4613      	mov	r3, r2
 800446a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800446c:	e048      	b.n	8004500 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004474:	d044      	beq.n	8004500 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004476:	f7fe fe69 	bl	800314c <HAL_GetTick>
 800447a:	4602      	mov	r2, r0
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	683a      	ldr	r2, [r7, #0]
 8004482:	429a      	cmp	r2, r3
 8004484:	d302      	bcc.n	800448c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d139      	bne.n	8004500 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	0c1b      	lsrs	r3, r3, #16
 8004490:	b2db      	uxtb	r3, r3
 8004492:	2b01      	cmp	r3, #1
 8004494:	d10d      	bne.n	80044b2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	695b      	ldr	r3, [r3, #20]
 800449c:	43da      	mvns	r2, r3
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	4013      	ands	r3, r2
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	bf0c      	ite	eq
 80044a8:	2301      	moveq	r3, #1
 80044aa:	2300      	movne	r3, #0
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	461a      	mov	r2, r3
 80044b0:	e00c      	b.n	80044cc <I2C_WaitOnFlagUntilTimeout+0x70>
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	699b      	ldr	r3, [r3, #24]
 80044b8:	43da      	mvns	r2, r3
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	4013      	ands	r3, r2
 80044be:	b29b      	uxth	r3, r3
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	bf0c      	ite	eq
 80044c4:	2301      	moveq	r3, #1
 80044c6:	2300      	movne	r3, #0
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	461a      	mov	r2, r3
 80044cc:	79fb      	ldrb	r3, [r7, #7]
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d116      	bne.n	8004500 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2200      	movs	r2, #0
 80044d6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2220      	movs	r2, #32
 80044dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ec:	f043 0220 	orr.w	r2, r3, #32
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2200      	movs	r2, #0
 80044f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e023      	b.n	8004548 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	0c1b      	lsrs	r3, r3, #16
 8004504:	b2db      	uxtb	r3, r3
 8004506:	2b01      	cmp	r3, #1
 8004508:	d10d      	bne.n	8004526 <I2C_WaitOnFlagUntilTimeout+0xca>
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	695b      	ldr	r3, [r3, #20]
 8004510:	43da      	mvns	r2, r3
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	4013      	ands	r3, r2
 8004516:	b29b      	uxth	r3, r3
 8004518:	2b00      	cmp	r3, #0
 800451a:	bf0c      	ite	eq
 800451c:	2301      	moveq	r3, #1
 800451e:	2300      	movne	r3, #0
 8004520:	b2db      	uxtb	r3, r3
 8004522:	461a      	mov	r2, r3
 8004524:	e00c      	b.n	8004540 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	699b      	ldr	r3, [r3, #24]
 800452c:	43da      	mvns	r2, r3
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	4013      	ands	r3, r2
 8004532:	b29b      	uxth	r3, r3
 8004534:	2b00      	cmp	r3, #0
 8004536:	bf0c      	ite	eq
 8004538:	2301      	moveq	r3, #1
 800453a:	2300      	movne	r3, #0
 800453c:	b2db      	uxtb	r3, r3
 800453e:	461a      	mov	r2, r3
 8004540:	79fb      	ldrb	r3, [r7, #7]
 8004542:	429a      	cmp	r2, r3
 8004544:	d093      	beq.n	800446e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004546:	2300      	movs	r3, #0
}
 8004548:	4618      	mov	r0, r3
 800454a:	3710      	adds	r7, #16
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	607a      	str	r2, [r7, #4]
 800455c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800455e:	e071      	b.n	8004644 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	695b      	ldr	r3, [r3, #20]
 8004566:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800456a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800456e:	d123      	bne.n	80045b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800457e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004588:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2200      	movs	r2, #0
 800458e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2220      	movs	r2, #32
 8004594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2200      	movs	r2, #0
 800459c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a4:	f043 0204 	orr.w	r2, r3, #4
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e067      	b.n	8004688 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045be:	d041      	beq.n	8004644 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045c0:	f7fe fdc4 	bl	800314c <HAL_GetTick>
 80045c4:	4602      	mov	r2, r0
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d302      	bcc.n	80045d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d136      	bne.n	8004644 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	0c1b      	lsrs	r3, r3, #16
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d10c      	bne.n	80045fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	695b      	ldr	r3, [r3, #20]
 80045e6:	43da      	mvns	r2, r3
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	4013      	ands	r3, r2
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	bf14      	ite	ne
 80045f2:	2301      	movne	r3, #1
 80045f4:	2300      	moveq	r3, #0
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	e00b      	b.n	8004612 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	699b      	ldr	r3, [r3, #24]
 8004600:	43da      	mvns	r2, r3
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	4013      	ands	r3, r2
 8004606:	b29b      	uxth	r3, r3
 8004608:	2b00      	cmp	r3, #0
 800460a:	bf14      	ite	ne
 800460c:	2301      	movne	r3, #1
 800460e:	2300      	moveq	r3, #0
 8004610:	b2db      	uxtb	r3, r3
 8004612:	2b00      	cmp	r3, #0
 8004614:	d016      	beq.n	8004644 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2200      	movs	r2, #0
 800461a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2220      	movs	r2, #32
 8004620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2200      	movs	r2, #0
 8004628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004630:	f043 0220 	orr.w	r2, r3, #32
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2200      	movs	r2, #0
 800463c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e021      	b.n	8004688 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	0c1b      	lsrs	r3, r3, #16
 8004648:	b2db      	uxtb	r3, r3
 800464a:	2b01      	cmp	r3, #1
 800464c:	d10c      	bne.n	8004668 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	695b      	ldr	r3, [r3, #20]
 8004654:	43da      	mvns	r2, r3
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	4013      	ands	r3, r2
 800465a:	b29b      	uxth	r3, r3
 800465c:	2b00      	cmp	r3, #0
 800465e:	bf14      	ite	ne
 8004660:	2301      	movne	r3, #1
 8004662:	2300      	moveq	r3, #0
 8004664:	b2db      	uxtb	r3, r3
 8004666:	e00b      	b.n	8004680 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	699b      	ldr	r3, [r3, #24]
 800466e:	43da      	mvns	r2, r3
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	4013      	ands	r3, r2
 8004674:	b29b      	uxth	r3, r3
 8004676:	2b00      	cmp	r3, #0
 8004678:	bf14      	ite	ne
 800467a:	2301      	movne	r3, #1
 800467c:	2300      	moveq	r3, #0
 800467e:	b2db      	uxtb	r3, r3
 8004680:	2b00      	cmp	r3, #0
 8004682:	f47f af6d 	bne.w	8004560 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004686:	2300      	movs	r3, #0
}
 8004688:	4618      	mov	r0, r3
 800468a:	3710      	adds	r7, #16
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800469c:	e034      	b.n	8004708 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800469e:	68f8      	ldr	r0, [r7, #12]
 80046a0:	f000 f8e3 	bl	800486a <I2C_IsAcknowledgeFailed>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d001      	beq.n	80046ae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e034      	b.n	8004718 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b4:	d028      	beq.n	8004708 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046b6:	f7fe fd49 	bl	800314c <HAL_GetTick>
 80046ba:	4602      	mov	r2, r0
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	1ad3      	subs	r3, r2, r3
 80046c0:	68ba      	ldr	r2, [r7, #8]
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d302      	bcc.n	80046cc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d11d      	bne.n	8004708 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	695b      	ldr	r3, [r3, #20]
 80046d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046d6:	2b80      	cmp	r3, #128	; 0x80
 80046d8:	d016      	beq.n	8004708 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2200      	movs	r2, #0
 80046de:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2220      	movs	r2, #32
 80046e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2200      	movs	r2, #0
 80046ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f4:	f043 0220 	orr.w	r2, r3, #32
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2200      	movs	r2, #0
 8004700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e007      	b.n	8004718 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	695b      	ldr	r3, [r3, #20]
 800470e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004712:	2b80      	cmp	r3, #128	; 0x80
 8004714:	d1c3      	bne.n	800469e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004716:	2300      	movs	r3, #0
}
 8004718:	4618      	mov	r0, r3
 800471a:	3710      	adds	r7, #16
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}

08004720 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800472c:	e034      	b.n	8004798 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800472e:	68f8      	ldr	r0, [r7, #12]
 8004730:	f000 f89b 	bl	800486a <I2C_IsAcknowledgeFailed>
 8004734:	4603      	mov	r3, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d001      	beq.n	800473e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e034      	b.n	80047a8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004744:	d028      	beq.n	8004798 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004746:	f7fe fd01 	bl	800314c <HAL_GetTick>
 800474a:	4602      	mov	r2, r0
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	68ba      	ldr	r2, [r7, #8]
 8004752:	429a      	cmp	r2, r3
 8004754:	d302      	bcc.n	800475c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d11d      	bne.n	8004798 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	695b      	ldr	r3, [r3, #20]
 8004762:	f003 0304 	and.w	r3, r3, #4
 8004766:	2b04      	cmp	r3, #4
 8004768:	d016      	beq.n	8004798 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2200      	movs	r2, #0
 800476e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2220      	movs	r2, #32
 8004774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2200      	movs	r2, #0
 800477c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004784:	f043 0220 	orr.w	r2, r3, #32
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2200      	movs	r2, #0
 8004790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e007      	b.n	80047a8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	695b      	ldr	r3, [r3, #20]
 800479e:	f003 0304 	and.w	r3, r3, #4
 80047a2:	2b04      	cmp	r3, #4
 80047a4:	d1c3      	bne.n	800472e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80047a6:	2300      	movs	r3, #0
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3710      	adds	r7, #16
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	60b9      	str	r1, [r7, #8]
 80047ba:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80047bc:	e049      	b.n	8004852 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	695b      	ldr	r3, [r3, #20]
 80047c4:	f003 0310 	and.w	r3, r3, #16
 80047c8:	2b10      	cmp	r3, #16
 80047ca:	d119      	bne.n	8004800 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f06f 0210 	mvn.w	r2, #16
 80047d4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2200      	movs	r2, #0
 80047da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2220      	movs	r2, #32
 80047e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2200      	movs	r2, #0
 80047e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2200      	movs	r2, #0
 80047f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e030      	b.n	8004862 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004800:	f7fe fca4 	bl	800314c <HAL_GetTick>
 8004804:	4602      	mov	r2, r0
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	68ba      	ldr	r2, [r7, #8]
 800480c:	429a      	cmp	r2, r3
 800480e:	d302      	bcc.n	8004816 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d11d      	bne.n	8004852 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	695b      	ldr	r3, [r3, #20]
 800481c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004820:	2b40      	cmp	r3, #64	; 0x40
 8004822:	d016      	beq.n	8004852 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2200      	movs	r2, #0
 8004828:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2220      	movs	r2, #32
 800482e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2200      	movs	r2, #0
 8004836:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483e:	f043 0220 	orr.w	r2, r3, #32
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2200      	movs	r2, #0
 800484a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e007      	b.n	8004862 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	695b      	ldr	r3, [r3, #20]
 8004858:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800485c:	2b40      	cmp	r3, #64	; 0x40
 800485e:	d1ae      	bne.n	80047be <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	3710      	adds	r7, #16
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}

0800486a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800486a:	b480      	push	{r7}
 800486c:	b083      	sub	sp, #12
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	695b      	ldr	r3, [r3, #20]
 8004878:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800487c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004880:	d11b      	bne.n	80048ba <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800488a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2220      	movs	r2, #32
 8004896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a6:	f043 0204 	orr.w	r2, r3, #4
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e000      	b.n	80048bc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80048ba:	2300      	movs	r3, #0
}
 80048bc:	4618      	mov	r0, r3
 80048be:	370c      	adds	r7, #12
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bc80      	pop	{r7}
 80048c4:	4770      	bx	lr
	...

080048c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b086      	sub	sp, #24
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d101      	bne.n	80048da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e272      	b.n	8004dc0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0301 	and.w	r3, r3, #1
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	f000 8087 	beq.w	80049f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80048e8:	4b92      	ldr	r3, [pc, #584]	; (8004b34 <HAL_RCC_OscConfig+0x26c>)
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	f003 030c 	and.w	r3, r3, #12
 80048f0:	2b04      	cmp	r3, #4
 80048f2:	d00c      	beq.n	800490e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80048f4:	4b8f      	ldr	r3, [pc, #572]	; (8004b34 <HAL_RCC_OscConfig+0x26c>)
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	f003 030c 	and.w	r3, r3, #12
 80048fc:	2b08      	cmp	r3, #8
 80048fe:	d112      	bne.n	8004926 <HAL_RCC_OscConfig+0x5e>
 8004900:	4b8c      	ldr	r3, [pc, #560]	; (8004b34 <HAL_RCC_OscConfig+0x26c>)
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004908:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800490c:	d10b      	bne.n	8004926 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800490e:	4b89      	ldr	r3, [pc, #548]	; (8004b34 <HAL_RCC_OscConfig+0x26c>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004916:	2b00      	cmp	r3, #0
 8004918:	d06c      	beq.n	80049f4 <HAL_RCC_OscConfig+0x12c>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d168      	bne.n	80049f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e24c      	b.n	8004dc0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800492e:	d106      	bne.n	800493e <HAL_RCC_OscConfig+0x76>
 8004930:	4b80      	ldr	r3, [pc, #512]	; (8004b34 <HAL_RCC_OscConfig+0x26c>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a7f      	ldr	r2, [pc, #508]	; (8004b34 <HAL_RCC_OscConfig+0x26c>)
 8004936:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800493a:	6013      	str	r3, [r2, #0]
 800493c:	e02e      	b.n	800499c <HAL_RCC_OscConfig+0xd4>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d10c      	bne.n	8004960 <HAL_RCC_OscConfig+0x98>
 8004946:	4b7b      	ldr	r3, [pc, #492]	; (8004b34 <HAL_RCC_OscConfig+0x26c>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a7a      	ldr	r2, [pc, #488]	; (8004b34 <HAL_RCC_OscConfig+0x26c>)
 800494c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004950:	6013      	str	r3, [r2, #0]
 8004952:	4b78      	ldr	r3, [pc, #480]	; (8004b34 <HAL_RCC_OscConfig+0x26c>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a77      	ldr	r2, [pc, #476]	; (8004b34 <HAL_RCC_OscConfig+0x26c>)
 8004958:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800495c:	6013      	str	r3, [r2, #0]
 800495e:	e01d      	b.n	800499c <HAL_RCC_OscConfig+0xd4>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004968:	d10c      	bne.n	8004984 <HAL_RCC_OscConfig+0xbc>
 800496a:	4b72      	ldr	r3, [pc, #456]	; (8004b34 <HAL_RCC_OscConfig+0x26c>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a71      	ldr	r2, [pc, #452]	; (8004b34 <HAL_RCC_OscConfig+0x26c>)
 8004970:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004974:	6013      	str	r3, [r2, #0]
 8004976:	4b6f      	ldr	r3, [pc, #444]	; (8004b34 <HAL_RCC_OscConfig+0x26c>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a6e      	ldr	r2, [pc, #440]	; (8004b34 <HAL_RCC_OscConfig+0x26c>)
 800497c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004980:	6013      	str	r3, [r2, #0]
 8004982:	e00b      	b.n	800499c <HAL_RCC_OscConfig+0xd4>
 8004984:	4b6b      	ldr	r3, [pc, #428]	; (8004b34 <HAL_RCC_OscConfig+0x26c>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a6a      	ldr	r2, [pc, #424]	; (8004b34 <HAL_RCC_OscConfig+0x26c>)
 800498a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800498e:	6013      	str	r3, [r2, #0]
 8004990:	4b68      	ldr	r3, [pc, #416]	; (8004b34 <HAL_RCC_OscConfig+0x26c>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a67      	ldr	r2, [pc, #412]	; (8004b34 <HAL_RCC_OscConfig+0x26c>)
 8004996:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800499a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d013      	beq.n	80049cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049a4:	f7fe fbd2 	bl	800314c <HAL_GetTick>
 80049a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049aa:	e008      	b.n	80049be <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049ac:	f7fe fbce 	bl	800314c <HAL_GetTick>
 80049b0:	4602      	mov	r2, r0
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	2b64      	cmp	r3, #100	; 0x64
 80049b8:	d901      	bls.n	80049be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80049ba:	2303      	movs	r3, #3
 80049bc:	e200      	b.n	8004dc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049be:	4b5d      	ldr	r3, [pc, #372]	; (8004b34 <HAL_RCC_OscConfig+0x26c>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d0f0      	beq.n	80049ac <HAL_RCC_OscConfig+0xe4>
 80049ca:	e014      	b.n	80049f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049cc:	f7fe fbbe 	bl	800314c <HAL_GetTick>
 80049d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049d2:	e008      	b.n	80049e6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049d4:	f7fe fbba 	bl	800314c <HAL_GetTick>
 80049d8:	4602      	mov	r2, r0
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	1ad3      	subs	r3, r2, r3
 80049de:	2b64      	cmp	r3, #100	; 0x64
 80049e0:	d901      	bls.n	80049e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	e1ec      	b.n	8004dc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049e6:	4b53      	ldr	r3, [pc, #332]	; (8004b34 <HAL_RCC_OscConfig+0x26c>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d1f0      	bne.n	80049d4 <HAL_RCC_OscConfig+0x10c>
 80049f2:	e000      	b.n	80049f6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 0302 	and.w	r3, r3, #2
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d063      	beq.n	8004aca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a02:	4b4c      	ldr	r3, [pc, #304]	; (8004b34 <HAL_RCC_OscConfig+0x26c>)
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	f003 030c 	and.w	r3, r3, #12
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d00b      	beq.n	8004a26 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004a0e:	4b49      	ldr	r3, [pc, #292]	; (8004b34 <HAL_RCC_OscConfig+0x26c>)
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	f003 030c 	and.w	r3, r3, #12
 8004a16:	2b08      	cmp	r3, #8
 8004a18:	d11c      	bne.n	8004a54 <HAL_RCC_OscConfig+0x18c>
 8004a1a:	4b46      	ldr	r3, [pc, #280]	; (8004b34 <HAL_RCC_OscConfig+0x26c>)
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d116      	bne.n	8004a54 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a26:	4b43      	ldr	r3, [pc, #268]	; (8004b34 <HAL_RCC_OscConfig+0x26c>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 0302 	and.w	r3, r3, #2
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d005      	beq.n	8004a3e <HAL_RCC_OscConfig+0x176>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d001      	beq.n	8004a3e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e1c0      	b.n	8004dc0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a3e:	4b3d      	ldr	r3, [pc, #244]	; (8004b34 <HAL_RCC_OscConfig+0x26c>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	695b      	ldr	r3, [r3, #20]
 8004a4a:	00db      	lsls	r3, r3, #3
 8004a4c:	4939      	ldr	r1, [pc, #228]	; (8004b34 <HAL_RCC_OscConfig+0x26c>)
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a52:	e03a      	b.n	8004aca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	691b      	ldr	r3, [r3, #16]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d020      	beq.n	8004a9e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a5c:	4b36      	ldr	r3, [pc, #216]	; (8004b38 <HAL_RCC_OscConfig+0x270>)
 8004a5e:	2201      	movs	r2, #1
 8004a60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a62:	f7fe fb73 	bl	800314c <HAL_GetTick>
 8004a66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a68:	e008      	b.n	8004a7c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a6a:	f7fe fb6f 	bl	800314c <HAL_GetTick>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	2b02      	cmp	r3, #2
 8004a76:	d901      	bls.n	8004a7c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004a78:	2303      	movs	r3, #3
 8004a7a:	e1a1      	b.n	8004dc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a7c:	4b2d      	ldr	r3, [pc, #180]	; (8004b34 <HAL_RCC_OscConfig+0x26c>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0302 	and.w	r3, r3, #2
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d0f0      	beq.n	8004a6a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a88:	4b2a      	ldr	r3, [pc, #168]	; (8004b34 <HAL_RCC_OscConfig+0x26c>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	695b      	ldr	r3, [r3, #20]
 8004a94:	00db      	lsls	r3, r3, #3
 8004a96:	4927      	ldr	r1, [pc, #156]	; (8004b34 <HAL_RCC_OscConfig+0x26c>)
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	600b      	str	r3, [r1, #0]
 8004a9c:	e015      	b.n	8004aca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a9e:	4b26      	ldr	r3, [pc, #152]	; (8004b38 <HAL_RCC_OscConfig+0x270>)
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aa4:	f7fe fb52 	bl	800314c <HAL_GetTick>
 8004aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004aaa:	e008      	b.n	8004abe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004aac:	f7fe fb4e 	bl	800314c <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d901      	bls.n	8004abe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e180      	b.n	8004dc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004abe:	4b1d      	ldr	r3, [pc, #116]	; (8004b34 <HAL_RCC_OscConfig+0x26c>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 0302 	and.w	r3, r3, #2
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d1f0      	bne.n	8004aac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 0308 	and.w	r3, r3, #8
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d03a      	beq.n	8004b4c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	699b      	ldr	r3, [r3, #24]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d019      	beq.n	8004b12 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ade:	4b17      	ldr	r3, [pc, #92]	; (8004b3c <HAL_RCC_OscConfig+0x274>)
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ae4:	f7fe fb32 	bl	800314c <HAL_GetTick>
 8004ae8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004aea:	e008      	b.n	8004afe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004aec:	f7fe fb2e 	bl	800314c <HAL_GetTick>
 8004af0:	4602      	mov	r2, r0
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	2b02      	cmp	r3, #2
 8004af8:	d901      	bls.n	8004afe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e160      	b.n	8004dc0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004afe:	4b0d      	ldr	r3, [pc, #52]	; (8004b34 <HAL_RCC_OscConfig+0x26c>)
 8004b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b02:	f003 0302 	and.w	r3, r3, #2
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d0f0      	beq.n	8004aec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004b0a:	2001      	movs	r0, #1
 8004b0c:	f000 face 	bl	80050ac <RCC_Delay>
 8004b10:	e01c      	b.n	8004b4c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b12:	4b0a      	ldr	r3, [pc, #40]	; (8004b3c <HAL_RCC_OscConfig+0x274>)
 8004b14:	2200      	movs	r2, #0
 8004b16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b18:	f7fe fb18 	bl	800314c <HAL_GetTick>
 8004b1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b1e:	e00f      	b.n	8004b40 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b20:	f7fe fb14 	bl	800314c <HAL_GetTick>
 8004b24:	4602      	mov	r2, r0
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	2b02      	cmp	r3, #2
 8004b2c:	d908      	bls.n	8004b40 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	e146      	b.n	8004dc0 <HAL_RCC_OscConfig+0x4f8>
 8004b32:	bf00      	nop
 8004b34:	40021000 	.word	0x40021000
 8004b38:	42420000 	.word	0x42420000
 8004b3c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b40:	4b92      	ldr	r3, [pc, #584]	; (8004d8c <HAL_RCC_OscConfig+0x4c4>)
 8004b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b44:	f003 0302 	and.w	r3, r3, #2
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d1e9      	bne.n	8004b20 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 0304 	and.w	r3, r3, #4
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	f000 80a6 	beq.w	8004ca6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b5e:	4b8b      	ldr	r3, [pc, #556]	; (8004d8c <HAL_RCC_OscConfig+0x4c4>)
 8004b60:	69db      	ldr	r3, [r3, #28]
 8004b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d10d      	bne.n	8004b86 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b6a:	4b88      	ldr	r3, [pc, #544]	; (8004d8c <HAL_RCC_OscConfig+0x4c4>)
 8004b6c:	69db      	ldr	r3, [r3, #28]
 8004b6e:	4a87      	ldr	r2, [pc, #540]	; (8004d8c <HAL_RCC_OscConfig+0x4c4>)
 8004b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b74:	61d3      	str	r3, [r2, #28]
 8004b76:	4b85      	ldr	r3, [pc, #532]	; (8004d8c <HAL_RCC_OscConfig+0x4c4>)
 8004b78:	69db      	ldr	r3, [r3, #28]
 8004b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b7e:	60bb      	str	r3, [r7, #8]
 8004b80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b82:	2301      	movs	r3, #1
 8004b84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b86:	4b82      	ldr	r3, [pc, #520]	; (8004d90 <HAL_RCC_OscConfig+0x4c8>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d118      	bne.n	8004bc4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b92:	4b7f      	ldr	r3, [pc, #508]	; (8004d90 <HAL_RCC_OscConfig+0x4c8>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a7e      	ldr	r2, [pc, #504]	; (8004d90 <HAL_RCC_OscConfig+0x4c8>)
 8004b98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b9e:	f7fe fad5 	bl	800314c <HAL_GetTick>
 8004ba2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ba4:	e008      	b.n	8004bb8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ba6:	f7fe fad1 	bl	800314c <HAL_GetTick>
 8004baa:	4602      	mov	r2, r0
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	1ad3      	subs	r3, r2, r3
 8004bb0:	2b64      	cmp	r3, #100	; 0x64
 8004bb2:	d901      	bls.n	8004bb8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	e103      	b.n	8004dc0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bb8:	4b75      	ldr	r3, [pc, #468]	; (8004d90 <HAL_RCC_OscConfig+0x4c8>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d0f0      	beq.n	8004ba6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d106      	bne.n	8004bda <HAL_RCC_OscConfig+0x312>
 8004bcc:	4b6f      	ldr	r3, [pc, #444]	; (8004d8c <HAL_RCC_OscConfig+0x4c4>)
 8004bce:	6a1b      	ldr	r3, [r3, #32]
 8004bd0:	4a6e      	ldr	r2, [pc, #440]	; (8004d8c <HAL_RCC_OscConfig+0x4c4>)
 8004bd2:	f043 0301 	orr.w	r3, r3, #1
 8004bd6:	6213      	str	r3, [r2, #32]
 8004bd8:	e02d      	b.n	8004c36 <HAL_RCC_OscConfig+0x36e>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d10c      	bne.n	8004bfc <HAL_RCC_OscConfig+0x334>
 8004be2:	4b6a      	ldr	r3, [pc, #424]	; (8004d8c <HAL_RCC_OscConfig+0x4c4>)
 8004be4:	6a1b      	ldr	r3, [r3, #32]
 8004be6:	4a69      	ldr	r2, [pc, #420]	; (8004d8c <HAL_RCC_OscConfig+0x4c4>)
 8004be8:	f023 0301 	bic.w	r3, r3, #1
 8004bec:	6213      	str	r3, [r2, #32]
 8004bee:	4b67      	ldr	r3, [pc, #412]	; (8004d8c <HAL_RCC_OscConfig+0x4c4>)
 8004bf0:	6a1b      	ldr	r3, [r3, #32]
 8004bf2:	4a66      	ldr	r2, [pc, #408]	; (8004d8c <HAL_RCC_OscConfig+0x4c4>)
 8004bf4:	f023 0304 	bic.w	r3, r3, #4
 8004bf8:	6213      	str	r3, [r2, #32]
 8004bfa:	e01c      	b.n	8004c36 <HAL_RCC_OscConfig+0x36e>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	2b05      	cmp	r3, #5
 8004c02:	d10c      	bne.n	8004c1e <HAL_RCC_OscConfig+0x356>
 8004c04:	4b61      	ldr	r3, [pc, #388]	; (8004d8c <HAL_RCC_OscConfig+0x4c4>)
 8004c06:	6a1b      	ldr	r3, [r3, #32]
 8004c08:	4a60      	ldr	r2, [pc, #384]	; (8004d8c <HAL_RCC_OscConfig+0x4c4>)
 8004c0a:	f043 0304 	orr.w	r3, r3, #4
 8004c0e:	6213      	str	r3, [r2, #32]
 8004c10:	4b5e      	ldr	r3, [pc, #376]	; (8004d8c <HAL_RCC_OscConfig+0x4c4>)
 8004c12:	6a1b      	ldr	r3, [r3, #32]
 8004c14:	4a5d      	ldr	r2, [pc, #372]	; (8004d8c <HAL_RCC_OscConfig+0x4c4>)
 8004c16:	f043 0301 	orr.w	r3, r3, #1
 8004c1a:	6213      	str	r3, [r2, #32]
 8004c1c:	e00b      	b.n	8004c36 <HAL_RCC_OscConfig+0x36e>
 8004c1e:	4b5b      	ldr	r3, [pc, #364]	; (8004d8c <HAL_RCC_OscConfig+0x4c4>)
 8004c20:	6a1b      	ldr	r3, [r3, #32]
 8004c22:	4a5a      	ldr	r2, [pc, #360]	; (8004d8c <HAL_RCC_OscConfig+0x4c4>)
 8004c24:	f023 0301 	bic.w	r3, r3, #1
 8004c28:	6213      	str	r3, [r2, #32]
 8004c2a:	4b58      	ldr	r3, [pc, #352]	; (8004d8c <HAL_RCC_OscConfig+0x4c4>)
 8004c2c:	6a1b      	ldr	r3, [r3, #32]
 8004c2e:	4a57      	ldr	r2, [pc, #348]	; (8004d8c <HAL_RCC_OscConfig+0x4c4>)
 8004c30:	f023 0304 	bic.w	r3, r3, #4
 8004c34:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d015      	beq.n	8004c6a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c3e:	f7fe fa85 	bl	800314c <HAL_GetTick>
 8004c42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c44:	e00a      	b.n	8004c5c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c46:	f7fe fa81 	bl	800314c <HAL_GetTick>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d901      	bls.n	8004c5c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004c58:	2303      	movs	r3, #3
 8004c5a:	e0b1      	b.n	8004dc0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c5c:	4b4b      	ldr	r3, [pc, #300]	; (8004d8c <HAL_RCC_OscConfig+0x4c4>)
 8004c5e:	6a1b      	ldr	r3, [r3, #32]
 8004c60:	f003 0302 	and.w	r3, r3, #2
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d0ee      	beq.n	8004c46 <HAL_RCC_OscConfig+0x37e>
 8004c68:	e014      	b.n	8004c94 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c6a:	f7fe fa6f 	bl	800314c <HAL_GetTick>
 8004c6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c70:	e00a      	b.n	8004c88 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c72:	f7fe fa6b 	bl	800314c <HAL_GetTick>
 8004c76:	4602      	mov	r2, r0
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d901      	bls.n	8004c88 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004c84:	2303      	movs	r3, #3
 8004c86:	e09b      	b.n	8004dc0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c88:	4b40      	ldr	r3, [pc, #256]	; (8004d8c <HAL_RCC_OscConfig+0x4c4>)
 8004c8a:	6a1b      	ldr	r3, [r3, #32]
 8004c8c:	f003 0302 	and.w	r3, r3, #2
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d1ee      	bne.n	8004c72 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004c94:	7dfb      	ldrb	r3, [r7, #23]
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d105      	bne.n	8004ca6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c9a:	4b3c      	ldr	r3, [pc, #240]	; (8004d8c <HAL_RCC_OscConfig+0x4c4>)
 8004c9c:	69db      	ldr	r3, [r3, #28]
 8004c9e:	4a3b      	ldr	r2, [pc, #236]	; (8004d8c <HAL_RCC_OscConfig+0x4c4>)
 8004ca0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ca4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	69db      	ldr	r3, [r3, #28]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	f000 8087 	beq.w	8004dbe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004cb0:	4b36      	ldr	r3, [pc, #216]	; (8004d8c <HAL_RCC_OscConfig+0x4c4>)
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	f003 030c 	and.w	r3, r3, #12
 8004cb8:	2b08      	cmp	r3, #8
 8004cba:	d061      	beq.n	8004d80 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	69db      	ldr	r3, [r3, #28]
 8004cc0:	2b02      	cmp	r3, #2
 8004cc2:	d146      	bne.n	8004d52 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cc4:	4b33      	ldr	r3, [pc, #204]	; (8004d94 <HAL_RCC_OscConfig+0x4cc>)
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cca:	f7fe fa3f 	bl	800314c <HAL_GetTick>
 8004cce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004cd0:	e008      	b.n	8004ce4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cd2:	f7fe fa3b 	bl	800314c <HAL_GetTick>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	1ad3      	subs	r3, r2, r3
 8004cdc:	2b02      	cmp	r3, #2
 8004cde:	d901      	bls.n	8004ce4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004ce0:	2303      	movs	r3, #3
 8004ce2:	e06d      	b.n	8004dc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ce4:	4b29      	ldr	r3, [pc, #164]	; (8004d8c <HAL_RCC_OscConfig+0x4c4>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d1f0      	bne.n	8004cd2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6a1b      	ldr	r3, [r3, #32]
 8004cf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cf8:	d108      	bne.n	8004d0c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004cfa:	4b24      	ldr	r3, [pc, #144]	; (8004d8c <HAL_RCC_OscConfig+0x4c4>)
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	4921      	ldr	r1, [pc, #132]	; (8004d8c <HAL_RCC_OscConfig+0x4c4>)
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d0c:	4b1f      	ldr	r3, [pc, #124]	; (8004d8c <HAL_RCC_OscConfig+0x4c4>)
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6a19      	ldr	r1, [r3, #32]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1c:	430b      	orrs	r3, r1
 8004d1e:	491b      	ldr	r1, [pc, #108]	; (8004d8c <HAL_RCC_OscConfig+0x4c4>)
 8004d20:	4313      	orrs	r3, r2
 8004d22:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d24:	4b1b      	ldr	r3, [pc, #108]	; (8004d94 <HAL_RCC_OscConfig+0x4cc>)
 8004d26:	2201      	movs	r2, #1
 8004d28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d2a:	f7fe fa0f 	bl	800314c <HAL_GetTick>
 8004d2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004d30:	e008      	b.n	8004d44 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d32:	f7fe fa0b 	bl	800314c <HAL_GetTick>
 8004d36:	4602      	mov	r2, r0
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	1ad3      	subs	r3, r2, r3
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	d901      	bls.n	8004d44 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004d40:	2303      	movs	r3, #3
 8004d42:	e03d      	b.n	8004dc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004d44:	4b11      	ldr	r3, [pc, #68]	; (8004d8c <HAL_RCC_OscConfig+0x4c4>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d0f0      	beq.n	8004d32 <HAL_RCC_OscConfig+0x46a>
 8004d50:	e035      	b.n	8004dbe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d52:	4b10      	ldr	r3, [pc, #64]	; (8004d94 <HAL_RCC_OscConfig+0x4cc>)
 8004d54:	2200      	movs	r2, #0
 8004d56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d58:	f7fe f9f8 	bl	800314c <HAL_GetTick>
 8004d5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d5e:	e008      	b.n	8004d72 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d60:	f7fe f9f4 	bl	800314c <HAL_GetTick>
 8004d64:	4602      	mov	r2, r0
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	2b02      	cmp	r3, #2
 8004d6c:	d901      	bls.n	8004d72 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004d6e:	2303      	movs	r3, #3
 8004d70:	e026      	b.n	8004dc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d72:	4b06      	ldr	r3, [pc, #24]	; (8004d8c <HAL_RCC_OscConfig+0x4c4>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d1f0      	bne.n	8004d60 <HAL_RCC_OscConfig+0x498>
 8004d7e:	e01e      	b.n	8004dbe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	69db      	ldr	r3, [r3, #28]
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d107      	bne.n	8004d98 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e019      	b.n	8004dc0 <HAL_RCC_OscConfig+0x4f8>
 8004d8c:	40021000 	.word	0x40021000
 8004d90:	40007000 	.word	0x40007000
 8004d94:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004d98:	4b0b      	ldr	r3, [pc, #44]	; (8004dc8 <HAL_RCC_OscConfig+0x500>)
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6a1b      	ldr	r3, [r3, #32]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d106      	bne.n	8004dba <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d001      	beq.n	8004dbe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e000      	b.n	8004dc0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004dbe:	2300      	movs	r3, #0
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3718      	adds	r7, #24
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}
 8004dc8:	40021000 	.word	0x40021000

08004dcc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b084      	sub	sp, #16
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d101      	bne.n	8004de0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e0d0      	b.n	8004f82 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004de0:	4b6a      	ldr	r3, [pc, #424]	; (8004f8c <HAL_RCC_ClockConfig+0x1c0>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0307 	and.w	r3, r3, #7
 8004de8:	683a      	ldr	r2, [r7, #0]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d910      	bls.n	8004e10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dee:	4b67      	ldr	r3, [pc, #412]	; (8004f8c <HAL_RCC_ClockConfig+0x1c0>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f023 0207 	bic.w	r2, r3, #7
 8004df6:	4965      	ldr	r1, [pc, #404]	; (8004f8c <HAL_RCC_ClockConfig+0x1c0>)
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dfe:	4b63      	ldr	r3, [pc, #396]	; (8004f8c <HAL_RCC_ClockConfig+0x1c0>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 0307 	and.w	r3, r3, #7
 8004e06:	683a      	ldr	r2, [r7, #0]
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d001      	beq.n	8004e10 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e0b8      	b.n	8004f82 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f003 0302 	and.w	r3, r3, #2
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d020      	beq.n	8004e5e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0304 	and.w	r3, r3, #4
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d005      	beq.n	8004e34 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e28:	4b59      	ldr	r3, [pc, #356]	; (8004f90 <HAL_RCC_ClockConfig+0x1c4>)
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	4a58      	ldr	r2, [pc, #352]	; (8004f90 <HAL_RCC_ClockConfig+0x1c4>)
 8004e2e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004e32:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 0308 	and.w	r3, r3, #8
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d005      	beq.n	8004e4c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e40:	4b53      	ldr	r3, [pc, #332]	; (8004f90 <HAL_RCC_ClockConfig+0x1c4>)
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	4a52      	ldr	r2, [pc, #328]	; (8004f90 <HAL_RCC_ClockConfig+0x1c4>)
 8004e46:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004e4a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e4c:	4b50      	ldr	r3, [pc, #320]	; (8004f90 <HAL_RCC_ClockConfig+0x1c4>)
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	494d      	ldr	r1, [pc, #308]	; (8004f90 <HAL_RCC_ClockConfig+0x1c4>)
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 0301 	and.w	r3, r3, #1
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d040      	beq.n	8004eec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d107      	bne.n	8004e82 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e72:	4b47      	ldr	r3, [pc, #284]	; (8004f90 <HAL_RCC_ClockConfig+0x1c4>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d115      	bne.n	8004eaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e07f      	b.n	8004f82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	2b02      	cmp	r3, #2
 8004e88:	d107      	bne.n	8004e9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e8a:	4b41      	ldr	r3, [pc, #260]	; (8004f90 <HAL_RCC_ClockConfig+0x1c4>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d109      	bne.n	8004eaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e073      	b.n	8004f82 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e9a:	4b3d      	ldr	r3, [pc, #244]	; (8004f90 <HAL_RCC_ClockConfig+0x1c4>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 0302 	and.w	r3, r3, #2
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d101      	bne.n	8004eaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e06b      	b.n	8004f82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004eaa:	4b39      	ldr	r3, [pc, #228]	; (8004f90 <HAL_RCC_ClockConfig+0x1c4>)
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	f023 0203 	bic.w	r2, r3, #3
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	4936      	ldr	r1, [pc, #216]	; (8004f90 <HAL_RCC_ClockConfig+0x1c4>)
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ebc:	f7fe f946 	bl	800314c <HAL_GetTick>
 8004ec0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ec2:	e00a      	b.n	8004eda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ec4:	f7fe f942 	bl	800314c <HAL_GetTick>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d901      	bls.n	8004eda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e053      	b.n	8004f82 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eda:	4b2d      	ldr	r3, [pc, #180]	; (8004f90 <HAL_RCC_ClockConfig+0x1c4>)
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	f003 020c 	and.w	r2, r3, #12
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d1eb      	bne.n	8004ec4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004eec:	4b27      	ldr	r3, [pc, #156]	; (8004f8c <HAL_RCC_ClockConfig+0x1c0>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0307 	and.w	r3, r3, #7
 8004ef4:	683a      	ldr	r2, [r7, #0]
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d210      	bcs.n	8004f1c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004efa:	4b24      	ldr	r3, [pc, #144]	; (8004f8c <HAL_RCC_ClockConfig+0x1c0>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f023 0207 	bic.w	r2, r3, #7
 8004f02:	4922      	ldr	r1, [pc, #136]	; (8004f8c <HAL_RCC_ClockConfig+0x1c0>)
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f0a:	4b20      	ldr	r3, [pc, #128]	; (8004f8c <HAL_RCC_ClockConfig+0x1c0>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 0307 	and.w	r3, r3, #7
 8004f12:	683a      	ldr	r2, [r7, #0]
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d001      	beq.n	8004f1c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e032      	b.n	8004f82 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 0304 	and.w	r3, r3, #4
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d008      	beq.n	8004f3a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f28:	4b19      	ldr	r3, [pc, #100]	; (8004f90 <HAL_RCC_ClockConfig+0x1c4>)
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	4916      	ldr	r1, [pc, #88]	; (8004f90 <HAL_RCC_ClockConfig+0x1c4>)
 8004f36:	4313      	orrs	r3, r2
 8004f38:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 0308 	and.w	r3, r3, #8
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d009      	beq.n	8004f5a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004f46:	4b12      	ldr	r3, [pc, #72]	; (8004f90 <HAL_RCC_ClockConfig+0x1c4>)
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	691b      	ldr	r3, [r3, #16]
 8004f52:	00db      	lsls	r3, r3, #3
 8004f54:	490e      	ldr	r1, [pc, #56]	; (8004f90 <HAL_RCC_ClockConfig+0x1c4>)
 8004f56:	4313      	orrs	r3, r2
 8004f58:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004f5a:	f000 f821 	bl	8004fa0 <HAL_RCC_GetSysClockFreq>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	4b0b      	ldr	r3, [pc, #44]	; (8004f90 <HAL_RCC_ClockConfig+0x1c4>)
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	091b      	lsrs	r3, r3, #4
 8004f66:	f003 030f 	and.w	r3, r3, #15
 8004f6a:	490a      	ldr	r1, [pc, #40]	; (8004f94 <HAL_RCC_ClockConfig+0x1c8>)
 8004f6c:	5ccb      	ldrb	r3, [r1, r3]
 8004f6e:	fa22 f303 	lsr.w	r3, r2, r3
 8004f72:	4a09      	ldr	r2, [pc, #36]	; (8004f98 <HAL_RCC_ClockConfig+0x1cc>)
 8004f74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004f76:	4b09      	ldr	r3, [pc, #36]	; (8004f9c <HAL_RCC_ClockConfig+0x1d0>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f7fe f8a4 	bl	80030c8 <HAL_InitTick>

  return HAL_OK;
 8004f80:	2300      	movs	r3, #0
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3710      	adds	r7, #16
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}
 8004f8a:	bf00      	nop
 8004f8c:	40022000 	.word	0x40022000
 8004f90:	40021000 	.word	0x40021000
 8004f94:	0800836c 	.word	0x0800836c
 8004f98:	20000024 	.word	0x20000024
 8004f9c:	20000028 	.word	0x20000028

08004fa0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b087      	sub	sp, #28
 8004fa4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	60fb      	str	r3, [r7, #12]
 8004faa:	2300      	movs	r3, #0
 8004fac:	60bb      	str	r3, [r7, #8]
 8004fae:	2300      	movs	r3, #0
 8004fb0:	617b      	str	r3, [r7, #20]
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004fba:	4b1e      	ldr	r3, [pc, #120]	; (8005034 <HAL_RCC_GetSysClockFreq+0x94>)
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f003 030c 	and.w	r3, r3, #12
 8004fc6:	2b04      	cmp	r3, #4
 8004fc8:	d002      	beq.n	8004fd0 <HAL_RCC_GetSysClockFreq+0x30>
 8004fca:	2b08      	cmp	r3, #8
 8004fcc:	d003      	beq.n	8004fd6 <HAL_RCC_GetSysClockFreq+0x36>
 8004fce:	e027      	b.n	8005020 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004fd0:	4b19      	ldr	r3, [pc, #100]	; (8005038 <HAL_RCC_GetSysClockFreq+0x98>)
 8004fd2:	613b      	str	r3, [r7, #16]
      break;
 8004fd4:	e027      	b.n	8005026 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	0c9b      	lsrs	r3, r3, #18
 8004fda:	f003 030f 	and.w	r3, r3, #15
 8004fde:	4a17      	ldr	r2, [pc, #92]	; (800503c <HAL_RCC_GetSysClockFreq+0x9c>)
 8004fe0:	5cd3      	ldrb	r3, [r2, r3]
 8004fe2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d010      	beq.n	8005010 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004fee:	4b11      	ldr	r3, [pc, #68]	; (8005034 <HAL_RCC_GetSysClockFreq+0x94>)
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	0c5b      	lsrs	r3, r3, #17
 8004ff4:	f003 0301 	and.w	r3, r3, #1
 8004ff8:	4a11      	ldr	r2, [pc, #68]	; (8005040 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004ffa:	5cd3      	ldrb	r3, [r2, r3]
 8004ffc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a0d      	ldr	r2, [pc, #52]	; (8005038 <HAL_RCC_GetSysClockFreq+0x98>)
 8005002:	fb03 f202 	mul.w	r2, r3, r2
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	fbb2 f3f3 	udiv	r3, r2, r3
 800500c:	617b      	str	r3, [r7, #20]
 800500e:	e004      	b.n	800501a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	4a0c      	ldr	r2, [pc, #48]	; (8005044 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005014:	fb02 f303 	mul.w	r3, r2, r3
 8005018:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	613b      	str	r3, [r7, #16]
      break;
 800501e:	e002      	b.n	8005026 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005020:	4b05      	ldr	r3, [pc, #20]	; (8005038 <HAL_RCC_GetSysClockFreq+0x98>)
 8005022:	613b      	str	r3, [r7, #16]
      break;
 8005024:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005026:	693b      	ldr	r3, [r7, #16]
}
 8005028:	4618      	mov	r0, r3
 800502a:	371c      	adds	r7, #28
 800502c:	46bd      	mov	sp, r7
 800502e:	bc80      	pop	{r7}
 8005030:	4770      	bx	lr
 8005032:	bf00      	nop
 8005034:	40021000 	.word	0x40021000
 8005038:	007a1200 	.word	0x007a1200
 800503c:	08008384 	.word	0x08008384
 8005040:	08008394 	.word	0x08008394
 8005044:	003d0900 	.word	0x003d0900

08005048 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005048:	b480      	push	{r7}
 800504a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800504c:	4b02      	ldr	r3, [pc, #8]	; (8005058 <HAL_RCC_GetHCLKFreq+0x10>)
 800504e:	681b      	ldr	r3, [r3, #0]
}
 8005050:	4618      	mov	r0, r3
 8005052:	46bd      	mov	sp, r7
 8005054:	bc80      	pop	{r7}
 8005056:	4770      	bx	lr
 8005058:	20000024 	.word	0x20000024

0800505c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005060:	f7ff fff2 	bl	8005048 <HAL_RCC_GetHCLKFreq>
 8005064:	4602      	mov	r2, r0
 8005066:	4b05      	ldr	r3, [pc, #20]	; (800507c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	0a1b      	lsrs	r3, r3, #8
 800506c:	f003 0307 	and.w	r3, r3, #7
 8005070:	4903      	ldr	r1, [pc, #12]	; (8005080 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005072:	5ccb      	ldrb	r3, [r1, r3]
 8005074:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005078:	4618      	mov	r0, r3
 800507a:	bd80      	pop	{r7, pc}
 800507c:	40021000 	.word	0x40021000
 8005080:	0800837c 	.word	0x0800837c

08005084 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005088:	f7ff ffde 	bl	8005048 <HAL_RCC_GetHCLKFreq>
 800508c:	4602      	mov	r2, r0
 800508e:	4b05      	ldr	r3, [pc, #20]	; (80050a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	0adb      	lsrs	r3, r3, #11
 8005094:	f003 0307 	and.w	r3, r3, #7
 8005098:	4903      	ldr	r1, [pc, #12]	; (80050a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800509a:	5ccb      	ldrb	r3, [r1, r3]
 800509c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	40021000 	.word	0x40021000
 80050a8:	0800837c 	.word	0x0800837c

080050ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b085      	sub	sp, #20
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80050b4:	4b0a      	ldr	r3, [pc, #40]	; (80050e0 <RCC_Delay+0x34>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a0a      	ldr	r2, [pc, #40]	; (80050e4 <RCC_Delay+0x38>)
 80050ba:	fba2 2303 	umull	r2, r3, r2, r3
 80050be:	0a5b      	lsrs	r3, r3, #9
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	fb02 f303 	mul.w	r3, r2, r3
 80050c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80050c8:	bf00      	nop
  }
  while (Delay --);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	1e5a      	subs	r2, r3, #1
 80050ce:	60fa      	str	r2, [r7, #12]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d1f9      	bne.n	80050c8 <RCC_Delay+0x1c>
}
 80050d4:	bf00      	nop
 80050d6:	bf00      	nop
 80050d8:	3714      	adds	r7, #20
 80050da:	46bd      	mov	sp, r7
 80050dc:	bc80      	pop	{r7}
 80050de:	4770      	bx	lr
 80050e0:	20000024 	.word	0x20000024
 80050e4:	10624dd3 	.word	0x10624dd3

080050e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b082      	sub	sp, #8
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d101      	bne.n	80050fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e041      	b.n	800517e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005100:	b2db      	uxtb	r3, r3
 8005102:	2b00      	cmp	r3, #0
 8005104:	d106      	bne.n	8005114 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f7fd fd28 	bl	8002b64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2202      	movs	r2, #2
 8005118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	3304      	adds	r3, #4
 8005124:	4619      	mov	r1, r3
 8005126:	4610      	mov	r0, r2
 8005128:	f000 fd2e 	bl	8005b88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800517c:	2300      	movs	r3, #0
}
 800517e:	4618      	mov	r0, r3
 8005180:	3708      	adds	r7, #8
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}

08005186 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005186:	b580      	push	{r7, lr}
 8005188:	b082      	sub	sp, #8
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d101      	bne.n	8005198 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e041      	b.n	800521c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d106      	bne.n	80051b2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f000 f839 	bl	8005224 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2202      	movs	r2, #2
 80051b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	3304      	adds	r3, #4
 80051c2:	4619      	mov	r1, r3
 80051c4:	4610      	mov	r0, r2
 80051c6:	f000 fcdf 	bl	8005b88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2201      	movs	r2, #1
 80051ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2201      	movs	r2, #1
 80051d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2201      	movs	r2, #1
 80051de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2201      	movs	r2, #1
 80051e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2201      	movs	r2, #1
 80051ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2201      	movs	r2, #1
 80051f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2201      	movs	r2, #1
 80051fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2201      	movs	r2, #1
 8005206:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2201      	movs	r2, #1
 800520e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2201      	movs	r2, #1
 8005216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800521a:	2300      	movs	r3, #0
}
 800521c:	4618      	mov	r0, r3
 800521e:	3708      	adds	r7, #8
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}

08005224 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005224:	b480      	push	{r7}
 8005226:	b083      	sub	sp, #12
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800522c:	bf00      	nop
 800522e:	370c      	adds	r7, #12
 8005230:	46bd      	mov	sp, r7
 8005232:	bc80      	pop	{r7}
 8005234:	4770      	bx	lr
	...

08005238 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d109      	bne.n	800525c <HAL_TIM_PWM_Start+0x24>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800524e:	b2db      	uxtb	r3, r3
 8005250:	2b01      	cmp	r3, #1
 8005252:	bf14      	ite	ne
 8005254:	2301      	movne	r3, #1
 8005256:	2300      	moveq	r3, #0
 8005258:	b2db      	uxtb	r3, r3
 800525a:	e022      	b.n	80052a2 <HAL_TIM_PWM_Start+0x6a>
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	2b04      	cmp	r3, #4
 8005260:	d109      	bne.n	8005276 <HAL_TIM_PWM_Start+0x3e>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005268:	b2db      	uxtb	r3, r3
 800526a:	2b01      	cmp	r3, #1
 800526c:	bf14      	ite	ne
 800526e:	2301      	movne	r3, #1
 8005270:	2300      	moveq	r3, #0
 8005272:	b2db      	uxtb	r3, r3
 8005274:	e015      	b.n	80052a2 <HAL_TIM_PWM_Start+0x6a>
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	2b08      	cmp	r3, #8
 800527a:	d109      	bne.n	8005290 <HAL_TIM_PWM_Start+0x58>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005282:	b2db      	uxtb	r3, r3
 8005284:	2b01      	cmp	r3, #1
 8005286:	bf14      	ite	ne
 8005288:	2301      	movne	r3, #1
 800528a:	2300      	moveq	r3, #0
 800528c:	b2db      	uxtb	r3, r3
 800528e:	e008      	b.n	80052a2 <HAL_TIM_PWM_Start+0x6a>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005296:	b2db      	uxtb	r3, r3
 8005298:	2b01      	cmp	r3, #1
 800529a:	bf14      	ite	ne
 800529c:	2301      	movne	r3, #1
 800529e:	2300      	moveq	r3, #0
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d001      	beq.n	80052aa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e05e      	b.n	8005368 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d104      	bne.n	80052ba <HAL_TIM_PWM_Start+0x82>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2202      	movs	r2, #2
 80052b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052b8:	e013      	b.n	80052e2 <HAL_TIM_PWM_Start+0xaa>
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	2b04      	cmp	r3, #4
 80052be:	d104      	bne.n	80052ca <HAL_TIM_PWM_Start+0x92>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2202      	movs	r2, #2
 80052c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052c8:	e00b      	b.n	80052e2 <HAL_TIM_PWM_Start+0xaa>
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	2b08      	cmp	r3, #8
 80052ce:	d104      	bne.n	80052da <HAL_TIM_PWM_Start+0xa2>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2202      	movs	r2, #2
 80052d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052d8:	e003      	b.n	80052e2 <HAL_TIM_PWM_Start+0xaa>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2202      	movs	r2, #2
 80052de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	2201      	movs	r2, #1
 80052e8:	6839      	ldr	r1, [r7, #0]
 80052ea:	4618      	mov	r0, r3
 80052ec:	f000 fecc 	bl	8006088 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a1e      	ldr	r2, [pc, #120]	; (8005370 <HAL_TIM_PWM_Start+0x138>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d107      	bne.n	800530a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005308:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a18      	ldr	r2, [pc, #96]	; (8005370 <HAL_TIM_PWM_Start+0x138>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d00e      	beq.n	8005332 <HAL_TIM_PWM_Start+0xfa>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800531c:	d009      	beq.n	8005332 <HAL_TIM_PWM_Start+0xfa>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a14      	ldr	r2, [pc, #80]	; (8005374 <HAL_TIM_PWM_Start+0x13c>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d004      	beq.n	8005332 <HAL_TIM_PWM_Start+0xfa>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a12      	ldr	r2, [pc, #72]	; (8005378 <HAL_TIM_PWM_Start+0x140>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d111      	bne.n	8005356 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	f003 0307 	and.w	r3, r3, #7
 800533c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2b06      	cmp	r3, #6
 8005342:	d010      	beq.n	8005366 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f042 0201 	orr.w	r2, r2, #1
 8005352:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005354:	e007      	b.n	8005366 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f042 0201 	orr.w	r2, r2, #1
 8005364:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005366:	2300      	movs	r3, #0
}
 8005368:	4618      	mov	r0, r3
 800536a:	3710      	adds	r7, #16
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}
 8005370:	40012c00 	.word	0x40012c00
 8005374:	40000400 	.word	0x40000400
 8005378:	40000800 	.word	0x40000800

0800537c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b086      	sub	sp, #24
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d101      	bne.n	8005390 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	e093      	b.n	80054b8 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005396:	b2db      	uxtb	r3, r3
 8005398:	2b00      	cmp	r3, #0
 800539a:	d106      	bne.n	80053aa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f7fd fc0d 	bl	8002bc4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2202      	movs	r2, #2
 80053ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	6812      	ldr	r2, [r2, #0]
 80053bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053c0:	f023 0307 	bic.w	r3, r3, #7
 80053c4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	3304      	adds	r3, #4
 80053ce:	4619      	mov	r1, r3
 80053d0:	4610      	mov	r0, r2
 80053d2:	f000 fbd9 	bl	8005b88 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	699b      	ldr	r3, [r3, #24]
 80053e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	6a1b      	ldr	r3, [r3, #32]
 80053ec:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	697a      	ldr	r2, [r7, #20]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053fe:	f023 0303 	bic.w	r3, r3, #3
 8005402:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	689a      	ldr	r2, [r3, #8]
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	699b      	ldr	r3, [r3, #24]
 800540c:	021b      	lsls	r3, r3, #8
 800540e:	4313      	orrs	r3, r2
 8005410:	693a      	ldr	r2, [r7, #16]
 8005412:	4313      	orrs	r3, r2
 8005414:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800541c:	f023 030c 	bic.w	r3, r3, #12
 8005420:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005428:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800542c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	68da      	ldr	r2, [r3, #12]
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	69db      	ldr	r3, [r3, #28]
 8005436:	021b      	lsls	r3, r3, #8
 8005438:	4313      	orrs	r3, r2
 800543a:	693a      	ldr	r2, [r7, #16]
 800543c:	4313      	orrs	r3, r2
 800543e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	691b      	ldr	r3, [r3, #16]
 8005444:	011a      	lsls	r2, r3, #4
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	6a1b      	ldr	r3, [r3, #32]
 800544a:	031b      	lsls	r3, r3, #12
 800544c:	4313      	orrs	r3, r2
 800544e:	693a      	ldr	r2, [r7, #16]
 8005450:	4313      	orrs	r3, r2
 8005452:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800545a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	685a      	ldr	r2, [r3, #4]
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	695b      	ldr	r3, [r3, #20]
 8005464:	011b      	lsls	r3, r3, #4
 8005466:	4313      	orrs	r3, r2
 8005468:	68fa      	ldr	r2, [r7, #12]
 800546a:	4313      	orrs	r3, r2
 800546c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	697a      	ldr	r2, [r7, #20]
 8005474:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	693a      	ldr	r2, [r7, #16]
 800547c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	68fa      	ldr	r2, [r7, #12]
 8005484:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2201      	movs	r2, #1
 800548a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2201      	movs	r2, #1
 8005492:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2201      	movs	r2, #1
 800549a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2201      	movs	r2, #1
 80054a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2201      	movs	r2, #1
 80054aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2201      	movs	r2, #1
 80054b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054b6:	2300      	movs	r3, #0
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3718      	adds	r7, #24
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}

080054c0 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054d0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80054d8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80054e0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80054e8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d110      	bne.n	8005512 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80054f0:	7bfb      	ldrb	r3, [r7, #15]
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d102      	bne.n	80054fc <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80054f6:	7b7b      	ldrb	r3, [r7, #13]
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d001      	beq.n	8005500 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	e089      	b.n	8005614 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2202      	movs	r2, #2
 8005504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2202      	movs	r2, #2
 800550c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005510:	e031      	b.n	8005576 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	2b04      	cmp	r3, #4
 8005516:	d110      	bne.n	800553a <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005518:	7bbb      	ldrb	r3, [r7, #14]
 800551a:	2b01      	cmp	r3, #1
 800551c:	d102      	bne.n	8005524 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800551e:	7b3b      	ldrb	r3, [r7, #12]
 8005520:	2b01      	cmp	r3, #1
 8005522:	d001      	beq.n	8005528 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	e075      	b.n	8005614 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2202      	movs	r2, #2
 800552c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2202      	movs	r2, #2
 8005534:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005538:	e01d      	b.n	8005576 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800553a:	7bfb      	ldrb	r3, [r7, #15]
 800553c:	2b01      	cmp	r3, #1
 800553e:	d108      	bne.n	8005552 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005540:	7bbb      	ldrb	r3, [r7, #14]
 8005542:	2b01      	cmp	r3, #1
 8005544:	d105      	bne.n	8005552 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005546:	7b7b      	ldrb	r3, [r7, #13]
 8005548:	2b01      	cmp	r3, #1
 800554a:	d102      	bne.n	8005552 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800554c:	7b3b      	ldrb	r3, [r7, #12]
 800554e:	2b01      	cmp	r3, #1
 8005550:	d001      	beq.n	8005556 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e05e      	b.n	8005614 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2202      	movs	r2, #2
 800555a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2202      	movs	r2, #2
 8005562:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2202      	movs	r2, #2
 800556a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2202      	movs	r2, #2
 8005572:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d003      	beq.n	8005584 <HAL_TIM_Encoder_Start_IT+0xc4>
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	2b04      	cmp	r3, #4
 8005580:	d010      	beq.n	80055a4 <HAL_TIM_Encoder_Start_IT+0xe4>
 8005582:	e01f      	b.n	80055c4 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	2201      	movs	r2, #1
 800558a:	2100      	movs	r1, #0
 800558c:	4618      	mov	r0, r3
 800558e:	f000 fd7b 	bl	8006088 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	68da      	ldr	r2, [r3, #12]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f042 0202 	orr.w	r2, r2, #2
 80055a0:	60da      	str	r2, [r3, #12]
      break;
 80055a2:	e02e      	b.n	8005602 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	2201      	movs	r2, #1
 80055aa:	2104      	movs	r1, #4
 80055ac:	4618      	mov	r0, r3
 80055ae:	f000 fd6b 	bl	8006088 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	68da      	ldr	r2, [r3, #12]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f042 0204 	orr.w	r2, r2, #4
 80055c0:	60da      	str	r2, [r3, #12]
      break;
 80055c2:	e01e      	b.n	8005602 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	2201      	movs	r2, #1
 80055ca:	2100      	movs	r1, #0
 80055cc:	4618      	mov	r0, r3
 80055ce:	f000 fd5b 	bl	8006088 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	2201      	movs	r2, #1
 80055d8:	2104      	movs	r1, #4
 80055da:	4618      	mov	r0, r3
 80055dc:	f000 fd54 	bl	8006088 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	68da      	ldr	r2, [r3, #12]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f042 0202 	orr.w	r2, r2, #2
 80055ee:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	68da      	ldr	r2, [r3, #12]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f042 0204 	orr.w	r2, r2, #4
 80055fe:	60da      	str	r2, [r3, #12]
      break;
 8005600:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f042 0201 	orr.w	r2, r2, #1
 8005610:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005612:	2300      	movs	r3, #0
}
 8005614:	4618      	mov	r0, r3
 8005616:	3710      	adds	r7, #16
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}

0800561c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b082      	sub	sp, #8
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	691b      	ldr	r3, [r3, #16]
 800562a:	f003 0302 	and.w	r3, r3, #2
 800562e:	2b02      	cmp	r3, #2
 8005630:	d122      	bne.n	8005678 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	f003 0302 	and.w	r3, r3, #2
 800563c:	2b02      	cmp	r3, #2
 800563e:	d11b      	bne.n	8005678 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f06f 0202 	mvn.w	r2, #2
 8005648:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2201      	movs	r2, #1
 800564e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	699b      	ldr	r3, [r3, #24]
 8005656:	f003 0303 	and.w	r3, r3, #3
 800565a:	2b00      	cmp	r3, #0
 800565c:	d003      	beq.n	8005666 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f7fc f944 	bl	80018ec <HAL_TIM_IC_CaptureCallback>
 8005664:	e005      	b.n	8005672 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f000 fa72 	bl	8005b50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f000 fa78 	bl	8005b62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	691b      	ldr	r3, [r3, #16]
 800567e:	f003 0304 	and.w	r3, r3, #4
 8005682:	2b04      	cmp	r3, #4
 8005684:	d122      	bne.n	80056cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	f003 0304 	and.w	r3, r3, #4
 8005690:	2b04      	cmp	r3, #4
 8005692:	d11b      	bne.n	80056cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f06f 0204 	mvn.w	r2, #4
 800569c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2202      	movs	r2, #2
 80056a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	699b      	ldr	r3, [r3, #24]
 80056aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d003      	beq.n	80056ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f7fc f91a 	bl	80018ec <HAL_TIM_IC_CaptureCallback>
 80056b8:	e005      	b.n	80056c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f000 fa48 	bl	8005b50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f000 fa4e 	bl	8005b62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	691b      	ldr	r3, [r3, #16]
 80056d2:	f003 0308 	and.w	r3, r3, #8
 80056d6:	2b08      	cmp	r3, #8
 80056d8:	d122      	bne.n	8005720 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	f003 0308 	and.w	r3, r3, #8
 80056e4:	2b08      	cmp	r3, #8
 80056e6:	d11b      	bne.n	8005720 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f06f 0208 	mvn.w	r2, #8
 80056f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2204      	movs	r2, #4
 80056f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	69db      	ldr	r3, [r3, #28]
 80056fe:	f003 0303 	and.w	r3, r3, #3
 8005702:	2b00      	cmp	r3, #0
 8005704:	d003      	beq.n	800570e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f7fc f8f0 	bl	80018ec <HAL_TIM_IC_CaptureCallback>
 800570c:	e005      	b.n	800571a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f000 fa1e 	bl	8005b50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f000 fa24 	bl	8005b62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	691b      	ldr	r3, [r3, #16]
 8005726:	f003 0310 	and.w	r3, r3, #16
 800572a:	2b10      	cmp	r3, #16
 800572c:	d122      	bne.n	8005774 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	f003 0310 	and.w	r3, r3, #16
 8005738:	2b10      	cmp	r3, #16
 800573a:	d11b      	bne.n	8005774 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f06f 0210 	mvn.w	r2, #16
 8005744:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2208      	movs	r2, #8
 800574a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	69db      	ldr	r3, [r3, #28]
 8005752:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005756:	2b00      	cmp	r3, #0
 8005758:	d003      	beq.n	8005762 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f7fc f8c6 	bl	80018ec <HAL_TIM_IC_CaptureCallback>
 8005760:	e005      	b.n	800576e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f000 f9f4 	bl	8005b50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f000 f9fa 	bl	8005b62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	691b      	ldr	r3, [r3, #16]
 800577a:	f003 0301 	and.w	r3, r3, #1
 800577e:	2b01      	cmp	r3, #1
 8005780:	d10e      	bne.n	80057a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	f003 0301 	and.w	r3, r3, #1
 800578c:	2b01      	cmp	r3, #1
 800578e:	d107      	bne.n	80057a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f06f 0201 	mvn.w	r2, #1
 8005798:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f000 f9cf 	bl	8005b3e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	691b      	ldr	r3, [r3, #16]
 80057a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057aa:	2b80      	cmp	r3, #128	; 0x80
 80057ac:	d10e      	bne.n	80057cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057b8:	2b80      	cmp	r3, #128	; 0x80
 80057ba:	d107      	bne.n	80057cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80057c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f000 fd3a 	bl	8006240 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	691b      	ldr	r3, [r3, #16]
 80057d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057d6:	2b40      	cmp	r3, #64	; 0x40
 80057d8:	d10e      	bne.n	80057f8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057e4:	2b40      	cmp	r3, #64	; 0x40
 80057e6:	d107      	bne.n	80057f8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80057f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 f9be 	bl	8005b74 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	691b      	ldr	r3, [r3, #16]
 80057fe:	f003 0320 	and.w	r3, r3, #32
 8005802:	2b20      	cmp	r3, #32
 8005804:	d10e      	bne.n	8005824 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	68db      	ldr	r3, [r3, #12]
 800580c:	f003 0320 	and.w	r3, r3, #32
 8005810:	2b20      	cmp	r3, #32
 8005812:	d107      	bne.n	8005824 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f06f 0220 	mvn.w	r2, #32
 800581c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f000 fd05 	bl	800622e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005824:	bf00      	nop
 8005826:	3708      	adds	r7, #8
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}

0800582c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b086      	sub	sp, #24
 8005830:	af00      	add	r7, sp, #0
 8005832:	60f8      	str	r0, [r7, #12]
 8005834:	60b9      	str	r1, [r7, #8]
 8005836:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005838:	2300      	movs	r3, #0
 800583a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005842:	2b01      	cmp	r3, #1
 8005844:	d101      	bne.n	800584a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005846:	2302      	movs	r3, #2
 8005848:	e0ae      	b.n	80059a8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2201      	movs	r2, #1
 800584e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2b0c      	cmp	r3, #12
 8005856:	f200 809f 	bhi.w	8005998 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800585a:	a201      	add	r2, pc, #4	; (adr r2, 8005860 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800585c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005860:	08005895 	.word	0x08005895
 8005864:	08005999 	.word	0x08005999
 8005868:	08005999 	.word	0x08005999
 800586c:	08005999 	.word	0x08005999
 8005870:	080058d5 	.word	0x080058d5
 8005874:	08005999 	.word	0x08005999
 8005878:	08005999 	.word	0x08005999
 800587c:	08005999 	.word	0x08005999
 8005880:	08005917 	.word	0x08005917
 8005884:	08005999 	.word	0x08005999
 8005888:	08005999 	.word	0x08005999
 800588c:	08005999 	.word	0x08005999
 8005890:	08005957 	.word	0x08005957
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	68b9      	ldr	r1, [r7, #8]
 800589a:	4618      	mov	r0, r3
 800589c:	f000 f9d6 	bl	8005c4c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	699a      	ldr	r2, [r3, #24]
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f042 0208 	orr.w	r2, r2, #8
 80058ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	699a      	ldr	r2, [r3, #24]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f022 0204 	bic.w	r2, r2, #4
 80058be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	6999      	ldr	r1, [r3, #24]
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	691a      	ldr	r2, [r3, #16]
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	430a      	orrs	r2, r1
 80058d0:	619a      	str	r2, [r3, #24]
      break;
 80058d2:	e064      	b.n	800599e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	68b9      	ldr	r1, [r7, #8]
 80058da:	4618      	mov	r0, r3
 80058dc:	f000 fa1c 	bl	8005d18 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	699a      	ldr	r2, [r3, #24]
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	699a      	ldr	r2, [r3, #24]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	6999      	ldr	r1, [r3, #24]
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	691b      	ldr	r3, [r3, #16]
 800590a:	021a      	lsls	r2, r3, #8
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	430a      	orrs	r2, r1
 8005912:	619a      	str	r2, [r3, #24]
      break;
 8005914:	e043      	b.n	800599e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	68b9      	ldr	r1, [r7, #8]
 800591c:	4618      	mov	r0, r3
 800591e:	f000 fa65 	bl	8005dec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	69da      	ldr	r2, [r3, #28]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f042 0208 	orr.w	r2, r2, #8
 8005930:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	69da      	ldr	r2, [r3, #28]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f022 0204 	bic.w	r2, r2, #4
 8005940:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	69d9      	ldr	r1, [r3, #28]
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	691a      	ldr	r2, [r3, #16]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	430a      	orrs	r2, r1
 8005952:	61da      	str	r2, [r3, #28]
      break;
 8005954:	e023      	b.n	800599e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	68b9      	ldr	r1, [r7, #8]
 800595c:	4618      	mov	r0, r3
 800595e:	f000 faaf 	bl	8005ec0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	69da      	ldr	r2, [r3, #28]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005970:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	69da      	ldr	r2, [r3, #28]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005980:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	69d9      	ldr	r1, [r3, #28]
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	691b      	ldr	r3, [r3, #16]
 800598c:	021a      	lsls	r2, r3, #8
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	430a      	orrs	r2, r1
 8005994:	61da      	str	r2, [r3, #28]
      break;
 8005996:	e002      	b.n	800599e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	75fb      	strb	r3, [r7, #23]
      break;
 800599c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2200      	movs	r2, #0
 80059a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80059a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3718      	adds	r7, #24
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}

080059b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b084      	sub	sp, #16
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059ba:	2300      	movs	r3, #0
 80059bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d101      	bne.n	80059cc <HAL_TIM_ConfigClockSource+0x1c>
 80059c8:	2302      	movs	r3, #2
 80059ca:	e0b4      	b.n	8005b36 <HAL_TIM_ConfigClockSource+0x186>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2202      	movs	r2, #2
 80059d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80059ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	68ba      	ldr	r2, [r7, #8]
 80059fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a04:	d03e      	beq.n	8005a84 <HAL_TIM_ConfigClockSource+0xd4>
 8005a06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a0a:	f200 8087 	bhi.w	8005b1c <HAL_TIM_ConfigClockSource+0x16c>
 8005a0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a12:	f000 8086 	beq.w	8005b22 <HAL_TIM_ConfigClockSource+0x172>
 8005a16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a1a:	d87f      	bhi.n	8005b1c <HAL_TIM_ConfigClockSource+0x16c>
 8005a1c:	2b70      	cmp	r3, #112	; 0x70
 8005a1e:	d01a      	beq.n	8005a56 <HAL_TIM_ConfigClockSource+0xa6>
 8005a20:	2b70      	cmp	r3, #112	; 0x70
 8005a22:	d87b      	bhi.n	8005b1c <HAL_TIM_ConfigClockSource+0x16c>
 8005a24:	2b60      	cmp	r3, #96	; 0x60
 8005a26:	d050      	beq.n	8005aca <HAL_TIM_ConfigClockSource+0x11a>
 8005a28:	2b60      	cmp	r3, #96	; 0x60
 8005a2a:	d877      	bhi.n	8005b1c <HAL_TIM_ConfigClockSource+0x16c>
 8005a2c:	2b50      	cmp	r3, #80	; 0x50
 8005a2e:	d03c      	beq.n	8005aaa <HAL_TIM_ConfigClockSource+0xfa>
 8005a30:	2b50      	cmp	r3, #80	; 0x50
 8005a32:	d873      	bhi.n	8005b1c <HAL_TIM_ConfigClockSource+0x16c>
 8005a34:	2b40      	cmp	r3, #64	; 0x40
 8005a36:	d058      	beq.n	8005aea <HAL_TIM_ConfigClockSource+0x13a>
 8005a38:	2b40      	cmp	r3, #64	; 0x40
 8005a3a:	d86f      	bhi.n	8005b1c <HAL_TIM_ConfigClockSource+0x16c>
 8005a3c:	2b30      	cmp	r3, #48	; 0x30
 8005a3e:	d064      	beq.n	8005b0a <HAL_TIM_ConfigClockSource+0x15a>
 8005a40:	2b30      	cmp	r3, #48	; 0x30
 8005a42:	d86b      	bhi.n	8005b1c <HAL_TIM_ConfigClockSource+0x16c>
 8005a44:	2b20      	cmp	r3, #32
 8005a46:	d060      	beq.n	8005b0a <HAL_TIM_ConfigClockSource+0x15a>
 8005a48:	2b20      	cmp	r3, #32
 8005a4a:	d867      	bhi.n	8005b1c <HAL_TIM_ConfigClockSource+0x16c>
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d05c      	beq.n	8005b0a <HAL_TIM_ConfigClockSource+0x15a>
 8005a50:	2b10      	cmp	r3, #16
 8005a52:	d05a      	beq.n	8005b0a <HAL_TIM_ConfigClockSource+0x15a>
 8005a54:	e062      	b.n	8005b1c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005a66:	f000 faf0 	bl	800604a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005a78:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	68ba      	ldr	r2, [r7, #8]
 8005a80:	609a      	str	r2, [r3, #8]
      break;
 8005a82:	e04f      	b.n	8005b24 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005a94:	f000 fad9 	bl	800604a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	689a      	ldr	r2, [r3, #8]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005aa6:	609a      	str	r2, [r3, #8]
      break;
 8005aa8:	e03c      	b.n	8005b24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	f000 fa50 	bl	8005f5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	2150      	movs	r1, #80	; 0x50
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f000 faa7 	bl	8006016 <TIM_ITRx_SetConfig>
      break;
 8005ac8:	e02c      	b.n	8005b24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	f000 fa6e 	bl	8005fb8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	2160      	movs	r1, #96	; 0x60
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f000 fa97 	bl	8006016 <TIM_ITRx_SetConfig>
      break;
 8005ae8:	e01c      	b.n	8005b24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005af6:	461a      	mov	r2, r3
 8005af8:	f000 fa30 	bl	8005f5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	2140      	movs	r1, #64	; 0x40
 8005b02:	4618      	mov	r0, r3
 8005b04:	f000 fa87 	bl	8006016 <TIM_ITRx_SetConfig>
      break;
 8005b08:	e00c      	b.n	8005b24 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4619      	mov	r1, r3
 8005b14:	4610      	mov	r0, r2
 8005b16:	f000 fa7e 	bl	8006016 <TIM_ITRx_SetConfig>
      break;
 8005b1a:	e003      	b.n	8005b24 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	73fb      	strb	r3, [r7, #15]
      break;
 8005b20:	e000      	b.n	8005b24 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005b22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3710      	adds	r7, #16
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}

08005b3e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b3e:	b480      	push	{r7}
 8005b40:	b083      	sub	sp, #12
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005b46:	bf00      	nop
 8005b48:	370c      	adds	r7, #12
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bc80      	pop	{r7}
 8005b4e:	4770      	bx	lr

08005b50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b083      	sub	sp, #12
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b58:	bf00      	nop
 8005b5a:	370c      	adds	r7, #12
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bc80      	pop	{r7}
 8005b60:	4770      	bx	lr

08005b62 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b62:	b480      	push	{r7}
 8005b64:	b083      	sub	sp, #12
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b6a:	bf00      	nop
 8005b6c:	370c      	adds	r7, #12
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bc80      	pop	{r7}
 8005b72:	4770      	bx	lr

08005b74 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b083      	sub	sp, #12
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b7c:	bf00      	nop
 8005b7e:	370c      	adds	r7, #12
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bc80      	pop	{r7}
 8005b84:	4770      	bx	lr
	...

08005b88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b085      	sub	sp, #20
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4a29      	ldr	r2, [pc, #164]	; (8005c40 <TIM_Base_SetConfig+0xb8>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d00b      	beq.n	8005bb8 <TIM_Base_SetConfig+0x30>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ba6:	d007      	beq.n	8005bb8 <TIM_Base_SetConfig+0x30>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	4a26      	ldr	r2, [pc, #152]	; (8005c44 <TIM_Base_SetConfig+0xbc>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d003      	beq.n	8005bb8 <TIM_Base_SetConfig+0x30>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	4a25      	ldr	r2, [pc, #148]	; (8005c48 <TIM_Base_SetConfig+0xc0>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d108      	bne.n	8005bca <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	68fa      	ldr	r2, [r7, #12]
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	4a1c      	ldr	r2, [pc, #112]	; (8005c40 <TIM_Base_SetConfig+0xb8>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d00b      	beq.n	8005bea <TIM_Base_SetConfig+0x62>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bd8:	d007      	beq.n	8005bea <TIM_Base_SetConfig+0x62>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	4a19      	ldr	r2, [pc, #100]	; (8005c44 <TIM_Base_SetConfig+0xbc>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d003      	beq.n	8005bea <TIM_Base_SetConfig+0x62>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	4a18      	ldr	r2, [pc, #96]	; (8005c48 <TIM_Base_SetConfig+0xc0>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d108      	bne.n	8005bfc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bf0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	68db      	ldr	r3, [r3, #12]
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	695b      	ldr	r3, [r3, #20]
 8005c06:	4313      	orrs	r3, r2
 8005c08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	68fa      	ldr	r2, [r7, #12]
 8005c0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	689a      	ldr	r2, [r3, #8]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	4a07      	ldr	r2, [pc, #28]	; (8005c40 <TIM_Base_SetConfig+0xb8>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d103      	bne.n	8005c30 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	691a      	ldr	r2, [r3, #16]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2201      	movs	r2, #1
 8005c34:	615a      	str	r2, [r3, #20]
}
 8005c36:	bf00      	nop
 8005c38:	3714      	adds	r7, #20
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bc80      	pop	{r7}
 8005c3e:	4770      	bx	lr
 8005c40:	40012c00 	.word	0x40012c00
 8005c44:	40000400 	.word	0x40000400
 8005c48:	40000800 	.word	0x40000800

08005c4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b087      	sub	sp, #28
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6a1b      	ldr	r3, [r3, #32]
 8005c5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6a1b      	ldr	r3, [r3, #32]
 8005c60:	f023 0201 	bic.w	r2, r3, #1
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	699b      	ldr	r3, [r3, #24]
 8005c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f023 0303 	bic.w	r3, r3, #3
 8005c82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	68fa      	ldr	r2, [r7, #12]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	f023 0302 	bic.w	r3, r3, #2
 8005c94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	697a      	ldr	r2, [r7, #20]
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	4a1c      	ldr	r2, [pc, #112]	; (8005d14 <TIM_OC1_SetConfig+0xc8>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d10c      	bne.n	8005cc2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	f023 0308 	bic.w	r3, r3, #8
 8005cae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	697a      	ldr	r2, [r7, #20]
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	f023 0304 	bic.w	r3, r3, #4
 8005cc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4a13      	ldr	r2, [pc, #76]	; (8005d14 <TIM_OC1_SetConfig+0xc8>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d111      	bne.n	8005cee <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005cd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005cd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	695b      	ldr	r3, [r3, #20]
 8005cde:	693a      	ldr	r2, [r7, #16]
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	699b      	ldr	r3, [r3, #24]
 8005ce8:	693a      	ldr	r2, [r7, #16]
 8005cea:	4313      	orrs	r3, r2
 8005cec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	693a      	ldr	r2, [r7, #16]
 8005cf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	68fa      	ldr	r2, [r7, #12]
 8005cf8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	685a      	ldr	r2, [r3, #4]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	697a      	ldr	r2, [r7, #20]
 8005d06:	621a      	str	r2, [r3, #32]
}
 8005d08:	bf00      	nop
 8005d0a:	371c      	adds	r7, #28
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bc80      	pop	{r7}
 8005d10:	4770      	bx	lr
 8005d12:	bf00      	nop
 8005d14:	40012c00 	.word	0x40012c00

08005d18 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b087      	sub	sp, #28
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a1b      	ldr	r3, [r3, #32]
 8005d26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6a1b      	ldr	r3, [r3, #32]
 8005d2c:	f023 0210 	bic.w	r2, r3, #16
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	699b      	ldr	r3, [r3, #24]
 8005d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	021b      	lsls	r3, r3, #8
 8005d56:	68fa      	ldr	r2, [r7, #12]
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	f023 0320 	bic.w	r3, r3, #32
 8005d62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	011b      	lsls	r3, r3, #4
 8005d6a:	697a      	ldr	r2, [r7, #20]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	4a1d      	ldr	r2, [pc, #116]	; (8005de8 <TIM_OC2_SetConfig+0xd0>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d10d      	bne.n	8005d94 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	011b      	lsls	r3, r3, #4
 8005d86:	697a      	ldr	r2, [r7, #20]
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d92:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	4a14      	ldr	r2, [pc, #80]	; (8005de8 <TIM_OC2_SetConfig+0xd0>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d113      	bne.n	8005dc4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005da2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005daa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	695b      	ldr	r3, [r3, #20]
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	693a      	ldr	r2, [r7, #16]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	699b      	ldr	r3, [r3, #24]
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	693a      	ldr	r2, [r7, #16]
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	693a      	ldr	r2, [r7, #16]
 8005dc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	68fa      	ldr	r2, [r7, #12]
 8005dce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	685a      	ldr	r2, [r3, #4]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	697a      	ldr	r2, [r7, #20]
 8005ddc:	621a      	str	r2, [r3, #32]
}
 8005dde:	bf00      	nop
 8005de0:	371c      	adds	r7, #28
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bc80      	pop	{r7}
 8005de6:	4770      	bx	lr
 8005de8:	40012c00 	.word	0x40012c00

08005dec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b087      	sub	sp, #28
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6a1b      	ldr	r3, [r3, #32]
 8005dfa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6a1b      	ldr	r3, [r3, #32]
 8005e00:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	69db      	ldr	r3, [r3, #28]
 8005e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f023 0303 	bic.w	r3, r3, #3
 8005e22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	68fa      	ldr	r2, [r7, #12]
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	021b      	lsls	r3, r3, #8
 8005e3c:	697a      	ldr	r2, [r7, #20]
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	4a1d      	ldr	r2, [pc, #116]	; (8005ebc <TIM_OC3_SetConfig+0xd0>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d10d      	bne.n	8005e66 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	68db      	ldr	r3, [r3, #12]
 8005e56:	021b      	lsls	r3, r3, #8
 8005e58:	697a      	ldr	r2, [r7, #20]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4a14      	ldr	r2, [pc, #80]	; (8005ebc <TIM_OC3_SetConfig+0xd0>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d113      	bne.n	8005e96 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	695b      	ldr	r3, [r3, #20]
 8005e82:	011b      	lsls	r3, r3, #4
 8005e84:	693a      	ldr	r2, [r7, #16]
 8005e86:	4313      	orrs	r3, r2
 8005e88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	699b      	ldr	r3, [r3, #24]
 8005e8e:	011b      	lsls	r3, r3, #4
 8005e90:	693a      	ldr	r2, [r7, #16]
 8005e92:	4313      	orrs	r3, r2
 8005e94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	693a      	ldr	r2, [r7, #16]
 8005e9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	68fa      	ldr	r2, [r7, #12]
 8005ea0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	685a      	ldr	r2, [r3, #4]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	697a      	ldr	r2, [r7, #20]
 8005eae:	621a      	str	r2, [r3, #32]
}
 8005eb0:	bf00      	nop
 8005eb2:	371c      	adds	r7, #28
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bc80      	pop	{r7}
 8005eb8:	4770      	bx	lr
 8005eba:	bf00      	nop
 8005ebc:	40012c00 	.word	0x40012c00

08005ec0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b087      	sub	sp, #28
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6a1b      	ldr	r3, [r3, #32]
 8005ece:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6a1b      	ldr	r3, [r3, #32]
 8005ed4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	69db      	ldr	r3, [r3, #28]
 8005ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005eee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ef6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	021b      	lsls	r3, r3, #8
 8005efe:	68fa      	ldr	r2, [r7, #12]
 8005f00:	4313      	orrs	r3, r2
 8005f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	031b      	lsls	r3, r3, #12
 8005f12:	693a      	ldr	r2, [r7, #16]
 8005f14:	4313      	orrs	r3, r2
 8005f16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	4a0f      	ldr	r2, [pc, #60]	; (8005f58 <TIM_OC4_SetConfig+0x98>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d109      	bne.n	8005f34 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f26:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	695b      	ldr	r3, [r3, #20]
 8005f2c:	019b      	lsls	r3, r3, #6
 8005f2e:	697a      	ldr	r2, [r7, #20]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	697a      	ldr	r2, [r7, #20]
 8005f38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	68fa      	ldr	r2, [r7, #12]
 8005f3e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	685a      	ldr	r2, [r3, #4]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	693a      	ldr	r2, [r7, #16]
 8005f4c:	621a      	str	r2, [r3, #32]
}
 8005f4e:	bf00      	nop
 8005f50:	371c      	adds	r7, #28
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bc80      	pop	{r7}
 8005f56:	4770      	bx	lr
 8005f58:	40012c00 	.word	0x40012c00

08005f5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b087      	sub	sp, #28
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	60f8      	str	r0, [r7, #12]
 8005f64:	60b9      	str	r1, [r7, #8]
 8005f66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	6a1b      	ldr	r3, [r3, #32]
 8005f6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	6a1b      	ldr	r3, [r3, #32]
 8005f72:	f023 0201 	bic.w	r2, r3, #1
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	699b      	ldr	r3, [r3, #24]
 8005f7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	011b      	lsls	r3, r3, #4
 8005f8c:	693a      	ldr	r2, [r7, #16]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	f023 030a 	bic.w	r3, r3, #10
 8005f98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f9a:	697a      	ldr	r2, [r7, #20]
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	693a      	ldr	r2, [r7, #16]
 8005fa6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	697a      	ldr	r2, [r7, #20]
 8005fac:	621a      	str	r2, [r3, #32]
}
 8005fae:	bf00      	nop
 8005fb0:	371c      	adds	r7, #28
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bc80      	pop	{r7}
 8005fb6:	4770      	bx	lr

08005fb8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b087      	sub	sp, #28
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	60f8      	str	r0, [r7, #12]
 8005fc0:	60b9      	str	r1, [r7, #8]
 8005fc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	6a1b      	ldr	r3, [r3, #32]
 8005fc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	6a1b      	ldr	r3, [r3, #32]
 8005fce:	f023 0210 	bic.w	r2, r3, #16
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	699b      	ldr	r3, [r3, #24]
 8005fda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005fe2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	031b      	lsls	r3, r3, #12
 8005fe8:	693a      	ldr	r2, [r7, #16]
 8005fea:	4313      	orrs	r3, r2
 8005fec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005ff4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	011b      	lsls	r3, r3, #4
 8005ffa:	697a      	ldr	r2, [r7, #20]
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	693a      	ldr	r2, [r7, #16]
 8006004:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	697a      	ldr	r2, [r7, #20]
 800600a:	621a      	str	r2, [r3, #32]
}
 800600c:	bf00      	nop
 800600e:	371c      	adds	r7, #28
 8006010:	46bd      	mov	sp, r7
 8006012:	bc80      	pop	{r7}
 8006014:	4770      	bx	lr

08006016 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006016:	b480      	push	{r7}
 8006018:	b085      	sub	sp, #20
 800601a:	af00      	add	r7, sp, #0
 800601c:	6078      	str	r0, [r7, #4]
 800601e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800602c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800602e:	683a      	ldr	r2, [r7, #0]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	4313      	orrs	r3, r2
 8006034:	f043 0307 	orr.w	r3, r3, #7
 8006038:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	68fa      	ldr	r2, [r7, #12]
 800603e:	609a      	str	r2, [r3, #8]
}
 8006040:	bf00      	nop
 8006042:	3714      	adds	r7, #20
 8006044:	46bd      	mov	sp, r7
 8006046:	bc80      	pop	{r7}
 8006048:	4770      	bx	lr

0800604a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800604a:	b480      	push	{r7}
 800604c:	b087      	sub	sp, #28
 800604e:	af00      	add	r7, sp, #0
 8006050:	60f8      	str	r0, [r7, #12]
 8006052:	60b9      	str	r1, [r7, #8]
 8006054:	607a      	str	r2, [r7, #4]
 8006056:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006064:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	021a      	lsls	r2, r3, #8
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	431a      	orrs	r2, r3
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	4313      	orrs	r3, r2
 8006072:	697a      	ldr	r2, [r7, #20]
 8006074:	4313      	orrs	r3, r2
 8006076:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	697a      	ldr	r2, [r7, #20]
 800607c:	609a      	str	r2, [r3, #8]
}
 800607e:	bf00      	nop
 8006080:	371c      	adds	r7, #28
 8006082:	46bd      	mov	sp, r7
 8006084:	bc80      	pop	{r7}
 8006086:	4770      	bx	lr

08006088 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006088:	b480      	push	{r7}
 800608a:	b087      	sub	sp, #28
 800608c:	af00      	add	r7, sp, #0
 800608e:	60f8      	str	r0, [r7, #12]
 8006090:	60b9      	str	r1, [r7, #8]
 8006092:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	f003 031f 	and.w	r3, r3, #31
 800609a:	2201      	movs	r2, #1
 800609c:	fa02 f303 	lsl.w	r3, r2, r3
 80060a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	6a1a      	ldr	r2, [r3, #32]
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	43db      	mvns	r3, r3
 80060aa:	401a      	ands	r2, r3
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	6a1a      	ldr	r2, [r3, #32]
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	f003 031f 	and.w	r3, r3, #31
 80060ba:	6879      	ldr	r1, [r7, #4]
 80060bc:	fa01 f303 	lsl.w	r3, r1, r3
 80060c0:	431a      	orrs	r2, r3
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	621a      	str	r2, [r3, #32]
}
 80060c6:	bf00      	nop
 80060c8:	371c      	adds	r7, #28
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bc80      	pop	{r7}
 80060ce:	4770      	bx	lr

080060d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b085      	sub	sp, #20
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d101      	bne.n	80060e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80060e4:	2302      	movs	r3, #2
 80060e6:	e046      	b.n	8006176 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2201      	movs	r2, #1
 80060ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2202      	movs	r2, #2
 80060f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800610e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	68fa      	ldr	r2, [r7, #12]
 8006116:	4313      	orrs	r3, r2
 8006118:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	68fa      	ldr	r2, [r7, #12]
 8006120:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a16      	ldr	r2, [pc, #88]	; (8006180 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d00e      	beq.n	800614a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006134:	d009      	beq.n	800614a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a12      	ldr	r2, [pc, #72]	; (8006184 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d004      	beq.n	800614a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a10      	ldr	r2, [pc, #64]	; (8006188 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d10c      	bne.n	8006164 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006150:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	68ba      	ldr	r2, [r7, #8]
 8006158:	4313      	orrs	r3, r2
 800615a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	68ba      	ldr	r2, [r7, #8]
 8006162:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2201      	movs	r2, #1
 8006168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2200      	movs	r2, #0
 8006170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006174:	2300      	movs	r3, #0
}
 8006176:	4618      	mov	r0, r3
 8006178:	3714      	adds	r7, #20
 800617a:	46bd      	mov	sp, r7
 800617c:	bc80      	pop	{r7}
 800617e:	4770      	bx	lr
 8006180:	40012c00 	.word	0x40012c00
 8006184:	40000400 	.word	0x40000400
 8006188:	40000800 	.word	0x40000800

0800618c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800618c:	b480      	push	{r7}
 800618e:	b085      	sub	sp, #20
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006196:	2300      	movs	r3, #0
 8006198:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d101      	bne.n	80061a8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80061a4:	2302      	movs	r3, #2
 80061a6:	e03d      	b.n	8006224 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	68db      	ldr	r3, [r3, #12]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	4313      	orrs	r3, r2
 80061ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	4313      	orrs	r3, r2
 80061d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4313      	orrs	r3, r2
 80061e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	691b      	ldr	r3, [r3, #16]
 80061f2:	4313      	orrs	r3, r2
 80061f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	695b      	ldr	r3, [r3, #20]
 8006200:	4313      	orrs	r3, r2
 8006202:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	69db      	ldr	r3, [r3, #28]
 800620e:	4313      	orrs	r3, r2
 8006210:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	68fa      	ldr	r2, [r7, #12]
 8006218:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006222:	2300      	movs	r3, #0
}
 8006224:	4618      	mov	r0, r3
 8006226:	3714      	adds	r7, #20
 8006228:	46bd      	mov	sp, r7
 800622a:	bc80      	pop	{r7}
 800622c:	4770      	bx	lr

0800622e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800622e:	b480      	push	{r7}
 8006230:	b083      	sub	sp, #12
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006236:	bf00      	nop
 8006238:	370c      	adds	r7, #12
 800623a:	46bd      	mov	sp, r7
 800623c:	bc80      	pop	{r7}
 800623e:	4770      	bx	lr

08006240 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006240:	b480      	push	{r7}
 8006242:	b083      	sub	sp, #12
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006248:	bf00      	nop
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	bc80      	pop	{r7}
 8006250:	4770      	bx	lr

08006252 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006252:	b580      	push	{r7, lr}
 8006254:	b082      	sub	sp, #8
 8006256:	af00      	add	r7, sp, #0
 8006258:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d101      	bne.n	8006264 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	e042      	b.n	80062ea <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800626a:	b2db      	uxtb	r3, r3
 800626c:	2b00      	cmp	r3, #0
 800626e:	d106      	bne.n	800627e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f7fc fd71 	bl	8002d60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2224      	movs	r2, #36	; 0x24
 8006282:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	68da      	ldr	r2, [r3, #12]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006294:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f000 fd70 	bl	8006d7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	691a      	ldr	r2, [r3, #16]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80062aa:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	695a      	ldr	r2, [r3, #20]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80062ba:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	68da      	ldr	r2, [r3, #12]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80062ca:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2220      	movs	r2, #32
 80062d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2220      	movs	r2, #32
 80062de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2200      	movs	r2, #0
 80062e6:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80062e8:	2300      	movs	r3, #0
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3708      	adds	r7, #8
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}

080062f2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062f2:	b580      	push	{r7, lr}
 80062f4:	b08a      	sub	sp, #40	; 0x28
 80062f6:	af02      	add	r7, sp, #8
 80062f8:	60f8      	str	r0, [r7, #12]
 80062fa:	60b9      	str	r1, [r7, #8]
 80062fc:	603b      	str	r3, [r7, #0]
 80062fe:	4613      	mov	r3, r2
 8006300:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006302:	2300      	movs	r3, #0
 8006304:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800630c:	b2db      	uxtb	r3, r3
 800630e:	2b20      	cmp	r3, #32
 8006310:	d16d      	bne.n	80063ee <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d002      	beq.n	800631e <HAL_UART_Transmit+0x2c>
 8006318:	88fb      	ldrh	r3, [r7, #6]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d101      	bne.n	8006322 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	e066      	b.n	80063f0 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2200      	movs	r2, #0
 8006326:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2221      	movs	r2, #33	; 0x21
 800632c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006330:	f7fc ff0c 	bl	800314c <HAL_GetTick>
 8006334:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	88fa      	ldrh	r2, [r7, #6]
 800633a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	88fa      	ldrh	r2, [r7, #6]
 8006340:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800634a:	d108      	bne.n	800635e <HAL_UART_Transmit+0x6c>
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	691b      	ldr	r3, [r3, #16]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d104      	bne.n	800635e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006354:	2300      	movs	r3, #0
 8006356:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	61bb      	str	r3, [r7, #24]
 800635c:	e003      	b.n	8006366 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006362:	2300      	movs	r3, #0
 8006364:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006366:	e02a      	b.n	80063be <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	9300      	str	r3, [sp, #0]
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	2200      	movs	r2, #0
 8006370:	2180      	movs	r1, #128	; 0x80
 8006372:	68f8      	ldr	r0, [r7, #12]
 8006374:	f000 faf8 	bl	8006968 <UART_WaitOnFlagUntilTimeout>
 8006378:	4603      	mov	r3, r0
 800637a:	2b00      	cmp	r3, #0
 800637c:	d001      	beq.n	8006382 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800637e:	2303      	movs	r3, #3
 8006380:	e036      	b.n	80063f0 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006382:	69fb      	ldr	r3, [r7, #28]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d10b      	bne.n	80063a0 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006388:	69bb      	ldr	r3, [r7, #24]
 800638a:	881b      	ldrh	r3, [r3, #0]
 800638c:	461a      	mov	r2, r3
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006396:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006398:	69bb      	ldr	r3, [r7, #24]
 800639a:	3302      	adds	r3, #2
 800639c:	61bb      	str	r3, [r7, #24]
 800639e:	e007      	b.n	80063b0 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80063a0:	69fb      	ldr	r3, [r7, #28]
 80063a2:	781a      	ldrb	r2, [r3, #0]
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80063aa:	69fb      	ldr	r3, [r7, #28]
 80063ac:	3301      	adds	r3, #1
 80063ae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	3b01      	subs	r3, #1
 80063b8:	b29a      	uxth	r2, r3
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d1cf      	bne.n	8006368 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	9300      	str	r3, [sp, #0]
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	2200      	movs	r2, #0
 80063d0:	2140      	movs	r1, #64	; 0x40
 80063d2:	68f8      	ldr	r0, [r7, #12]
 80063d4:	f000 fac8 	bl	8006968 <UART_WaitOnFlagUntilTimeout>
 80063d8:	4603      	mov	r3, r0
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d001      	beq.n	80063e2 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80063de:	2303      	movs	r3, #3
 80063e0:	e006      	b.n	80063f0 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2220      	movs	r2, #32
 80063e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80063ea:	2300      	movs	r3, #0
 80063ec:	e000      	b.n	80063f0 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80063ee:	2302      	movs	r3, #2
  }
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3720      	adds	r7, #32
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}

080063f8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b0ba      	sub	sp, #232	; 0xe8
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	68db      	ldr	r3, [r3, #12]
 8006410:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	695b      	ldr	r3, [r3, #20]
 800641a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800641e:	2300      	movs	r3, #0
 8006420:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006424:	2300      	movs	r3, #0
 8006426:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800642a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800642e:	f003 030f 	and.w	r3, r3, #15
 8006432:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006436:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800643a:	2b00      	cmp	r3, #0
 800643c:	d10f      	bne.n	800645e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800643e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006442:	f003 0320 	and.w	r3, r3, #32
 8006446:	2b00      	cmp	r3, #0
 8006448:	d009      	beq.n	800645e <HAL_UART_IRQHandler+0x66>
 800644a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800644e:	f003 0320 	and.w	r3, r3, #32
 8006452:	2b00      	cmp	r3, #0
 8006454:	d003      	beq.n	800645e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f000 fbd1 	bl	8006bfe <UART_Receive_IT>
      return;
 800645c:	e25b      	b.n	8006916 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800645e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006462:	2b00      	cmp	r3, #0
 8006464:	f000 80de 	beq.w	8006624 <HAL_UART_IRQHandler+0x22c>
 8006468:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800646c:	f003 0301 	and.w	r3, r3, #1
 8006470:	2b00      	cmp	r3, #0
 8006472:	d106      	bne.n	8006482 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006474:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006478:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800647c:	2b00      	cmp	r3, #0
 800647e:	f000 80d1 	beq.w	8006624 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006482:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006486:	f003 0301 	and.w	r3, r3, #1
 800648a:	2b00      	cmp	r3, #0
 800648c:	d00b      	beq.n	80064a6 <HAL_UART_IRQHandler+0xae>
 800648e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006496:	2b00      	cmp	r3, #0
 8006498:	d005      	beq.n	80064a6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800649e:	f043 0201 	orr.w	r2, r3, #1
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80064a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064aa:	f003 0304 	and.w	r3, r3, #4
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d00b      	beq.n	80064ca <HAL_UART_IRQHandler+0xd2>
 80064b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064b6:	f003 0301 	and.w	r3, r3, #1
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d005      	beq.n	80064ca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064c2:	f043 0202 	orr.w	r2, r3, #2
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80064ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064ce:	f003 0302 	and.w	r3, r3, #2
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d00b      	beq.n	80064ee <HAL_UART_IRQHandler+0xf6>
 80064d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064da:	f003 0301 	and.w	r3, r3, #1
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d005      	beq.n	80064ee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064e6:	f043 0204 	orr.w	r2, r3, #4
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80064ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064f2:	f003 0308 	and.w	r3, r3, #8
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d011      	beq.n	800651e <HAL_UART_IRQHandler+0x126>
 80064fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064fe:	f003 0320 	and.w	r3, r3, #32
 8006502:	2b00      	cmp	r3, #0
 8006504:	d105      	bne.n	8006512 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006506:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800650a:	f003 0301 	and.w	r3, r3, #1
 800650e:	2b00      	cmp	r3, #0
 8006510:	d005      	beq.n	800651e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006516:	f043 0208 	orr.w	r2, r3, #8
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006522:	2b00      	cmp	r3, #0
 8006524:	f000 81f2 	beq.w	800690c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006528:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800652c:	f003 0320 	and.w	r3, r3, #32
 8006530:	2b00      	cmp	r3, #0
 8006532:	d008      	beq.n	8006546 <HAL_UART_IRQHandler+0x14e>
 8006534:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006538:	f003 0320 	and.w	r3, r3, #32
 800653c:	2b00      	cmp	r3, #0
 800653e:	d002      	beq.n	8006546 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f000 fb5c 	bl	8006bfe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	695b      	ldr	r3, [r3, #20]
 800654c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006550:	2b00      	cmp	r3, #0
 8006552:	bf14      	ite	ne
 8006554:	2301      	movne	r3, #1
 8006556:	2300      	moveq	r3, #0
 8006558:	b2db      	uxtb	r3, r3
 800655a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006562:	f003 0308 	and.w	r3, r3, #8
 8006566:	2b00      	cmp	r3, #0
 8006568:	d103      	bne.n	8006572 <HAL_UART_IRQHandler+0x17a>
 800656a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800656e:	2b00      	cmp	r3, #0
 8006570:	d04f      	beq.n	8006612 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f000 fa66 	bl	8006a44 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	695b      	ldr	r3, [r3, #20]
 800657e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006582:	2b00      	cmp	r3, #0
 8006584:	d041      	beq.n	800660a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	3314      	adds	r3, #20
 800658c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006590:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006594:	e853 3f00 	ldrex	r3, [r3]
 8006598:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800659c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80065a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	3314      	adds	r3, #20
 80065ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80065b2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80065b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80065be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80065c2:	e841 2300 	strex	r3, r2, [r1]
 80065c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80065ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d1d9      	bne.n	8006586 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d013      	beq.n	8006602 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065de:	4a7e      	ldr	r2, [pc, #504]	; (80067d8 <HAL_UART_IRQHandler+0x3e0>)
 80065e0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065e6:	4618      	mov	r0, r3
 80065e8:	f7fc ff26 	bl	8003438 <HAL_DMA_Abort_IT>
 80065ec:	4603      	mov	r3, r0
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d016      	beq.n	8006620 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80065fc:	4610      	mov	r0, r2
 80065fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006600:	e00e      	b.n	8006620 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f000 f99c 	bl	8006940 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006608:	e00a      	b.n	8006620 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 f998 	bl	8006940 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006610:	e006      	b.n	8006620 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f000 f994 	bl	8006940 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2200      	movs	r2, #0
 800661c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800661e:	e175      	b.n	800690c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006620:	bf00      	nop
    return;
 8006622:	e173      	b.n	800690c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006628:	2b01      	cmp	r3, #1
 800662a:	f040 814f 	bne.w	80068cc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800662e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006632:	f003 0310 	and.w	r3, r3, #16
 8006636:	2b00      	cmp	r3, #0
 8006638:	f000 8148 	beq.w	80068cc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800663c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006640:	f003 0310 	and.w	r3, r3, #16
 8006644:	2b00      	cmp	r3, #0
 8006646:	f000 8141 	beq.w	80068cc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800664a:	2300      	movs	r3, #0
 800664c:	60bb      	str	r3, [r7, #8]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	60bb      	str	r3, [r7, #8]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	60bb      	str	r3, [r7, #8]
 800665e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	695b      	ldr	r3, [r3, #20]
 8006666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800666a:	2b00      	cmp	r3, #0
 800666c:	f000 80b6 	beq.w	80067dc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800667c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006680:	2b00      	cmp	r3, #0
 8006682:	f000 8145 	beq.w	8006910 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800668a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800668e:	429a      	cmp	r2, r3
 8006690:	f080 813e 	bcs.w	8006910 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800669a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066a0:	699b      	ldr	r3, [r3, #24]
 80066a2:	2b20      	cmp	r3, #32
 80066a4:	f000 8088 	beq.w	80067b8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	330c      	adds	r3, #12
 80066ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80066b6:	e853 3f00 	ldrex	r3, [r3]
 80066ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80066be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80066c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066c6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	330c      	adds	r3, #12
 80066d0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80066d4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80066d8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066dc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80066e0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80066e4:	e841 2300 	strex	r3, r2, [r1]
 80066e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80066ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d1d9      	bne.n	80066a8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	3314      	adds	r3, #20
 80066fa:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80066fe:	e853 3f00 	ldrex	r3, [r3]
 8006702:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006704:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006706:	f023 0301 	bic.w	r3, r3, #1
 800670a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	3314      	adds	r3, #20
 8006714:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006718:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800671c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800671e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006720:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006724:	e841 2300 	strex	r3, r2, [r1]
 8006728:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800672a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800672c:	2b00      	cmp	r3, #0
 800672e:	d1e1      	bne.n	80066f4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	3314      	adds	r3, #20
 8006736:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006738:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800673a:	e853 3f00 	ldrex	r3, [r3]
 800673e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006740:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006742:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006746:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	3314      	adds	r3, #20
 8006750:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006754:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006756:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006758:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800675a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800675c:	e841 2300 	strex	r3, r2, [r1]
 8006760:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006762:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006764:	2b00      	cmp	r3, #0
 8006766:	d1e3      	bne.n	8006730 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2220      	movs	r2, #32
 800676c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	330c      	adds	r3, #12
 800677c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800677e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006780:	e853 3f00 	ldrex	r3, [r3]
 8006784:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006786:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006788:	f023 0310 	bic.w	r3, r3, #16
 800678c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	330c      	adds	r3, #12
 8006796:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800679a:	65ba      	str	r2, [r7, #88]	; 0x58
 800679c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800679e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80067a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80067a2:	e841 2300 	strex	r3, r2, [r1]
 80067a6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80067a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d1e3      	bne.n	8006776 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067b2:	4618      	mov	r0, r3
 80067b4:	f7fc fe05 	bl	80033c2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2202      	movs	r2, #2
 80067bc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	1ad3      	subs	r3, r2, r3
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	4619      	mov	r1, r3
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f000 f8bf 	bl	8006952 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80067d4:	e09c      	b.n	8006910 <HAL_UART_IRQHandler+0x518>
 80067d6:	bf00      	nop
 80067d8:	08006b09 	.word	0x08006b09
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	1ad3      	subs	r3, r2, r3
 80067e8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	f000 808e 	beq.w	8006914 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80067f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	f000 8089 	beq.w	8006914 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	330c      	adds	r3, #12
 8006808:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800680a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800680c:	e853 3f00 	ldrex	r3, [r3]
 8006810:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006814:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006818:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	330c      	adds	r3, #12
 8006822:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006826:	647a      	str	r2, [r7, #68]	; 0x44
 8006828:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800682a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800682c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800682e:	e841 2300 	strex	r3, r2, [r1]
 8006832:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006834:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006836:	2b00      	cmp	r3, #0
 8006838:	d1e3      	bne.n	8006802 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	3314      	adds	r3, #20
 8006840:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006844:	e853 3f00 	ldrex	r3, [r3]
 8006848:	623b      	str	r3, [r7, #32]
   return(result);
 800684a:	6a3b      	ldr	r3, [r7, #32]
 800684c:	f023 0301 	bic.w	r3, r3, #1
 8006850:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	3314      	adds	r3, #20
 800685a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800685e:	633a      	str	r2, [r7, #48]	; 0x30
 8006860:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006862:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006864:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006866:	e841 2300 	strex	r3, r2, [r1]
 800686a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800686c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800686e:	2b00      	cmp	r3, #0
 8006870:	d1e3      	bne.n	800683a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2220      	movs	r2, #32
 8006876:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2200      	movs	r2, #0
 800687e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	330c      	adds	r3, #12
 8006886:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	e853 3f00 	ldrex	r3, [r3]
 800688e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f023 0310 	bic.w	r3, r3, #16
 8006896:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	330c      	adds	r3, #12
 80068a0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80068a4:	61fa      	str	r2, [r7, #28]
 80068a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068a8:	69b9      	ldr	r1, [r7, #24]
 80068aa:	69fa      	ldr	r2, [r7, #28]
 80068ac:	e841 2300 	strex	r3, r2, [r1]
 80068b0:	617b      	str	r3, [r7, #20]
   return(result);
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d1e3      	bne.n	8006880 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2202      	movs	r2, #2
 80068bc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80068be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80068c2:	4619      	mov	r1, r3
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f000 f844 	bl	8006952 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80068ca:	e023      	b.n	8006914 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80068cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d009      	beq.n	80068ec <HAL_UART_IRQHandler+0x4f4>
 80068d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d003      	beq.n	80068ec <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f000 f923 	bl	8006b30 <UART_Transmit_IT>
    return;
 80068ea:	e014      	b.n	8006916 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80068ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d00e      	beq.n	8006916 <HAL_UART_IRQHandler+0x51e>
 80068f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006900:	2b00      	cmp	r3, #0
 8006902:	d008      	beq.n	8006916 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f000 f962 	bl	8006bce <UART_EndTransmit_IT>
    return;
 800690a:	e004      	b.n	8006916 <HAL_UART_IRQHandler+0x51e>
    return;
 800690c:	bf00      	nop
 800690e:	e002      	b.n	8006916 <HAL_UART_IRQHandler+0x51e>
      return;
 8006910:	bf00      	nop
 8006912:	e000      	b.n	8006916 <HAL_UART_IRQHandler+0x51e>
      return;
 8006914:	bf00      	nop
  }
}
 8006916:	37e8      	adds	r7, #232	; 0xe8
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}

0800691c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800691c:	b480      	push	{r7}
 800691e:	b083      	sub	sp, #12
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006924:	bf00      	nop
 8006926:	370c      	adds	r7, #12
 8006928:	46bd      	mov	sp, r7
 800692a:	bc80      	pop	{r7}
 800692c:	4770      	bx	lr

0800692e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800692e:	b480      	push	{r7}
 8006930:	b083      	sub	sp, #12
 8006932:	af00      	add	r7, sp, #0
 8006934:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006936:	bf00      	nop
 8006938:	370c      	adds	r7, #12
 800693a:	46bd      	mov	sp, r7
 800693c:	bc80      	pop	{r7}
 800693e:	4770      	bx	lr

08006940 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006940:	b480      	push	{r7}
 8006942:	b083      	sub	sp, #12
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006948:	bf00      	nop
 800694a:	370c      	adds	r7, #12
 800694c:	46bd      	mov	sp, r7
 800694e:	bc80      	pop	{r7}
 8006950:	4770      	bx	lr

08006952 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006952:	b480      	push	{r7}
 8006954:	b083      	sub	sp, #12
 8006956:	af00      	add	r7, sp, #0
 8006958:	6078      	str	r0, [r7, #4]
 800695a:	460b      	mov	r3, r1
 800695c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800695e:	bf00      	nop
 8006960:	370c      	adds	r7, #12
 8006962:	46bd      	mov	sp, r7
 8006964:	bc80      	pop	{r7}
 8006966:	4770      	bx	lr

08006968 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b090      	sub	sp, #64	; 0x40
 800696c:	af00      	add	r7, sp, #0
 800696e:	60f8      	str	r0, [r7, #12]
 8006970:	60b9      	str	r1, [r7, #8]
 8006972:	603b      	str	r3, [r7, #0]
 8006974:	4613      	mov	r3, r2
 8006976:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006978:	e050      	b.n	8006a1c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800697a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800697c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006980:	d04c      	beq.n	8006a1c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006982:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006984:	2b00      	cmp	r3, #0
 8006986:	d007      	beq.n	8006998 <UART_WaitOnFlagUntilTimeout+0x30>
 8006988:	f7fc fbe0 	bl	800314c <HAL_GetTick>
 800698c:	4602      	mov	r2, r0
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	1ad3      	subs	r3, r2, r3
 8006992:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006994:	429a      	cmp	r2, r3
 8006996:	d241      	bcs.n	8006a1c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	330c      	adds	r3, #12
 800699e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069a2:	e853 3f00 	ldrex	r3, [r3]
 80069a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80069a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069aa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80069ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	330c      	adds	r3, #12
 80069b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80069b8:	637a      	str	r2, [r7, #52]	; 0x34
 80069ba:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80069be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069c0:	e841 2300 	strex	r3, r2, [r1]
 80069c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80069c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d1e5      	bne.n	8006998 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	3314      	adds	r3, #20
 80069d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	e853 3f00 	ldrex	r3, [r3]
 80069da:	613b      	str	r3, [r7, #16]
   return(result);
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	f023 0301 	bic.w	r3, r3, #1
 80069e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	3314      	adds	r3, #20
 80069ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069ec:	623a      	str	r2, [r7, #32]
 80069ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f0:	69f9      	ldr	r1, [r7, #28]
 80069f2:	6a3a      	ldr	r2, [r7, #32]
 80069f4:	e841 2300 	strex	r3, r2, [r1]
 80069f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80069fa:	69bb      	ldr	r3, [r7, #24]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d1e5      	bne.n	80069cc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2220      	movs	r2, #32
 8006a04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2220      	movs	r2, #32
 8006a0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2200      	movs	r2, #0
 8006a14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8006a18:	2303      	movs	r3, #3
 8006a1a:	e00f      	b.n	8006a3c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	4013      	ands	r3, r2
 8006a26:	68ba      	ldr	r2, [r7, #8]
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	bf0c      	ite	eq
 8006a2c:	2301      	moveq	r3, #1
 8006a2e:	2300      	movne	r3, #0
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	461a      	mov	r2, r3
 8006a34:	79fb      	ldrb	r3, [r7, #7]
 8006a36:	429a      	cmp	r2, r3
 8006a38:	d09f      	beq.n	800697a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006a3a:	2300      	movs	r3, #0
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3740      	adds	r7, #64	; 0x40
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}

08006a44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b095      	sub	sp, #84	; 0x54
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	330c      	adds	r3, #12
 8006a52:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a56:	e853 3f00 	ldrex	r3, [r3]
 8006a5a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a5e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	330c      	adds	r3, #12
 8006a6a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006a6c:	643a      	str	r2, [r7, #64]	; 0x40
 8006a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a70:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006a72:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a74:	e841 2300 	strex	r3, r2, [r1]
 8006a78:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d1e5      	bne.n	8006a4c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	3314      	adds	r3, #20
 8006a86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a88:	6a3b      	ldr	r3, [r7, #32]
 8006a8a:	e853 3f00 	ldrex	r3, [r3]
 8006a8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a90:	69fb      	ldr	r3, [r7, #28]
 8006a92:	f023 0301 	bic.w	r3, r3, #1
 8006a96:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	3314      	adds	r3, #20
 8006a9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006aa0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006aa2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006aa6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006aa8:	e841 2300 	strex	r3, r2, [r1]
 8006aac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d1e5      	bne.n	8006a80 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d119      	bne.n	8006af0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	330c      	adds	r3, #12
 8006ac2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	e853 3f00 	ldrex	r3, [r3]
 8006aca:	60bb      	str	r3, [r7, #8]
   return(result);
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	f023 0310 	bic.w	r3, r3, #16
 8006ad2:	647b      	str	r3, [r7, #68]	; 0x44
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	330c      	adds	r3, #12
 8006ada:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006adc:	61ba      	str	r2, [r7, #24]
 8006ade:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae0:	6979      	ldr	r1, [r7, #20]
 8006ae2:	69ba      	ldr	r2, [r7, #24]
 8006ae4:	e841 2300 	strex	r3, r2, [r1]
 8006ae8:	613b      	str	r3, [r7, #16]
   return(result);
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d1e5      	bne.n	8006abc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2220      	movs	r2, #32
 8006af4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2200      	movs	r2, #0
 8006afc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006afe:	bf00      	nop
 8006b00:	3754      	adds	r7, #84	; 0x54
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bc80      	pop	{r7}
 8006b06:	4770      	bx	lr

08006b08 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b084      	sub	sp, #16
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b14:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b22:	68f8      	ldr	r0, [r7, #12]
 8006b24:	f7ff ff0c 	bl	8006940 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b28:	bf00      	nop
 8006b2a:	3710      	adds	r7, #16
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}

08006b30 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b085      	sub	sp, #20
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b3e:	b2db      	uxtb	r3, r3
 8006b40:	2b21      	cmp	r3, #33	; 0x21
 8006b42:	d13e      	bne.n	8006bc2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	689b      	ldr	r3, [r3, #8]
 8006b48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b4c:	d114      	bne.n	8006b78 <UART_Transmit_IT+0x48>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	691b      	ldr	r3, [r3, #16]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d110      	bne.n	8006b78 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6a1b      	ldr	r3, [r3, #32]
 8006b5a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	881b      	ldrh	r3, [r3, #0]
 8006b60:	461a      	mov	r2, r3
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b6a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6a1b      	ldr	r3, [r3, #32]
 8006b70:	1c9a      	adds	r2, r3, #2
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	621a      	str	r2, [r3, #32]
 8006b76:	e008      	b.n	8006b8a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6a1b      	ldr	r3, [r3, #32]
 8006b7c:	1c59      	adds	r1, r3, #1
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	6211      	str	r1, [r2, #32]
 8006b82:	781a      	ldrb	r2, [r3, #0]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b8e:	b29b      	uxth	r3, r3
 8006b90:	3b01      	subs	r3, #1
 8006b92:	b29b      	uxth	r3, r3
 8006b94:	687a      	ldr	r2, [r7, #4]
 8006b96:	4619      	mov	r1, r3
 8006b98:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d10f      	bne.n	8006bbe <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	68da      	ldr	r2, [r3, #12]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006bac:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	68da      	ldr	r2, [r3, #12]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006bbc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	e000      	b.n	8006bc4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006bc2:	2302      	movs	r3, #2
  }
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3714      	adds	r7, #20
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bc80      	pop	{r7}
 8006bcc:	4770      	bx	lr

08006bce <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006bce:	b580      	push	{r7, lr}
 8006bd0:	b082      	sub	sp, #8
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	68da      	ldr	r2, [r3, #12]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006be4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2220      	movs	r2, #32
 8006bea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f7ff fe94 	bl	800691c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006bf4:	2300      	movs	r3, #0
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3708      	adds	r7, #8
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}

08006bfe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006bfe:	b580      	push	{r7, lr}
 8006c00:	b08c      	sub	sp, #48	; 0x30
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006c0c:	b2db      	uxtb	r3, r3
 8006c0e:	2b22      	cmp	r3, #34	; 0x22
 8006c10:	f040 80ae 	bne.w	8006d70 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c1c:	d117      	bne.n	8006c4e <UART_Receive_IT+0x50>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	691b      	ldr	r3, [r3, #16]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d113      	bne.n	8006c4e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006c26:	2300      	movs	r3, #0
 8006c28:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c2e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c3c:	b29a      	uxth	r2, r3
 8006c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c40:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c46:	1c9a      	adds	r2, r3, #2
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	629a      	str	r2, [r3, #40]	; 0x28
 8006c4c:	e026      	b.n	8006c9c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c52:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006c54:	2300      	movs	r3, #0
 8006c56:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c60:	d007      	beq.n	8006c72 <UART_Receive_IT+0x74>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	689b      	ldr	r3, [r3, #8]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d10a      	bne.n	8006c80 <UART_Receive_IT+0x82>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	691b      	ldr	r3, [r3, #16]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d106      	bne.n	8006c80 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	b2da      	uxtb	r2, r3
 8006c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c7c:	701a      	strb	r2, [r3, #0]
 8006c7e:	e008      	b.n	8006c92 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	b2db      	uxtb	r3, r3
 8006c88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c8c:	b2da      	uxtb	r2, r3
 8006c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c90:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c96:	1c5a      	adds	r2, r3, #1
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ca0:	b29b      	uxth	r3, r3
 8006ca2:	3b01      	subs	r3, #1
 8006ca4:	b29b      	uxth	r3, r3
 8006ca6:	687a      	ldr	r2, [r7, #4]
 8006ca8:	4619      	mov	r1, r3
 8006caa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d15d      	bne.n	8006d6c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	68da      	ldr	r2, [r3, #12]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f022 0220 	bic.w	r2, r2, #32
 8006cbe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	68da      	ldr	r2, [r3, #12]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006cce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	695a      	ldr	r2, [r3, #20]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f022 0201 	bic.w	r2, r2, #1
 8006cde:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2220      	movs	r2, #32
 8006ce4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2200      	movs	r2, #0
 8006cec:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d135      	bne.n	8006d62 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	330c      	adds	r3, #12
 8006d02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	e853 3f00 	ldrex	r3, [r3]
 8006d0a:	613b      	str	r3, [r7, #16]
   return(result);
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	f023 0310 	bic.w	r3, r3, #16
 8006d12:	627b      	str	r3, [r7, #36]	; 0x24
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	330c      	adds	r3, #12
 8006d1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d1c:	623a      	str	r2, [r7, #32]
 8006d1e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d20:	69f9      	ldr	r1, [r7, #28]
 8006d22:	6a3a      	ldr	r2, [r7, #32]
 8006d24:	e841 2300 	strex	r3, r2, [r1]
 8006d28:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d2a:	69bb      	ldr	r3, [r7, #24]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d1e5      	bne.n	8006cfc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f003 0310 	and.w	r3, r3, #16
 8006d3a:	2b10      	cmp	r3, #16
 8006d3c:	d10a      	bne.n	8006d54 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006d3e:	2300      	movs	r3, #0
 8006d40:	60fb      	str	r3, [r7, #12]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	60fb      	str	r3, [r7, #12]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	60fb      	str	r3, [r7, #12]
 8006d52:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006d58:	4619      	mov	r1, r3
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f7ff fdf9 	bl	8006952 <HAL_UARTEx_RxEventCallback>
 8006d60:	e002      	b.n	8006d68 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f7ff fde3 	bl	800692e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	e002      	b.n	8006d72 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	e000      	b.n	8006d72 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006d70:	2302      	movs	r3, #2
  }
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3730      	adds	r7, #48	; 0x30
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}
	...

08006d7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b084      	sub	sp, #16
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	691b      	ldr	r3, [r3, #16]
 8006d8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	68da      	ldr	r2, [r3, #12]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	430a      	orrs	r2, r1
 8006d98:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	689a      	ldr	r2, [r3, #8]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	691b      	ldr	r3, [r3, #16]
 8006da2:	431a      	orrs	r2, r3
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	695b      	ldr	r3, [r3, #20]
 8006da8:	4313      	orrs	r3, r2
 8006daa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	68db      	ldr	r3, [r3, #12]
 8006db2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006db6:	f023 030c 	bic.w	r3, r3, #12
 8006dba:	687a      	ldr	r2, [r7, #4]
 8006dbc:	6812      	ldr	r2, [r2, #0]
 8006dbe:	68b9      	ldr	r1, [r7, #8]
 8006dc0:	430b      	orrs	r3, r1
 8006dc2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	695b      	ldr	r3, [r3, #20]
 8006dca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	699a      	ldr	r2, [r3, #24]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	430a      	orrs	r2, r1
 8006dd8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a2c      	ldr	r2, [pc, #176]	; (8006e90 <UART_SetConfig+0x114>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d103      	bne.n	8006dec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006de4:	f7fe f94e 	bl	8005084 <HAL_RCC_GetPCLK2Freq>
 8006de8:	60f8      	str	r0, [r7, #12]
 8006dea:	e002      	b.n	8006df2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006dec:	f7fe f936 	bl	800505c <HAL_RCC_GetPCLK1Freq>
 8006df0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006df2:	68fa      	ldr	r2, [r7, #12]
 8006df4:	4613      	mov	r3, r2
 8006df6:	009b      	lsls	r3, r3, #2
 8006df8:	4413      	add	r3, r2
 8006dfa:	009a      	lsls	r2, r3, #2
 8006dfc:	441a      	add	r2, r3
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	009b      	lsls	r3, r3, #2
 8006e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e08:	4a22      	ldr	r2, [pc, #136]	; (8006e94 <UART_SetConfig+0x118>)
 8006e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e0e:	095b      	lsrs	r3, r3, #5
 8006e10:	0119      	lsls	r1, r3, #4
 8006e12:	68fa      	ldr	r2, [r7, #12]
 8006e14:	4613      	mov	r3, r2
 8006e16:	009b      	lsls	r3, r3, #2
 8006e18:	4413      	add	r3, r2
 8006e1a:	009a      	lsls	r2, r3, #2
 8006e1c:	441a      	add	r2, r3
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	009b      	lsls	r3, r3, #2
 8006e24:	fbb2 f2f3 	udiv	r2, r2, r3
 8006e28:	4b1a      	ldr	r3, [pc, #104]	; (8006e94 <UART_SetConfig+0x118>)
 8006e2a:	fba3 0302 	umull	r0, r3, r3, r2
 8006e2e:	095b      	lsrs	r3, r3, #5
 8006e30:	2064      	movs	r0, #100	; 0x64
 8006e32:	fb00 f303 	mul.w	r3, r0, r3
 8006e36:	1ad3      	subs	r3, r2, r3
 8006e38:	011b      	lsls	r3, r3, #4
 8006e3a:	3332      	adds	r3, #50	; 0x32
 8006e3c:	4a15      	ldr	r2, [pc, #84]	; (8006e94 <UART_SetConfig+0x118>)
 8006e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8006e42:	095b      	lsrs	r3, r3, #5
 8006e44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006e48:	4419      	add	r1, r3
 8006e4a:	68fa      	ldr	r2, [r7, #12]
 8006e4c:	4613      	mov	r3, r2
 8006e4e:	009b      	lsls	r3, r3, #2
 8006e50:	4413      	add	r3, r2
 8006e52:	009a      	lsls	r2, r3, #2
 8006e54:	441a      	add	r2, r3
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	009b      	lsls	r3, r3, #2
 8006e5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006e60:	4b0c      	ldr	r3, [pc, #48]	; (8006e94 <UART_SetConfig+0x118>)
 8006e62:	fba3 0302 	umull	r0, r3, r3, r2
 8006e66:	095b      	lsrs	r3, r3, #5
 8006e68:	2064      	movs	r0, #100	; 0x64
 8006e6a:	fb00 f303 	mul.w	r3, r0, r3
 8006e6e:	1ad3      	subs	r3, r2, r3
 8006e70:	011b      	lsls	r3, r3, #4
 8006e72:	3332      	adds	r3, #50	; 0x32
 8006e74:	4a07      	ldr	r2, [pc, #28]	; (8006e94 <UART_SetConfig+0x118>)
 8006e76:	fba2 2303 	umull	r2, r3, r2, r3
 8006e7a:	095b      	lsrs	r3, r3, #5
 8006e7c:	f003 020f 	and.w	r2, r3, #15
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	440a      	add	r2, r1
 8006e86:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006e88:	bf00      	nop
 8006e8a:	3710      	adds	r7, #16
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}
 8006e90:	40013800 	.word	0x40013800
 8006e94:	51eb851f 	.word	0x51eb851f

08006e98 <std>:
 8006e98:	2300      	movs	r3, #0
 8006e9a:	b510      	push	{r4, lr}
 8006e9c:	4604      	mov	r4, r0
 8006e9e:	e9c0 3300 	strd	r3, r3, [r0]
 8006ea2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006ea6:	6083      	str	r3, [r0, #8]
 8006ea8:	8181      	strh	r1, [r0, #12]
 8006eaa:	6643      	str	r3, [r0, #100]	; 0x64
 8006eac:	81c2      	strh	r2, [r0, #14]
 8006eae:	6183      	str	r3, [r0, #24]
 8006eb0:	4619      	mov	r1, r3
 8006eb2:	2208      	movs	r2, #8
 8006eb4:	305c      	adds	r0, #92	; 0x5c
 8006eb6:	f000 fa19 	bl	80072ec <memset>
 8006eba:	4b05      	ldr	r3, [pc, #20]	; (8006ed0 <std+0x38>)
 8006ebc:	6224      	str	r4, [r4, #32]
 8006ebe:	6263      	str	r3, [r4, #36]	; 0x24
 8006ec0:	4b04      	ldr	r3, [pc, #16]	; (8006ed4 <std+0x3c>)
 8006ec2:	62a3      	str	r3, [r4, #40]	; 0x28
 8006ec4:	4b04      	ldr	r3, [pc, #16]	; (8006ed8 <std+0x40>)
 8006ec6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006ec8:	4b04      	ldr	r3, [pc, #16]	; (8006edc <std+0x44>)
 8006eca:	6323      	str	r3, [r4, #48]	; 0x30
 8006ecc:	bd10      	pop	{r4, pc}
 8006ece:	bf00      	nop
 8006ed0:	0800713d 	.word	0x0800713d
 8006ed4:	0800715f 	.word	0x0800715f
 8006ed8:	08007197 	.word	0x08007197
 8006edc:	080071bb 	.word	0x080071bb

08006ee0 <stdio_exit_handler>:
 8006ee0:	4a02      	ldr	r2, [pc, #8]	; (8006eec <stdio_exit_handler+0xc>)
 8006ee2:	4903      	ldr	r1, [pc, #12]	; (8006ef0 <stdio_exit_handler+0x10>)
 8006ee4:	4803      	ldr	r0, [pc, #12]	; (8006ef4 <stdio_exit_handler+0x14>)
 8006ee6:	f000 b869 	b.w	8006fbc <_fwalk_sglue>
 8006eea:	bf00      	nop
 8006eec:	20000030 	.word	0x20000030
 8006ef0:	08007f29 	.word	0x08007f29
 8006ef4:	2000003c 	.word	0x2000003c

08006ef8 <cleanup_stdio>:
 8006ef8:	6841      	ldr	r1, [r0, #4]
 8006efa:	4b0c      	ldr	r3, [pc, #48]	; (8006f2c <cleanup_stdio+0x34>)
 8006efc:	b510      	push	{r4, lr}
 8006efe:	4299      	cmp	r1, r3
 8006f00:	4604      	mov	r4, r0
 8006f02:	d001      	beq.n	8006f08 <cleanup_stdio+0x10>
 8006f04:	f001 f810 	bl	8007f28 <_fflush_r>
 8006f08:	68a1      	ldr	r1, [r4, #8]
 8006f0a:	4b09      	ldr	r3, [pc, #36]	; (8006f30 <cleanup_stdio+0x38>)
 8006f0c:	4299      	cmp	r1, r3
 8006f0e:	d002      	beq.n	8006f16 <cleanup_stdio+0x1e>
 8006f10:	4620      	mov	r0, r4
 8006f12:	f001 f809 	bl	8007f28 <_fflush_r>
 8006f16:	68e1      	ldr	r1, [r4, #12]
 8006f18:	4b06      	ldr	r3, [pc, #24]	; (8006f34 <cleanup_stdio+0x3c>)
 8006f1a:	4299      	cmp	r1, r3
 8006f1c:	d004      	beq.n	8006f28 <cleanup_stdio+0x30>
 8006f1e:	4620      	mov	r0, r4
 8006f20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f24:	f001 b800 	b.w	8007f28 <_fflush_r>
 8006f28:	bd10      	pop	{r4, pc}
 8006f2a:	bf00      	nop
 8006f2c:	200004ec 	.word	0x200004ec
 8006f30:	20000554 	.word	0x20000554
 8006f34:	200005bc 	.word	0x200005bc

08006f38 <global_stdio_init.part.0>:
 8006f38:	b510      	push	{r4, lr}
 8006f3a:	4b0b      	ldr	r3, [pc, #44]	; (8006f68 <global_stdio_init.part.0+0x30>)
 8006f3c:	4c0b      	ldr	r4, [pc, #44]	; (8006f6c <global_stdio_init.part.0+0x34>)
 8006f3e:	4a0c      	ldr	r2, [pc, #48]	; (8006f70 <global_stdio_init.part.0+0x38>)
 8006f40:	4620      	mov	r0, r4
 8006f42:	601a      	str	r2, [r3, #0]
 8006f44:	2104      	movs	r1, #4
 8006f46:	2200      	movs	r2, #0
 8006f48:	f7ff ffa6 	bl	8006e98 <std>
 8006f4c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006f50:	2201      	movs	r2, #1
 8006f52:	2109      	movs	r1, #9
 8006f54:	f7ff ffa0 	bl	8006e98 <std>
 8006f58:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006f5c:	2202      	movs	r2, #2
 8006f5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f62:	2112      	movs	r1, #18
 8006f64:	f7ff bf98 	b.w	8006e98 <std>
 8006f68:	20000624 	.word	0x20000624
 8006f6c:	200004ec 	.word	0x200004ec
 8006f70:	08006ee1 	.word	0x08006ee1

08006f74 <__sfp_lock_acquire>:
 8006f74:	4801      	ldr	r0, [pc, #4]	; (8006f7c <__sfp_lock_acquire+0x8>)
 8006f76:	f000 ba31 	b.w	80073dc <__retarget_lock_acquire_recursive>
 8006f7a:	bf00      	nop
 8006f7c:	2000062d 	.word	0x2000062d

08006f80 <__sfp_lock_release>:
 8006f80:	4801      	ldr	r0, [pc, #4]	; (8006f88 <__sfp_lock_release+0x8>)
 8006f82:	f000 ba2c 	b.w	80073de <__retarget_lock_release_recursive>
 8006f86:	bf00      	nop
 8006f88:	2000062d 	.word	0x2000062d

08006f8c <__sinit>:
 8006f8c:	b510      	push	{r4, lr}
 8006f8e:	4604      	mov	r4, r0
 8006f90:	f7ff fff0 	bl	8006f74 <__sfp_lock_acquire>
 8006f94:	6a23      	ldr	r3, [r4, #32]
 8006f96:	b11b      	cbz	r3, 8006fa0 <__sinit+0x14>
 8006f98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f9c:	f7ff bff0 	b.w	8006f80 <__sfp_lock_release>
 8006fa0:	4b04      	ldr	r3, [pc, #16]	; (8006fb4 <__sinit+0x28>)
 8006fa2:	6223      	str	r3, [r4, #32]
 8006fa4:	4b04      	ldr	r3, [pc, #16]	; (8006fb8 <__sinit+0x2c>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d1f5      	bne.n	8006f98 <__sinit+0xc>
 8006fac:	f7ff ffc4 	bl	8006f38 <global_stdio_init.part.0>
 8006fb0:	e7f2      	b.n	8006f98 <__sinit+0xc>
 8006fb2:	bf00      	nop
 8006fb4:	08006ef9 	.word	0x08006ef9
 8006fb8:	20000624 	.word	0x20000624

08006fbc <_fwalk_sglue>:
 8006fbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fc0:	4607      	mov	r7, r0
 8006fc2:	4688      	mov	r8, r1
 8006fc4:	4614      	mov	r4, r2
 8006fc6:	2600      	movs	r6, #0
 8006fc8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006fcc:	f1b9 0901 	subs.w	r9, r9, #1
 8006fd0:	d505      	bpl.n	8006fde <_fwalk_sglue+0x22>
 8006fd2:	6824      	ldr	r4, [r4, #0]
 8006fd4:	2c00      	cmp	r4, #0
 8006fd6:	d1f7      	bne.n	8006fc8 <_fwalk_sglue+0xc>
 8006fd8:	4630      	mov	r0, r6
 8006fda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fde:	89ab      	ldrh	r3, [r5, #12]
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d907      	bls.n	8006ff4 <_fwalk_sglue+0x38>
 8006fe4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006fe8:	3301      	adds	r3, #1
 8006fea:	d003      	beq.n	8006ff4 <_fwalk_sglue+0x38>
 8006fec:	4629      	mov	r1, r5
 8006fee:	4638      	mov	r0, r7
 8006ff0:	47c0      	blx	r8
 8006ff2:	4306      	orrs	r6, r0
 8006ff4:	3568      	adds	r5, #104	; 0x68
 8006ff6:	e7e9      	b.n	8006fcc <_fwalk_sglue+0x10>

08006ff8 <iprintf>:
 8006ff8:	b40f      	push	{r0, r1, r2, r3}
 8006ffa:	b507      	push	{r0, r1, r2, lr}
 8006ffc:	4906      	ldr	r1, [pc, #24]	; (8007018 <iprintf+0x20>)
 8006ffe:	ab04      	add	r3, sp, #16
 8007000:	6808      	ldr	r0, [r1, #0]
 8007002:	f853 2b04 	ldr.w	r2, [r3], #4
 8007006:	6881      	ldr	r1, [r0, #8]
 8007008:	9301      	str	r3, [sp, #4]
 800700a:	f000 fc5d 	bl	80078c8 <_vfiprintf_r>
 800700e:	b003      	add	sp, #12
 8007010:	f85d eb04 	ldr.w	lr, [sp], #4
 8007014:	b004      	add	sp, #16
 8007016:	4770      	bx	lr
 8007018:	20000088 	.word	0x20000088

0800701c <_puts_r>:
 800701c:	6a03      	ldr	r3, [r0, #32]
 800701e:	b570      	push	{r4, r5, r6, lr}
 8007020:	4605      	mov	r5, r0
 8007022:	460e      	mov	r6, r1
 8007024:	6884      	ldr	r4, [r0, #8]
 8007026:	b90b      	cbnz	r3, 800702c <_puts_r+0x10>
 8007028:	f7ff ffb0 	bl	8006f8c <__sinit>
 800702c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800702e:	07db      	lsls	r3, r3, #31
 8007030:	d405      	bmi.n	800703e <_puts_r+0x22>
 8007032:	89a3      	ldrh	r3, [r4, #12]
 8007034:	0598      	lsls	r0, r3, #22
 8007036:	d402      	bmi.n	800703e <_puts_r+0x22>
 8007038:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800703a:	f000 f9cf 	bl	80073dc <__retarget_lock_acquire_recursive>
 800703e:	89a3      	ldrh	r3, [r4, #12]
 8007040:	0719      	lsls	r1, r3, #28
 8007042:	d513      	bpl.n	800706c <_puts_r+0x50>
 8007044:	6923      	ldr	r3, [r4, #16]
 8007046:	b18b      	cbz	r3, 800706c <_puts_r+0x50>
 8007048:	3e01      	subs	r6, #1
 800704a:	68a3      	ldr	r3, [r4, #8]
 800704c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007050:	3b01      	subs	r3, #1
 8007052:	60a3      	str	r3, [r4, #8]
 8007054:	b9e9      	cbnz	r1, 8007092 <_puts_r+0x76>
 8007056:	2b00      	cmp	r3, #0
 8007058:	da2e      	bge.n	80070b8 <_puts_r+0x9c>
 800705a:	4622      	mov	r2, r4
 800705c:	210a      	movs	r1, #10
 800705e:	4628      	mov	r0, r5
 8007060:	f000 f8af 	bl	80071c2 <__swbuf_r>
 8007064:	3001      	adds	r0, #1
 8007066:	d007      	beq.n	8007078 <_puts_r+0x5c>
 8007068:	250a      	movs	r5, #10
 800706a:	e007      	b.n	800707c <_puts_r+0x60>
 800706c:	4621      	mov	r1, r4
 800706e:	4628      	mov	r0, r5
 8007070:	f000 f8e4 	bl	800723c <__swsetup_r>
 8007074:	2800      	cmp	r0, #0
 8007076:	d0e7      	beq.n	8007048 <_puts_r+0x2c>
 8007078:	f04f 35ff 	mov.w	r5, #4294967295
 800707c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800707e:	07da      	lsls	r2, r3, #31
 8007080:	d405      	bmi.n	800708e <_puts_r+0x72>
 8007082:	89a3      	ldrh	r3, [r4, #12]
 8007084:	059b      	lsls	r3, r3, #22
 8007086:	d402      	bmi.n	800708e <_puts_r+0x72>
 8007088:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800708a:	f000 f9a8 	bl	80073de <__retarget_lock_release_recursive>
 800708e:	4628      	mov	r0, r5
 8007090:	bd70      	pop	{r4, r5, r6, pc}
 8007092:	2b00      	cmp	r3, #0
 8007094:	da04      	bge.n	80070a0 <_puts_r+0x84>
 8007096:	69a2      	ldr	r2, [r4, #24]
 8007098:	429a      	cmp	r2, r3
 800709a:	dc06      	bgt.n	80070aa <_puts_r+0x8e>
 800709c:	290a      	cmp	r1, #10
 800709e:	d004      	beq.n	80070aa <_puts_r+0x8e>
 80070a0:	6823      	ldr	r3, [r4, #0]
 80070a2:	1c5a      	adds	r2, r3, #1
 80070a4:	6022      	str	r2, [r4, #0]
 80070a6:	7019      	strb	r1, [r3, #0]
 80070a8:	e7cf      	b.n	800704a <_puts_r+0x2e>
 80070aa:	4622      	mov	r2, r4
 80070ac:	4628      	mov	r0, r5
 80070ae:	f000 f888 	bl	80071c2 <__swbuf_r>
 80070b2:	3001      	adds	r0, #1
 80070b4:	d1c9      	bne.n	800704a <_puts_r+0x2e>
 80070b6:	e7df      	b.n	8007078 <_puts_r+0x5c>
 80070b8:	250a      	movs	r5, #10
 80070ba:	6823      	ldr	r3, [r4, #0]
 80070bc:	1c5a      	adds	r2, r3, #1
 80070be:	6022      	str	r2, [r4, #0]
 80070c0:	701d      	strb	r5, [r3, #0]
 80070c2:	e7db      	b.n	800707c <_puts_r+0x60>

080070c4 <puts>:
 80070c4:	4b02      	ldr	r3, [pc, #8]	; (80070d0 <puts+0xc>)
 80070c6:	4601      	mov	r1, r0
 80070c8:	6818      	ldr	r0, [r3, #0]
 80070ca:	f7ff bfa7 	b.w	800701c <_puts_r>
 80070ce:	bf00      	nop
 80070d0:	20000088 	.word	0x20000088

080070d4 <sniprintf>:
 80070d4:	b40c      	push	{r2, r3}
 80070d6:	b530      	push	{r4, r5, lr}
 80070d8:	4b17      	ldr	r3, [pc, #92]	; (8007138 <sniprintf+0x64>)
 80070da:	1e0c      	subs	r4, r1, #0
 80070dc:	681d      	ldr	r5, [r3, #0]
 80070de:	b09d      	sub	sp, #116	; 0x74
 80070e0:	da08      	bge.n	80070f4 <sniprintf+0x20>
 80070e2:	238b      	movs	r3, #139	; 0x8b
 80070e4:	f04f 30ff 	mov.w	r0, #4294967295
 80070e8:	602b      	str	r3, [r5, #0]
 80070ea:	b01d      	add	sp, #116	; 0x74
 80070ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80070f0:	b002      	add	sp, #8
 80070f2:	4770      	bx	lr
 80070f4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80070f8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80070fc:	bf0c      	ite	eq
 80070fe:	4623      	moveq	r3, r4
 8007100:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007104:	9304      	str	r3, [sp, #16]
 8007106:	9307      	str	r3, [sp, #28]
 8007108:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800710c:	9002      	str	r0, [sp, #8]
 800710e:	9006      	str	r0, [sp, #24]
 8007110:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007114:	4628      	mov	r0, r5
 8007116:	ab21      	add	r3, sp, #132	; 0x84
 8007118:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800711a:	a902      	add	r1, sp, #8
 800711c:	9301      	str	r3, [sp, #4]
 800711e:	f000 faad 	bl	800767c <_svfiprintf_r>
 8007122:	1c43      	adds	r3, r0, #1
 8007124:	bfbc      	itt	lt
 8007126:	238b      	movlt	r3, #139	; 0x8b
 8007128:	602b      	strlt	r3, [r5, #0]
 800712a:	2c00      	cmp	r4, #0
 800712c:	d0dd      	beq.n	80070ea <sniprintf+0x16>
 800712e:	2200      	movs	r2, #0
 8007130:	9b02      	ldr	r3, [sp, #8]
 8007132:	701a      	strb	r2, [r3, #0]
 8007134:	e7d9      	b.n	80070ea <sniprintf+0x16>
 8007136:	bf00      	nop
 8007138:	20000088 	.word	0x20000088

0800713c <__sread>:
 800713c:	b510      	push	{r4, lr}
 800713e:	460c      	mov	r4, r1
 8007140:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007144:	f000 f8fc 	bl	8007340 <_read_r>
 8007148:	2800      	cmp	r0, #0
 800714a:	bfab      	itete	ge
 800714c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800714e:	89a3      	ldrhlt	r3, [r4, #12]
 8007150:	181b      	addge	r3, r3, r0
 8007152:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007156:	bfac      	ite	ge
 8007158:	6563      	strge	r3, [r4, #84]	; 0x54
 800715a:	81a3      	strhlt	r3, [r4, #12]
 800715c:	bd10      	pop	{r4, pc}

0800715e <__swrite>:
 800715e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007162:	461f      	mov	r7, r3
 8007164:	898b      	ldrh	r3, [r1, #12]
 8007166:	4605      	mov	r5, r0
 8007168:	05db      	lsls	r3, r3, #23
 800716a:	460c      	mov	r4, r1
 800716c:	4616      	mov	r6, r2
 800716e:	d505      	bpl.n	800717c <__swrite+0x1e>
 8007170:	2302      	movs	r3, #2
 8007172:	2200      	movs	r2, #0
 8007174:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007178:	f000 f8d0 	bl	800731c <_lseek_r>
 800717c:	89a3      	ldrh	r3, [r4, #12]
 800717e:	4632      	mov	r2, r6
 8007180:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007184:	81a3      	strh	r3, [r4, #12]
 8007186:	4628      	mov	r0, r5
 8007188:	463b      	mov	r3, r7
 800718a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800718e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007192:	f000 b8e7 	b.w	8007364 <_write_r>

08007196 <__sseek>:
 8007196:	b510      	push	{r4, lr}
 8007198:	460c      	mov	r4, r1
 800719a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800719e:	f000 f8bd 	bl	800731c <_lseek_r>
 80071a2:	1c43      	adds	r3, r0, #1
 80071a4:	89a3      	ldrh	r3, [r4, #12]
 80071a6:	bf15      	itete	ne
 80071a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80071aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80071ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80071b2:	81a3      	strheq	r3, [r4, #12]
 80071b4:	bf18      	it	ne
 80071b6:	81a3      	strhne	r3, [r4, #12]
 80071b8:	bd10      	pop	{r4, pc}

080071ba <__sclose>:
 80071ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071be:	f000 b89d 	b.w	80072fc <_close_r>

080071c2 <__swbuf_r>:
 80071c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071c4:	460e      	mov	r6, r1
 80071c6:	4614      	mov	r4, r2
 80071c8:	4605      	mov	r5, r0
 80071ca:	b118      	cbz	r0, 80071d4 <__swbuf_r+0x12>
 80071cc:	6a03      	ldr	r3, [r0, #32]
 80071ce:	b90b      	cbnz	r3, 80071d4 <__swbuf_r+0x12>
 80071d0:	f7ff fedc 	bl	8006f8c <__sinit>
 80071d4:	69a3      	ldr	r3, [r4, #24]
 80071d6:	60a3      	str	r3, [r4, #8]
 80071d8:	89a3      	ldrh	r3, [r4, #12]
 80071da:	071a      	lsls	r2, r3, #28
 80071dc:	d525      	bpl.n	800722a <__swbuf_r+0x68>
 80071de:	6923      	ldr	r3, [r4, #16]
 80071e0:	b31b      	cbz	r3, 800722a <__swbuf_r+0x68>
 80071e2:	6823      	ldr	r3, [r4, #0]
 80071e4:	6922      	ldr	r2, [r4, #16]
 80071e6:	b2f6      	uxtb	r6, r6
 80071e8:	1a98      	subs	r0, r3, r2
 80071ea:	6963      	ldr	r3, [r4, #20]
 80071ec:	4637      	mov	r7, r6
 80071ee:	4283      	cmp	r3, r0
 80071f0:	dc04      	bgt.n	80071fc <__swbuf_r+0x3a>
 80071f2:	4621      	mov	r1, r4
 80071f4:	4628      	mov	r0, r5
 80071f6:	f000 fe97 	bl	8007f28 <_fflush_r>
 80071fa:	b9e0      	cbnz	r0, 8007236 <__swbuf_r+0x74>
 80071fc:	68a3      	ldr	r3, [r4, #8]
 80071fe:	3b01      	subs	r3, #1
 8007200:	60a3      	str	r3, [r4, #8]
 8007202:	6823      	ldr	r3, [r4, #0]
 8007204:	1c5a      	adds	r2, r3, #1
 8007206:	6022      	str	r2, [r4, #0]
 8007208:	701e      	strb	r6, [r3, #0]
 800720a:	6962      	ldr	r2, [r4, #20]
 800720c:	1c43      	adds	r3, r0, #1
 800720e:	429a      	cmp	r2, r3
 8007210:	d004      	beq.n	800721c <__swbuf_r+0x5a>
 8007212:	89a3      	ldrh	r3, [r4, #12]
 8007214:	07db      	lsls	r3, r3, #31
 8007216:	d506      	bpl.n	8007226 <__swbuf_r+0x64>
 8007218:	2e0a      	cmp	r6, #10
 800721a:	d104      	bne.n	8007226 <__swbuf_r+0x64>
 800721c:	4621      	mov	r1, r4
 800721e:	4628      	mov	r0, r5
 8007220:	f000 fe82 	bl	8007f28 <_fflush_r>
 8007224:	b938      	cbnz	r0, 8007236 <__swbuf_r+0x74>
 8007226:	4638      	mov	r0, r7
 8007228:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800722a:	4621      	mov	r1, r4
 800722c:	4628      	mov	r0, r5
 800722e:	f000 f805 	bl	800723c <__swsetup_r>
 8007232:	2800      	cmp	r0, #0
 8007234:	d0d5      	beq.n	80071e2 <__swbuf_r+0x20>
 8007236:	f04f 37ff 	mov.w	r7, #4294967295
 800723a:	e7f4      	b.n	8007226 <__swbuf_r+0x64>

0800723c <__swsetup_r>:
 800723c:	b538      	push	{r3, r4, r5, lr}
 800723e:	4b2a      	ldr	r3, [pc, #168]	; (80072e8 <__swsetup_r+0xac>)
 8007240:	4605      	mov	r5, r0
 8007242:	6818      	ldr	r0, [r3, #0]
 8007244:	460c      	mov	r4, r1
 8007246:	b118      	cbz	r0, 8007250 <__swsetup_r+0x14>
 8007248:	6a03      	ldr	r3, [r0, #32]
 800724a:	b90b      	cbnz	r3, 8007250 <__swsetup_r+0x14>
 800724c:	f7ff fe9e 	bl	8006f8c <__sinit>
 8007250:	89a3      	ldrh	r3, [r4, #12]
 8007252:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007256:	0718      	lsls	r0, r3, #28
 8007258:	d422      	bmi.n	80072a0 <__swsetup_r+0x64>
 800725a:	06d9      	lsls	r1, r3, #27
 800725c:	d407      	bmi.n	800726e <__swsetup_r+0x32>
 800725e:	2309      	movs	r3, #9
 8007260:	602b      	str	r3, [r5, #0]
 8007262:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007266:	f04f 30ff 	mov.w	r0, #4294967295
 800726a:	81a3      	strh	r3, [r4, #12]
 800726c:	e034      	b.n	80072d8 <__swsetup_r+0x9c>
 800726e:	0758      	lsls	r0, r3, #29
 8007270:	d512      	bpl.n	8007298 <__swsetup_r+0x5c>
 8007272:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007274:	b141      	cbz	r1, 8007288 <__swsetup_r+0x4c>
 8007276:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800727a:	4299      	cmp	r1, r3
 800727c:	d002      	beq.n	8007284 <__swsetup_r+0x48>
 800727e:	4628      	mov	r0, r5
 8007280:	f000 f8ae 	bl	80073e0 <_free_r>
 8007284:	2300      	movs	r3, #0
 8007286:	6363      	str	r3, [r4, #52]	; 0x34
 8007288:	89a3      	ldrh	r3, [r4, #12]
 800728a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800728e:	81a3      	strh	r3, [r4, #12]
 8007290:	2300      	movs	r3, #0
 8007292:	6063      	str	r3, [r4, #4]
 8007294:	6923      	ldr	r3, [r4, #16]
 8007296:	6023      	str	r3, [r4, #0]
 8007298:	89a3      	ldrh	r3, [r4, #12]
 800729a:	f043 0308 	orr.w	r3, r3, #8
 800729e:	81a3      	strh	r3, [r4, #12]
 80072a0:	6923      	ldr	r3, [r4, #16]
 80072a2:	b94b      	cbnz	r3, 80072b8 <__swsetup_r+0x7c>
 80072a4:	89a3      	ldrh	r3, [r4, #12]
 80072a6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80072aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072ae:	d003      	beq.n	80072b8 <__swsetup_r+0x7c>
 80072b0:	4621      	mov	r1, r4
 80072b2:	4628      	mov	r0, r5
 80072b4:	f000 fe85 	bl	8007fc2 <__smakebuf_r>
 80072b8:	89a0      	ldrh	r0, [r4, #12]
 80072ba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80072be:	f010 0301 	ands.w	r3, r0, #1
 80072c2:	d00a      	beq.n	80072da <__swsetup_r+0x9e>
 80072c4:	2300      	movs	r3, #0
 80072c6:	60a3      	str	r3, [r4, #8]
 80072c8:	6963      	ldr	r3, [r4, #20]
 80072ca:	425b      	negs	r3, r3
 80072cc:	61a3      	str	r3, [r4, #24]
 80072ce:	6923      	ldr	r3, [r4, #16]
 80072d0:	b943      	cbnz	r3, 80072e4 <__swsetup_r+0xa8>
 80072d2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80072d6:	d1c4      	bne.n	8007262 <__swsetup_r+0x26>
 80072d8:	bd38      	pop	{r3, r4, r5, pc}
 80072da:	0781      	lsls	r1, r0, #30
 80072dc:	bf58      	it	pl
 80072de:	6963      	ldrpl	r3, [r4, #20]
 80072e0:	60a3      	str	r3, [r4, #8]
 80072e2:	e7f4      	b.n	80072ce <__swsetup_r+0x92>
 80072e4:	2000      	movs	r0, #0
 80072e6:	e7f7      	b.n	80072d8 <__swsetup_r+0x9c>
 80072e8:	20000088 	.word	0x20000088

080072ec <memset>:
 80072ec:	4603      	mov	r3, r0
 80072ee:	4402      	add	r2, r0
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d100      	bne.n	80072f6 <memset+0xa>
 80072f4:	4770      	bx	lr
 80072f6:	f803 1b01 	strb.w	r1, [r3], #1
 80072fa:	e7f9      	b.n	80072f0 <memset+0x4>

080072fc <_close_r>:
 80072fc:	b538      	push	{r3, r4, r5, lr}
 80072fe:	2300      	movs	r3, #0
 8007300:	4d05      	ldr	r5, [pc, #20]	; (8007318 <_close_r+0x1c>)
 8007302:	4604      	mov	r4, r0
 8007304:	4608      	mov	r0, r1
 8007306:	602b      	str	r3, [r5, #0]
 8007308:	f7fb fe35 	bl	8002f76 <_close>
 800730c:	1c43      	adds	r3, r0, #1
 800730e:	d102      	bne.n	8007316 <_close_r+0x1a>
 8007310:	682b      	ldr	r3, [r5, #0]
 8007312:	b103      	cbz	r3, 8007316 <_close_r+0x1a>
 8007314:	6023      	str	r3, [r4, #0]
 8007316:	bd38      	pop	{r3, r4, r5, pc}
 8007318:	20000628 	.word	0x20000628

0800731c <_lseek_r>:
 800731c:	b538      	push	{r3, r4, r5, lr}
 800731e:	4604      	mov	r4, r0
 8007320:	4608      	mov	r0, r1
 8007322:	4611      	mov	r1, r2
 8007324:	2200      	movs	r2, #0
 8007326:	4d05      	ldr	r5, [pc, #20]	; (800733c <_lseek_r+0x20>)
 8007328:	602a      	str	r2, [r5, #0]
 800732a:	461a      	mov	r2, r3
 800732c:	f7fb fe47 	bl	8002fbe <_lseek>
 8007330:	1c43      	adds	r3, r0, #1
 8007332:	d102      	bne.n	800733a <_lseek_r+0x1e>
 8007334:	682b      	ldr	r3, [r5, #0]
 8007336:	b103      	cbz	r3, 800733a <_lseek_r+0x1e>
 8007338:	6023      	str	r3, [r4, #0]
 800733a:	bd38      	pop	{r3, r4, r5, pc}
 800733c:	20000628 	.word	0x20000628

08007340 <_read_r>:
 8007340:	b538      	push	{r3, r4, r5, lr}
 8007342:	4604      	mov	r4, r0
 8007344:	4608      	mov	r0, r1
 8007346:	4611      	mov	r1, r2
 8007348:	2200      	movs	r2, #0
 800734a:	4d05      	ldr	r5, [pc, #20]	; (8007360 <_read_r+0x20>)
 800734c:	602a      	str	r2, [r5, #0]
 800734e:	461a      	mov	r2, r3
 8007350:	f7fb fdd8 	bl	8002f04 <_read>
 8007354:	1c43      	adds	r3, r0, #1
 8007356:	d102      	bne.n	800735e <_read_r+0x1e>
 8007358:	682b      	ldr	r3, [r5, #0]
 800735a:	b103      	cbz	r3, 800735e <_read_r+0x1e>
 800735c:	6023      	str	r3, [r4, #0]
 800735e:	bd38      	pop	{r3, r4, r5, pc}
 8007360:	20000628 	.word	0x20000628

08007364 <_write_r>:
 8007364:	b538      	push	{r3, r4, r5, lr}
 8007366:	4604      	mov	r4, r0
 8007368:	4608      	mov	r0, r1
 800736a:	4611      	mov	r1, r2
 800736c:	2200      	movs	r2, #0
 800736e:	4d05      	ldr	r5, [pc, #20]	; (8007384 <_write_r+0x20>)
 8007370:	602a      	str	r2, [r5, #0]
 8007372:	461a      	mov	r2, r3
 8007374:	f7fb fde3 	bl	8002f3e <_write>
 8007378:	1c43      	adds	r3, r0, #1
 800737a:	d102      	bne.n	8007382 <_write_r+0x1e>
 800737c:	682b      	ldr	r3, [r5, #0]
 800737e:	b103      	cbz	r3, 8007382 <_write_r+0x1e>
 8007380:	6023      	str	r3, [r4, #0]
 8007382:	bd38      	pop	{r3, r4, r5, pc}
 8007384:	20000628 	.word	0x20000628

08007388 <__errno>:
 8007388:	4b01      	ldr	r3, [pc, #4]	; (8007390 <__errno+0x8>)
 800738a:	6818      	ldr	r0, [r3, #0]
 800738c:	4770      	bx	lr
 800738e:	bf00      	nop
 8007390:	20000088 	.word	0x20000088

08007394 <__libc_init_array>:
 8007394:	b570      	push	{r4, r5, r6, lr}
 8007396:	2600      	movs	r6, #0
 8007398:	4d0c      	ldr	r5, [pc, #48]	; (80073cc <__libc_init_array+0x38>)
 800739a:	4c0d      	ldr	r4, [pc, #52]	; (80073d0 <__libc_init_array+0x3c>)
 800739c:	1b64      	subs	r4, r4, r5
 800739e:	10a4      	asrs	r4, r4, #2
 80073a0:	42a6      	cmp	r6, r4
 80073a2:	d109      	bne.n	80073b8 <__libc_init_array+0x24>
 80073a4:	f000 feea 	bl	800817c <_init>
 80073a8:	2600      	movs	r6, #0
 80073aa:	4d0a      	ldr	r5, [pc, #40]	; (80073d4 <__libc_init_array+0x40>)
 80073ac:	4c0a      	ldr	r4, [pc, #40]	; (80073d8 <__libc_init_array+0x44>)
 80073ae:	1b64      	subs	r4, r4, r5
 80073b0:	10a4      	asrs	r4, r4, #2
 80073b2:	42a6      	cmp	r6, r4
 80073b4:	d105      	bne.n	80073c2 <__libc_init_array+0x2e>
 80073b6:	bd70      	pop	{r4, r5, r6, pc}
 80073b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80073bc:	4798      	blx	r3
 80073be:	3601      	adds	r6, #1
 80073c0:	e7ee      	b.n	80073a0 <__libc_init_array+0xc>
 80073c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80073c6:	4798      	blx	r3
 80073c8:	3601      	adds	r6, #1
 80073ca:	e7f2      	b.n	80073b2 <__libc_init_array+0x1e>
 80073cc:	080083cc 	.word	0x080083cc
 80073d0:	080083cc 	.word	0x080083cc
 80073d4:	080083cc 	.word	0x080083cc
 80073d8:	080083d0 	.word	0x080083d0

080073dc <__retarget_lock_acquire_recursive>:
 80073dc:	4770      	bx	lr

080073de <__retarget_lock_release_recursive>:
 80073de:	4770      	bx	lr

080073e0 <_free_r>:
 80073e0:	b538      	push	{r3, r4, r5, lr}
 80073e2:	4605      	mov	r5, r0
 80073e4:	2900      	cmp	r1, #0
 80073e6:	d040      	beq.n	800746a <_free_r+0x8a>
 80073e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073ec:	1f0c      	subs	r4, r1, #4
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	bfb8      	it	lt
 80073f2:	18e4      	addlt	r4, r4, r3
 80073f4:	f000 f8dc 	bl	80075b0 <__malloc_lock>
 80073f8:	4a1c      	ldr	r2, [pc, #112]	; (800746c <_free_r+0x8c>)
 80073fa:	6813      	ldr	r3, [r2, #0]
 80073fc:	b933      	cbnz	r3, 800740c <_free_r+0x2c>
 80073fe:	6063      	str	r3, [r4, #4]
 8007400:	6014      	str	r4, [r2, #0]
 8007402:	4628      	mov	r0, r5
 8007404:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007408:	f000 b8d8 	b.w	80075bc <__malloc_unlock>
 800740c:	42a3      	cmp	r3, r4
 800740e:	d908      	bls.n	8007422 <_free_r+0x42>
 8007410:	6820      	ldr	r0, [r4, #0]
 8007412:	1821      	adds	r1, r4, r0
 8007414:	428b      	cmp	r3, r1
 8007416:	bf01      	itttt	eq
 8007418:	6819      	ldreq	r1, [r3, #0]
 800741a:	685b      	ldreq	r3, [r3, #4]
 800741c:	1809      	addeq	r1, r1, r0
 800741e:	6021      	streq	r1, [r4, #0]
 8007420:	e7ed      	b.n	80073fe <_free_r+0x1e>
 8007422:	461a      	mov	r2, r3
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	b10b      	cbz	r3, 800742c <_free_r+0x4c>
 8007428:	42a3      	cmp	r3, r4
 800742a:	d9fa      	bls.n	8007422 <_free_r+0x42>
 800742c:	6811      	ldr	r1, [r2, #0]
 800742e:	1850      	adds	r0, r2, r1
 8007430:	42a0      	cmp	r0, r4
 8007432:	d10b      	bne.n	800744c <_free_r+0x6c>
 8007434:	6820      	ldr	r0, [r4, #0]
 8007436:	4401      	add	r1, r0
 8007438:	1850      	adds	r0, r2, r1
 800743a:	4283      	cmp	r3, r0
 800743c:	6011      	str	r1, [r2, #0]
 800743e:	d1e0      	bne.n	8007402 <_free_r+0x22>
 8007440:	6818      	ldr	r0, [r3, #0]
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	4408      	add	r0, r1
 8007446:	6010      	str	r0, [r2, #0]
 8007448:	6053      	str	r3, [r2, #4]
 800744a:	e7da      	b.n	8007402 <_free_r+0x22>
 800744c:	d902      	bls.n	8007454 <_free_r+0x74>
 800744e:	230c      	movs	r3, #12
 8007450:	602b      	str	r3, [r5, #0]
 8007452:	e7d6      	b.n	8007402 <_free_r+0x22>
 8007454:	6820      	ldr	r0, [r4, #0]
 8007456:	1821      	adds	r1, r4, r0
 8007458:	428b      	cmp	r3, r1
 800745a:	bf01      	itttt	eq
 800745c:	6819      	ldreq	r1, [r3, #0]
 800745e:	685b      	ldreq	r3, [r3, #4]
 8007460:	1809      	addeq	r1, r1, r0
 8007462:	6021      	streq	r1, [r4, #0]
 8007464:	6063      	str	r3, [r4, #4]
 8007466:	6054      	str	r4, [r2, #4]
 8007468:	e7cb      	b.n	8007402 <_free_r+0x22>
 800746a:	bd38      	pop	{r3, r4, r5, pc}
 800746c:	20000630 	.word	0x20000630

08007470 <sbrk_aligned>:
 8007470:	b570      	push	{r4, r5, r6, lr}
 8007472:	4e0e      	ldr	r6, [pc, #56]	; (80074ac <sbrk_aligned+0x3c>)
 8007474:	460c      	mov	r4, r1
 8007476:	6831      	ldr	r1, [r6, #0]
 8007478:	4605      	mov	r5, r0
 800747a:	b911      	cbnz	r1, 8007482 <sbrk_aligned+0x12>
 800747c:	f000 fe1a 	bl	80080b4 <_sbrk_r>
 8007480:	6030      	str	r0, [r6, #0]
 8007482:	4621      	mov	r1, r4
 8007484:	4628      	mov	r0, r5
 8007486:	f000 fe15 	bl	80080b4 <_sbrk_r>
 800748a:	1c43      	adds	r3, r0, #1
 800748c:	d00a      	beq.n	80074a4 <sbrk_aligned+0x34>
 800748e:	1cc4      	adds	r4, r0, #3
 8007490:	f024 0403 	bic.w	r4, r4, #3
 8007494:	42a0      	cmp	r0, r4
 8007496:	d007      	beq.n	80074a8 <sbrk_aligned+0x38>
 8007498:	1a21      	subs	r1, r4, r0
 800749a:	4628      	mov	r0, r5
 800749c:	f000 fe0a 	bl	80080b4 <_sbrk_r>
 80074a0:	3001      	adds	r0, #1
 80074a2:	d101      	bne.n	80074a8 <sbrk_aligned+0x38>
 80074a4:	f04f 34ff 	mov.w	r4, #4294967295
 80074a8:	4620      	mov	r0, r4
 80074aa:	bd70      	pop	{r4, r5, r6, pc}
 80074ac:	20000634 	.word	0x20000634

080074b0 <_malloc_r>:
 80074b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074b4:	1ccd      	adds	r5, r1, #3
 80074b6:	f025 0503 	bic.w	r5, r5, #3
 80074ba:	3508      	adds	r5, #8
 80074bc:	2d0c      	cmp	r5, #12
 80074be:	bf38      	it	cc
 80074c0:	250c      	movcc	r5, #12
 80074c2:	2d00      	cmp	r5, #0
 80074c4:	4607      	mov	r7, r0
 80074c6:	db01      	blt.n	80074cc <_malloc_r+0x1c>
 80074c8:	42a9      	cmp	r1, r5
 80074ca:	d905      	bls.n	80074d8 <_malloc_r+0x28>
 80074cc:	230c      	movs	r3, #12
 80074ce:	2600      	movs	r6, #0
 80074d0:	603b      	str	r3, [r7, #0]
 80074d2:	4630      	mov	r0, r6
 80074d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074d8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80075ac <_malloc_r+0xfc>
 80074dc:	f000 f868 	bl	80075b0 <__malloc_lock>
 80074e0:	f8d8 3000 	ldr.w	r3, [r8]
 80074e4:	461c      	mov	r4, r3
 80074e6:	bb5c      	cbnz	r4, 8007540 <_malloc_r+0x90>
 80074e8:	4629      	mov	r1, r5
 80074ea:	4638      	mov	r0, r7
 80074ec:	f7ff ffc0 	bl	8007470 <sbrk_aligned>
 80074f0:	1c43      	adds	r3, r0, #1
 80074f2:	4604      	mov	r4, r0
 80074f4:	d155      	bne.n	80075a2 <_malloc_r+0xf2>
 80074f6:	f8d8 4000 	ldr.w	r4, [r8]
 80074fa:	4626      	mov	r6, r4
 80074fc:	2e00      	cmp	r6, #0
 80074fe:	d145      	bne.n	800758c <_malloc_r+0xdc>
 8007500:	2c00      	cmp	r4, #0
 8007502:	d048      	beq.n	8007596 <_malloc_r+0xe6>
 8007504:	6823      	ldr	r3, [r4, #0]
 8007506:	4631      	mov	r1, r6
 8007508:	4638      	mov	r0, r7
 800750a:	eb04 0903 	add.w	r9, r4, r3
 800750e:	f000 fdd1 	bl	80080b4 <_sbrk_r>
 8007512:	4581      	cmp	r9, r0
 8007514:	d13f      	bne.n	8007596 <_malloc_r+0xe6>
 8007516:	6821      	ldr	r1, [r4, #0]
 8007518:	4638      	mov	r0, r7
 800751a:	1a6d      	subs	r5, r5, r1
 800751c:	4629      	mov	r1, r5
 800751e:	f7ff ffa7 	bl	8007470 <sbrk_aligned>
 8007522:	3001      	adds	r0, #1
 8007524:	d037      	beq.n	8007596 <_malloc_r+0xe6>
 8007526:	6823      	ldr	r3, [r4, #0]
 8007528:	442b      	add	r3, r5
 800752a:	6023      	str	r3, [r4, #0]
 800752c:	f8d8 3000 	ldr.w	r3, [r8]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d038      	beq.n	80075a6 <_malloc_r+0xf6>
 8007534:	685a      	ldr	r2, [r3, #4]
 8007536:	42a2      	cmp	r2, r4
 8007538:	d12b      	bne.n	8007592 <_malloc_r+0xe2>
 800753a:	2200      	movs	r2, #0
 800753c:	605a      	str	r2, [r3, #4]
 800753e:	e00f      	b.n	8007560 <_malloc_r+0xb0>
 8007540:	6822      	ldr	r2, [r4, #0]
 8007542:	1b52      	subs	r2, r2, r5
 8007544:	d41f      	bmi.n	8007586 <_malloc_r+0xd6>
 8007546:	2a0b      	cmp	r2, #11
 8007548:	d917      	bls.n	800757a <_malloc_r+0xca>
 800754a:	1961      	adds	r1, r4, r5
 800754c:	42a3      	cmp	r3, r4
 800754e:	6025      	str	r5, [r4, #0]
 8007550:	bf18      	it	ne
 8007552:	6059      	strne	r1, [r3, #4]
 8007554:	6863      	ldr	r3, [r4, #4]
 8007556:	bf08      	it	eq
 8007558:	f8c8 1000 	streq.w	r1, [r8]
 800755c:	5162      	str	r2, [r4, r5]
 800755e:	604b      	str	r3, [r1, #4]
 8007560:	4638      	mov	r0, r7
 8007562:	f104 060b 	add.w	r6, r4, #11
 8007566:	f000 f829 	bl	80075bc <__malloc_unlock>
 800756a:	f026 0607 	bic.w	r6, r6, #7
 800756e:	1d23      	adds	r3, r4, #4
 8007570:	1af2      	subs	r2, r6, r3
 8007572:	d0ae      	beq.n	80074d2 <_malloc_r+0x22>
 8007574:	1b9b      	subs	r3, r3, r6
 8007576:	50a3      	str	r3, [r4, r2]
 8007578:	e7ab      	b.n	80074d2 <_malloc_r+0x22>
 800757a:	42a3      	cmp	r3, r4
 800757c:	6862      	ldr	r2, [r4, #4]
 800757e:	d1dd      	bne.n	800753c <_malloc_r+0x8c>
 8007580:	f8c8 2000 	str.w	r2, [r8]
 8007584:	e7ec      	b.n	8007560 <_malloc_r+0xb0>
 8007586:	4623      	mov	r3, r4
 8007588:	6864      	ldr	r4, [r4, #4]
 800758a:	e7ac      	b.n	80074e6 <_malloc_r+0x36>
 800758c:	4634      	mov	r4, r6
 800758e:	6876      	ldr	r6, [r6, #4]
 8007590:	e7b4      	b.n	80074fc <_malloc_r+0x4c>
 8007592:	4613      	mov	r3, r2
 8007594:	e7cc      	b.n	8007530 <_malloc_r+0x80>
 8007596:	230c      	movs	r3, #12
 8007598:	4638      	mov	r0, r7
 800759a:	603b      	str	r3, [r7, #0]
 800759c:	f000 f80e 	bl	80075bc <__malloc_unlock>
 80075a0:	e797      	b.n	80074d2 <_malloc_r+0x22>
 80075a2:	6025      	str	r5, [r4, #0]
 80075a4:	e7dc      	b.n	8007560 <_malloc_r+0xb0>
 80075a6:	605b      	str	r3, [r3, #4]
 80075a8:	deff      	udf	#255	; 0xff
 80075aa:	bf00      	nop
 80075ac:	20000630 	.word	0x20000630

080075b0 <__malloc_lock>:
 80075b0:	4801      	ldr	r0, [pc, #4]	; (80075b8 <__malloc_lock+0x8>)
 80075b2:	f7ff bf13 	b.w	80073dc <__retarget_lock_acquire_recursive>
 80075b6:	bf00      	nop
 80075b8:	2000062c 	.word	0x2000062c

080075bc <__malloc_unlock>:
 80075bc:	4801      	ldr	r0, [pc, #4]	; (80075c4 <__malloc_unlock+0x8>)
 80075be:	f7ff bf0e 	b.w	80073de <__retarget_lock_release_recursive>
 80075c2:	bf00      	nop
 80075c4:	2000062c 	.word	0x2000062c

080075c8 <__ssputs_r>:
 80075c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075cc:	461f      	mov	r7, r3
 80075ce:	688e      	ldr	r6, [r1, #8]
 80075d0:	4682      	mov	sl, r0
 80075d2:	42be      	cmp	r6, r7
 80075d4:	460c      	mov	r4, r1
 80075d6:	4690      	mov	r8, r2
 80075d8:	680b      	ldr	r3, [r1, #0]
 80075da:	d82c      	bhi.n	8007636 <__ssputs_r+0x6e>
 80075dc:	898a      	ldrh	r2, [r1, #12]
 80075de:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80075e2:	d026      	beq.n	8007632 <__ssputs_r+0x6a>
 80075e4:	6965      	ldr	r5, [r4, #20]
 80075e6:	6909      	ldr	r1, [r1, #16]
 80075e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80075ec:	eba3 0901 	sub.w	r9, r3, r1
 80075f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80075f4:	1c7b      	adds	r3, r7, #1
 80075f6:	444b      	add	r3, r9
 80075f8:	106d      	asrs	r5, r5, #1
 80075fa:	429d      	cmp	r5, r3
 80075fc:	bf38      	it	cc
 80075fe:	461d      	movcc	r5, r3
 8007600:	0553      	lsls	r3, r2, #21
 8007602:	d527      	bpl.n	8007654 <__ssputs_r+0x8c>
 8007604:	4629      	mov	r1, r5
 8007606:	f7ff ff53 	bl	80074b0 <_malloc_r>
 800760a:	4606      	mov	r6, r0
 800760c:	b360      	cbz	r0, 8007668 <__ssputs_r+0xa0>
 800760e:	464a      	mov	r2, r9
 8007610:	6921      	ldr	r1, [r4, #16]
 8007612:	f000 fd6d 	bl	80080f0 <memcpy>
 8007616:	89a3      	ldrh	r3, [r4, #12]
 8007618:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800761c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007620:	81a3      	strh	r3, [r4, #12]
 8007622:	6126      	str	r6, [r4, #16]
 8007624:	444e      	add	r6, r9
 8007626:	6026      	str	r6, [r4, #0]
 8007628:	463e      	mov	r6, r7
 800762a:	6165      	str	r5, [r4, #20]
 800762c:	eba5 0509 	sub.w	r5, r5, r9
 8007630:	60a5      	str	r5, [r4, #8]
 8007632:	42be      	cmp	r6, r7
 8007634:	d900      	bls.n	8007638 <__ssputs_r+0x70>
 8007636:	463e      	mov	r6, r7
 8007638:	4632      	mov	r2, r6
 800763a:	4641      	mov	r1, r8
 800763c:	6820      	ldr	r0, [r4, #0]
 800763e:	f000 fcfc 	bl	800803a <memmove>
 8007642:	2000      	movs	r0, #0
 8007644:	68a3      	ldr	r3, [r4, #8]
 8007646:	1b9b      	subs	r3, r3, r6
 8007648:	60a3      	str	r3, [r4, #8]
 800764a:	6823      	ldr	r3, [r4, #0]
 800764c:	4433      	add	r3, r6
 800764e:	6023      	str	r3, [r4, #0]
 8007650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007654:	462a      	mov	r2, r5
 8007656:	f000 fd59 	bl	800810c <_realloc_r>
 800765a:	4606      	mov	r6, r0
 800765c:	2800      	cmp	r0, #0
 800765e:	d1e0      	bne.n	8007622 <__ssputs_r+0x5a>
 8007660:	4650      	mov	r0, sl
 8007662:	6921      	ldr	r1, [r4, #16]
 8007664:	f7ff febc 	bl	80073e0 <_free_r>
 8007668:	230c      	movs	r3, #12
 800766a:	f8ca 3000 	str.w	r3, [sl]
 800766e:	89a3      	ldrh	r3, [r4, #12]
 8007670:	f04f 30ff 	mov.w	r0, #4294967295
 8007674:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007678:	81a3      	strh	r3, [r4, #12]
 800767a:	e7e9      	b.n	8007650 <__ssputs_r+0x88>

0800767c <_svfiprintf_r>:
 800767c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007680:	4698      	mov	r8, r3
 8007682:	898b      	ldrh	r3, [r1, #12]
 8007684:	4607      	mov	r7, r0
 8007686:	061b      	lsls	r3, r3, #24
 8007688:	460d      	mov	r5, r1
 800768a:	4614      	mov	r4, r2
 800768c:	b09d      	sub	sp, #116	; 0x74
 800768e:	d50e      	bpl.n	80076ae <_svfiprintf_r+0x32>
 8007690:	690b      	ldr	r3, [r1, #16]
 8007692:	b963      	cbnz	r3, 80076ae <_svfiprintf_r+0x32>
 8007694:	2140      	movs	r1, #64	; 0x40
 8007696:	f7ff ff0b 	bl	80074b0 <_malloc_r>
 800769a:	6028      	str	r0, [r5, #0]
 800769c:	6128      	str	r0, [r5, #16]
 800769e:	b920      	cbnz	r0, 80076aa <_svfiprintf_r+0x2e>
 80076a0:	230c      	movs	r3, #12
 80076a2:	603b      	str	r3, [r7, #0]
 80076a4:	f04f 30ff 	mov.w	r0, #4294967295
 80076a8:	e0d0      	b.n	800784c <_svfiprintf_r+0x1d0>
 80076aa:	2340      	movs	r3, #64	; 0x40
 80076ac:	616b      	str	r3, [r5, #20]
 80076ae:	2300      	movs	r3, #0
 80076b0:	9309      	str	r3, [sp, #36]	; 0x24
 80076b2:	2320      	movs	r3, #32
 80076b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80076b8:	2330      	movs	r3, #48	; 0x30
 80076ba:	f04f 0901 	mov.w	r9, #1
 80076be:	f8cd 800c 	str.w	r8, [sp, #12]
 80076c2:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8007864 <_svfiprintf_r+0x1e8>
 80076c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80076ca:	4623      	mov	r3, r4
 80076cc:	469a      	mov	sl, r3
 80076ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80076d2:	b10a      	cbz	r2, 80076d8 <_svfiprintf_r+0x5c>
 80076d4:	2a25      	cmp	r2, #37	; 0x25
 80076d6:	d1f9      	bne.n	80076cc <_svfiprintf_r+0x50>
 80076d8:	ebba 0b04 	subs.w	fp, sl, r4
 80076dc:	d00b      	beq.n	80076f6 <_svfiprintf_r+0x7a>
 80076de:	465b      	mov	r3, fp
 80076e0:	4622      	mov	r2, r4
 80076e2:	4629      	mov	r1, r5
 80076e4:	4638      	mov	r0, r7
 80076e6:	f7ff ff6f 	bl	80075c8 <__ssputs_r>
 80076ea:	3001      	adds	r0, #1
 80076ec:	f000 80a9 	beq.w	8007842 <_svfiprintf_r+0x1c6>
 80076f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80076f2:	445a      	add	r2, fp
 80076f4:	9209      	str	r2, [sp, #36]	; 0x24
 80076f6:	f89a 3000 	ldrb.w	r3, [sl]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	f000 80a1 	beq.w	8007842 <_svfiprintf_r+0x1c6>
 8007700:	2300      	movs	r3, #0
 8007702:	f04f 32ff 	mov.w	r2, #4294967295
 8007706:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800770a:	f10a 0a01 	add.w	sl, sl, #1
 800770e:	9304      	str	r3, [sp, #16]
 8007710:	9307      	str	r3, [sp, #28]
 8007712:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007716:	931a      	str	r3, [sp, #104]	; 0x68
 8007718:	4654      	mov	r4, sl
 800771a:	2205      	movs	r2, #5
 800771c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007720:	4850      	ldr	r0, [pc, #320]	; (8007864 <_svfiprintf_r+0x1e8>)
 8007722:	f000 fcd7 	bl	80080d4 <memchr>
 8007726:	9a04      	ldr	r2, [sp, #16]
 8007728:	b9d8      	cbnz	r0, 8007762 <_svfiprintf_r+0xe6>
 800772a:	06d0      	lsls	r0, r2, #27
 800772c:	bf44      	itt	mi
 800772e:	2320      	movmi	r3, #32
 8007730:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007734:	0711      	lsls	r1, r2, #28
 8007736:	bf44      	itt	mi
 8007738:	232b      	movmi	r3, #43	; 0x2b
 800773a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800773e:	f89a 3000 	ldrb.w	r3, [sl]
 8007742:	2b2a      	cmp	r3, #42	; 0x2a
 8007744:	d015      	beq.n	8007772 <_svfiprintf_r+0xf6>
 8007746:	4654      	mov	r4, sl
 8007748:	2000      	movs	r0, #0
 800774a:	f04f 0c0a 	mov.w	ip, #10
 800774e:	9a07      	ldr	r2, [sp, #28]
 8007750:	4621      	mov	r1, r4
 8007752:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007756:	3b30      	subs	r3, #48	; 0x30
 8007758:	2b09      	cmp	r3, #9
 800775a:	d94d      	bls.n	80077f8 <_svfiprintf_r+0x17c>
 800775c:	b1b0      	cbz	r0, 800778c <_svfiprintf_r+0x110>
 800775e:	9207      	str	r2, [sp, #28]
 8007760:	e014      	b.n	800778c <_svfiprintf_r+0x110>
 8007762:	eba0 0308 	sub.w	r3, r0, r8
 8007766:	fa09 f303 	lsl.w	r3, r9, r3
 800776a:	4313      	orrs	r3, r2
 800776c:	46a2      	mov	sl, r4
 800776e:	9304      	str	r3, [sp, #16]
 8007770:	e7d2      	b.n	8007718 <_svfiprintf_r+0x9c>
 8007772:	9b03      	ldr	r3, [sp, #12]
 8007774:	1d19      	adds	r1, r3, #4
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	9103      	str	r1, [sp, #12]
 800777a:	2b00      	cmp	r3, #0
 800777c:	bfbb      	ittet	lt
 800777e:	425b      	neglt	r3, r3
 8007780:	f042 0202 	orrlt.w	r2, r2, #2
 8007784:	9307      	strge	r3, [sp, #28]
 8007786:	9307      	strlt	r3, [sp, #28]
 8007788:	bfb8      	it	lt
 800778a:	9204      	strlt	r2, [sp, #16]
 800778c:	7823      	ldrb	r3, [r4, #0]
 800778e:	2b2e      	cmp	r3, #46	; 0x2e
 8007790:	d10c      	bne.n	80077ac <_svfiprintf_r+0x130>
 8007792:	7863      	ldrb	r3, [r4, #1]
 8007794:	2b2a      	cmp	r3, #42	; 0x2a
 8007796:	d134      	bne.n	8007802 <_svfiprintf_r+0x186>
 8007798:	9b03      	ldr	r3, [sp, #12]
 800779a:	3402      	adds	r4, #2
 800779c:	1d1a      	adds	r2, r3, #4
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	9203      	str	r2, [sp, #12]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	bfb8      	it	lt
 80077a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80077aa:	9305      	str	r3, [sp, #20]
 80077ac:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8007868 <_svfiprintf_r+0x1ec>
 80077b0:	2203      	movs	r2, #3
 80077b2:	4650      	mov	r0, sl
 80077b4:	7821      	ldrb	r1, [r4, #0]
 80077b6:	f000 fc8d 	bl	80080d4 <memchr>
 80077ba:	b138      	cbz	r0, 80077cc <_svfiprintf_r+0x150>
 80077bc:	2240      	movs	r2, #64	; 0x40
 80077be:	9b04      	ldr	r3, [sp, #16]
 80077c0:	eba0 000a 	sub.w	r0, r0, sl
 80077c4:	4082      	lsls	r2, r0
 80077c6:	4313      	orrs	r3, r2
 80077c8:	3401      	adds	r4, #1
 80077ca:	9304      	str	r3, [sp, #16]
 80077cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077d0:	2206      	movs	r2, #6
 80077d2:	4826      	ldr	r0, [pc, #152]	; (800786c <_svfiprintf_r+0x1f0>)
 80077d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80077d8:	f000 fc7c 	bl	80080d4 <memchr>
 80077dc:	2800      	cmp	r0, #0
 80077de:	d038      	beq.n	8007852 <_svfiprintf_r+0x1d6>
 80077e0:	4b23      	ldr	r3, [pc, #140]	; (8007870 <_svfiprintf_r+0x1f4>)
 80077e2:	bb1b      	cbnz	r3, 800782c <_svfiprintf_r+0x1b0>
 80077e4:	9b03      	ldr	r3, [sp, #12]
 80077e6:	3307      	adds	r3, #7
 80077e8:	f023 0307 	bic.w	r3, r3, #7
 80077ec:	3308      	adds	r3, #8
 80077ee:	9303      	str	r3, [sp, #12]
 80077f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077f2:	4433      	add	r3, r6
 80077f4:	9309      	str	r3, [sp, #36]	; 0x24
 80077f6:	e768      	b.n	80076ca <_svfiprintf_r+0x4e>
 80077f8:	460c      	mov	r4, r1
 80077fa:	2001      	movs	r0, #1
 80077fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8007800:	e7a6      	b.n	8007750 <_svfiprintf_r+0xd4>
 8007802:	2300      	movs	r3, #0
 8007804:	f04f 0c0a 	mov.w	ip, #10
 8007808:	4619      	mov	r1, r3
 800780a:	3401      	adds	r4, #1
 800780c:	9305      	str	r3, [sp, #20]
 800780e:	4620      	mov	r0, r4
 8007810:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007814:	3a30      	subs	r2, #48	; 0x30
 8007816:	2a09      	cmp	r2, #9
 8007818:	d903      	bls.n	8007822 <_svfiprintf_r+0x1a6>
 800781a:	2b00      	cmp	r3, #0
 800781c:	d0c6      	beq.n	80077ac <_svfiprintf_r+0x130>
 800781e:	9105      	str	r1, [sp, #20]
 8007820:	e7c4      	b.n	80077ac <_svfiprintf_r+0x130>
 8007822:	4604      	mov	r4, r0
 8007824:	2301      	movs	r3, #1
 8007826:	fb0c 2101 	mla	r1, ip, r1, r2
 800782a:	e7f0      	b.n	800780e <_svfiprintf_r+0x192>
 800782c:	ab03      	add	r3, sp, #12
 800782e:	9300      	str	r3, [sp, #0]
 8007830:	462a      	mov	r2, r5
 8007832:	4638      	mov	r0, r7
 8007834:	4b0f      	ldr	r3, [pc, #60]	; (8007874 <_svfiprintf_r+0x1f8>)
 8007836:	a904      	add	r1, sp, #16
 8007838:	f3af 8000 	nop.w
 800783c:	1c42      	adds	r2, r0, #1
 800783e:	4606      	mov	r6, r0
 8007840:	d1d6      	bne.n	80077f0 <_svfiprintf_r+0x174>
 8007842:	89ab      	ldrh	r3, [r5, #12]
 8007844:	065b      	lsls	r3, r3, #25
 8007846:	f53f af2d 	bmi.w	80076a4 <_svfiprintf_r+0x28>
 800784a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800784c:	b01d      	add	sp, #116	; 0x74
 800784e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007852:	ab03      	add	r3, sp, #12
 8007854:	9300      	str	r3, [sp, #0]
 8007856:	462a      	mov	r2, r5
 8007858:	4638      	mov	r0, r7
 800785a:	4b06      	ldr	r3, [pc, #24]	; (8007874 <_svfiprintf_r+0x1f8>)
 800785c:	a904      	add	r1, sp, #16
 800785e:	f000 f9bf 	bl	8007be0 <_printf_i>
 8007862:	e7eb      	b.n	800783c <_svfiprintf_r+0x1c0>
 8007864:	08008396 	.word	0x08008396
 8007868:	0800839c 	.word	0x0800839c
 800786c:	080083a0 	.word	0x080083a0
 8007870:	00000000 	.word	0x00000000
 8007874:	080075c9 	.word	0x080075c9

08007878 <__sfputc_r>:
 8007878:	6893      	ldr	r3, [r2, #8]
 800787a:	b410      	push	{r4}
 800787c:	3b01      	subs	r3, #1
 800787e:	2b00      	cmp	r3, #0
 8007880:	6093      	str	r3, [r2, #8]
 8007882:	da07      	bge.n	8007894 <__sfputc_r+0x1c>
 8007884:	6994      	ldr	r4, [r2, #24]
 8007886:	42a3      	cmp	r3, r4
 8007888:	db01      	blt.n	800788e <__sfputc_r+0x16>
 800788a:	290a      	cmp	r1, #10
 800788c:	d102      	bne.n	8007894 <__sfputc_r+0x1c>
 800788e:	bc10      	pop	{r4}
 8007890:	f7ff bc97 	b.w	80071c2 <__swbuf_r>
 8007894:	6813      	ldr	r3, [r2, #0]
 8007896:	1c58      	adds	r0, r3, #1
 8007898:	6010      	str	r0, [r2, #0]
 800789a:	7019      	strb	r1, [r3, #0]
 800789c:	4608      	mov	r0, r1
 800789e:	bc10      	pop	{r4}
 80078a0:	4770      	bx	lr

080078a2 <__sfputs_r>:
 80078a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078a4:	4606      	mov	r6, r0
 80078a6:	460f      	mov	r7, r1
 80078a8:	4614      	mov	r4, r2
 80078aa:	18d5      	adds	r5, r2, r3
 80078ac:	42ac      	cmp	r4, r5
 80078ae:	d101      	bne.n	80078b4 <__sfputs_r+0x12>
 80078b0:	2000      	movs	r0, #0
 80078b2:	e007      	b.n	80078c4 <__sfputs_r+0x22>
 80078b4:	463a      	mov	r2, r7
 80078b6:	4630      	mov	r0, r6
 80078b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078bc:	f7ff ffdc 	bl	8007878 <__sfputc_r>
 80078c0:	1c43      	adds	r3, r0, #1
 80078c2:	d1f3      	bne.n	80078ac <__sfputs_r+0xa>
 80078c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080078c8 <_vfiprintf_r>:
 80078c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078cc:	460d      	mov	r5, r1
 80078ce:	4614      	mov	r4, r2
 80078d0:	4698      	mov	r8, r3
 80078d2:	4606      	mov	r6, r0
 80078d4:	b09d      	sub	sp, #116	; 0x74
 80078d6:	b118      	cbz	r0, 80078e0 <_vfiprintf_r+0x18>
 80078d8:	6a03      	ldr	r3, [r0, #32]
 80078da:	b90b      	cbnz	r3, 80078e0 <_vfiprintf_r+0x18>
 80078dc:	f7ff fb56 	bl	8006f8c <__sinit>
 80078e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80078e2:	07d9      	lsls	r1, r3, #31
 80078e4:	d405      	bmi.n	80078f2 <_vfiprintf_r+0x2a>
 80078e6:	89ab      	ldrh	r3, [r5, #12]
 80078e8:	059a      	lsls	r2, r3, #22
 80078ea:	d402      	bmi.n	80078f2 <_vfiprintf_r+0x2a>
 80078ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80078ee:	f7ff fd75 	bl	80073dc <__retarget_lock_acquire_recursive>
 80078f2:	89ab      	ldrh	r3, [r5, #12]
 80078f4:	071b      	lsls	r3, r3, #28
 80078f6:	d501      	bpl.n	80078fc <_vfiprintf_r+0x34>
 80078f8:	692b      	ldr	r3, [r5, #16]
 80078fa:	b99b      	cbnz	r3, 8007924 <_vfiprintf_r+0x5c>
 80078fc:	4629      	mov	r1, r5
 80078fe:	4630      	mov	r0, r6
 8007900:	f7ff fc9c 	bl	800723c <__swsetup_r>
 8007904:	b170      	cbz	r0, 8007924 <_vfiprintf_r+0x5c>
 8007906:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007908:	07dc      	lsls	r4, r3, #31
 800790a:	d504      	bpl.n	8007916 <_vfiprintf_r+0x4e>
 800790c:	f04f 30ff 	mov.w	r0, #4294967295
 8007910:	b01d      	add	sp, #116	; 0x74
 8007912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007916:	89ab      	ldrh	r3, [r5, #12]
 8007918:	0598      	lsls	r0, r3, #22
 800791a:	d4f7      	bmi.n	800790c <_vfiprintf_r+0x44>
 800791c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800791e:	f7ff fd5e 	bl	80073de <__retarget_lock_release_recursive>
 8007922:	e7f3      	b.n	800790c <_vfiprintf_r+0x44>
 8007924:	2300      	movs	r3, #0
 8007926:	9309      	str	r3, [sp, #36]	; 0x24
 8007928:	2320      	movs	r3, #32
 800792a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800792e:	2330      	movs	r3, #48	; 0x30
 8007930:	f04f 0901 	mov.w	r9, #1
 8007934:	f8cd 800c 	str.w	r8, [sp, #12]
 8007938:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8007ae8 <_vfiprintf_r+0x220>
 800793c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007940:	4623      	mov	r3, r4
 8007942:	469a      	mov	sl, r3
 8007944:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007948:	b10a      	cbz	r2, 800794e <_vfiprintf_r+0x86>
 800794a:	2a25      	cmp	r2, #37	; 0x25
 800794c:	d1f9      	bne.n	8007942 <_vfiprintf_r+0x7a>
 800794e:	ebba 0b04 	subs.w	fp, sl, r4
 8007952:	d00b      	beq.n	800796c <_vfiprintf_r+0xa4>
 8007954:	465b      	mov	r3, fp
 8007956:	4622      	mov	r2, r4
 8007958:	4629      	mov	r1, r5
 800795a:	4630      	mov	r0, r6
 800795c:	f7ff ffa1 	bl	80078a2 <__sfputs_r>
 8007960:	3001      	adds	r0, #1
 8007962:	f000 80a9 	beq.w	8007ab8 <_vfiprintf_r+0x1f0>
 8007966:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007968:	445a      	add	r2, fp
 800796a:	9209      	str	r2, [sp, #36]	; 0x24
 800796c:	f89a 3000 	ldrb.w	r3, [sl]
 8007970:	2b00      	cmp	r3, #0
 8007972:	f000 80a1 	beq.w	8007ab8 <_vfiprintf_r+0x1f0>
 8007976:	2300      	movs	r3, #0
 8007978:	f04f 32ff 	mov.w	r2, #4294967295
 800797c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007980:	f10a 0a01 	add.w	sl, sl, #1
 8007984:	9304      	str	r3, [sp, #16]
 8007986:	9307      	str	r3, [sp, #28]
 8007988:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800798c:	931a      	str	r3, [sp, #104]	; 0x68
 800798e:	4654      	mov	r4, sl
 8007990:	2205      	movs	r2, #5
 8007992:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007996:	4854      	ldr	r0, [pc, #336]	; (8007ae8 <_vfiprintf_r+0x220>)
 8007998:	f000 fb9c 	bl	80080d4 <memchr>
 800799c:	9a04      	ldr	r2, [sp, #16]
 800799e:	b9d8      	cbnz	r0, 80079d8 <_vfiprintf_r+0x110>
 80079a0:	06d1      	lsls	r1, r2, #27
 80079a2:	bf44      	itt	mi
 80079a4:	2320      	movmi	r3, #32
 80079a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80079aa:	0713      	lsls	r3, r2, #28
 80079ac:	bf44      	itt	mi
 80079ae:	232b      	movmi	r3, #43	; 0x2b
 80079b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80079b4:	f89a 3000 	ldrb.w	r3, [sl]
 80079b8:	2b2a      	cmp	r3, #42	; 0x2a
 80079ba:	d015      	beq.n	80079e8 <_vfiprintf_r+0x120>
 80079bc:	4654      	mov	r4, sl
 80079be:	2000      	movs	r0, #0
 80079c0:	f04f 0c0a 	mov.w	ip, #10
 80079c4:	9a07      	ldr	r2, [sp, #28]
 80079c6:	4621      	mov	r1, r4
 80079c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80079cc:	3b30      	subs	r3, #48	; 0x30
 80079ce:	2b09      	cmp	r3, #9
 80079d0:	d94d      	bls.n	8007a6e <_vfiprintf_r+0x1a6>
 80079d2:	b1b0      	cbz	r0, 8007a02 <_vfiprintf_r+0x13a>
 80079d4:	9207      	str	r2, [sp, #28]
 80079d6:	e014      	b.n	8007a02 <_vfiprintf_r+0x13a>
 80079d8:	eba0 0308 	sub.w	r3, r0, r8
 80079dc:	fa09 f303 	lsl.w	r3, r9, r3
 80079e0:	4313      	orrs	r3, r2
 80079e2:	46a2      	mov	sl, r4
 80079e4:	9304      	str	r3, [sp, #16]
 80079e6:	e7d2      	b.n	800798e <_vfiprintf_r+0xc6>
 80079e8:	9b03      	ldr	r3, [sp, #12]
 80079ea:	1d19      	adds	r1, r3, #4
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	9103      	str	r1, [sp, #12]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	bfbb      	ittet	lt
 80079f4:	425b      	neglt	r3, r3
 80079f6:	f042 0202 	orrlt.w	r2, r2, #2
 80079fa:	9307      	strge	r3, [sp, #28]
 80079fc:	9307      	strlt	r3, [sp, #28]
 80079fe:	bfb8      	it	lt
 8007a00:	9204      	strlt	r2, [sp, #16]
 8007a02:	7823      	ldrb	r3, [r4, #0]
 8007a04:	2b2e      	cmp	r3, #46	; 0x2e
 8007a06:	d10c      	bne.n	8007a22 <_vfiprintf_r+0x15a>
 8007a08:	7863      	ldrb	r3, [r4, #1]
 8007a0a:	2b2a      	cmp	r3, #42	; 0x2a
 8007a0c:	d134      	bne.n	8007a78 <_vfiprintf_r+0x1b0>
 8007a0e:	9b03      	ldr	r3, [sp, #12]
 8007a10:	3402      	adds	r4, #2
 8007a12:	1d1a      	adds	r2, r3, #4
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	9203      	str	r2, [sp, #12]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	bfb8      	it	lt
 8007a1c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007a20:	9305      	str	r3, [sp, #20]
 8007a22:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007aec <_vfiprintf_r+0x224>
 8007a26:	2203      	movs	r2, #3
 8007a28:	4650      	mov	r0, sl
 8007a2a:	7821      	ldrb	r1, [r4, #0]
 8007a2c:	f000 fb52 	bl	80080d4 <memchr>
 8007a30:	b138      	cbz	r0, 8007a42 <_vfiprintf_r+0x17a>
 8007a32:	2240      	movs	r2, #64	; 0x40
 8007a34:	9b04      	ldr	r3, [sp, #16]
 8007a36:	eba0 000a 	sub.w	r0, r0, sl
 8007a3a:	4082      	lsls	r2, r0
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	3401      	adds	r4, #1
 8007a40:	9304      	str	r3, [sp, #16]
 8007a42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a46:	2206      	movs	r2, #6
 8007a48:	4829      	ldr	r0, [pc, #164]	; (8007af0 <_vfiprintf_r+0x228>)
 8007a4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007a4e:	f000 fb41 	bl	80080d4 <memchr>
 8007a52:	2800      	cmp	r0, #0
 8007a54:	d03f      	beq.n	8007ad6 <_vfiprintf_r+0x20e>
 8007a56:	4b27      	ldr	r3, [pc, #156]	; (8007af4 <_vfiprintf_r+0x22c>)
 8007a58:	bb1b      	cbnz	r3, 8007aa2 <_vfiprintf_r+0x1da>
 8007a5a:	9b03      	ldr	r3, [sp, #12]
 8007a5c:	3307      	adds	r3, #7
 8007a5e:	f023 0307 	bic.w	r3, r3, #7
 8007a62:	3308      	adds	r3, #8
 8007a64:	9303      	str	r3, [sp, #12]
 8007a66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a68:	443b      	add	r3, r7
 8007a6a:	9309      	str	r3, [sp, #36]	; 0x24
 8007a6c:	e768      	b.n	8007940 <_vfiprintf_r+0x78>
 8007a6e:	460c      	mov	r4, r1
 8007a70:	2001      	movs	r0, #1
 8007a72:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a76:	e7a6      	b.n	80079c6 <_vfiprintf_r+0xfe>
 8007a78:	2300      	movs	r3, #0
 8007a7a:	f04f 0c0a 	mov.w	ip, #10
 8007a7e:	4619      	mov	r1, r3
 8007a80:	3401      	adds	r4, #1
 8007a82:	9305      	str	r3, [sp, #20]
 8007a84:	4620      	mov	r0, r4
 8007a86:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a8a:	3a30      	subs	r2, #48	; 0x30
 8007a8c:	2a09      	cmp	r2, #9
 8007a8e:	d903      	bls.n	8007a98 <_vfiprintf_r+0x1d0>
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d0c6      	beq.n	8007a22 <_vfiprintf_r+0x15a>
 8007a94:	9105      	str	r1, [sp, #20]
 8007a96:	e7c4      	b.n	8007a22 <_vfiprintf_r+0x15a>
 8007a98:	4604      	mov	r4, r0
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007aa0:	e7f0      	b.n	8007a84 <_vfiprintf_r+0x1bc>
 8007aa2:	ab03      	add	r3, sp, #12
 8007aa4:	9300      	str	r3, [sp, #0]
 8007aa6:	462a      	mov	r2, r5
 8007aa8:	4630      	mov	r0, r6
 8007aaa:	4b13      	ldr	r3, [pc, #76]	; (8007af8 <_vfiprintf_r+0x230>)
 8007aac:	a904      	add	r1, sp, #16
 8007aae:	f3af 8000 	nop.w
 8007ab2:	4607      	mov	r7, r0
 8007ab4:	1c78      	adds	r0, r7, #1
 8007ab6:	d1d6      	bne.n	8007a66 <_vfiprintf_r+0x19e>
 8007ab8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007aba:	07d9      	lsls	r1, r3, #31
 8007abc:	d405      	bmi.n	8007aca <_vfiprintf_r+0x202>
 8007abe:	89ab      	ldrh	r3, [r5, #12]
 8007ac0:	059a      	lsls	r2, r3, #22
 8007ac2:	d402      	bmi.n	8007aca <_vfiprintf_r+0x202>
 8007ac4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ac6:	f7ff fc8a 	bl	80073de <__retarget_lock_release_recursive>
 8007aca:	89ab      	ldrh	r3, [r5, #12]
 8007acc:	065b      	lsls	r3, r3, #25
 8007ace:	f53f af1d 	bmi.w	800790c <_vfiprintf_r+0x44>
 8007ad2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ad4:	e71c      	b.n	8007910 <_vfiprintf_r+0x48>
 8007ad6:	ab03      	add	r3, sp, #12
 8007ad8:	9300      	str	r3, [sp, #0]
 8007ada:	462a      	mov	r2, r5
 8007adc:	4630      	mov	r0, r6
 8007ade:	4b06      	ldr	r3, [pc, #24]	; (8007af8 <_vfiprintf_r+0x230>)
 8007ae0:	a904      	add	r1, sp, #16
 8007ae2:	f000 f87d 	bl	8007be0 <_printf_i>
 8007ae6:	e7e4      	b.n	8007ab2 <_vfiprintf_r+0x1ea>
 8007ae8:	08008396 	.word	0x08008396
 8007aec:	0800839c 	.word	0x0800839c
 8007af0:	080083a0 	.word	0x080083a0
 8007af4:	00000000 	.word	0x00000000
 8007af8:	080078a3 	.word	0x080078a3

08007afc <_printf_common>:
 8007afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b00:	4616      	mov	r6, r2
 8007b02:	4699      	mov	r9, r3
 8007b04:	688a      	ldr	r2, [r1, #8]
 8007b06:	690b      	ldr	r3, [r1, #16]
 8007b08:	4607      	mov	r7, r0
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	bfb8      	it	lt
 8007b0e:	4613      	movlt	r3, r2
 8007b10:	6033      	str	r3, [r6, #0]
 8007b12:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007b16:	460c      	mov	r4, r1
 8007b18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007b1c:	b10a      	cbz	r2, 8007b22 <_printf_common+0x26>
 8007b1e:	3301      	adds	r3, #1
 8007b20:	6033      	str	r3, [r6, #0]
 8007b22:	6823      	ldr	r3, [r4, #0]
 8007b24:	0699      	lsls	r1, r3, #26
 8007b26:	bf42      	ittt	mi
 8007b28:	6833      	ldrmi	r3, [r6, #0]
 8007b2a:	3302      	addmi	r3, #2
 8007b2c:	6033      	strmi	r3, [r6, #0]
 8007b2e:	6825      	ldr	r5, [r4, #0]
 8007b30:	f015 0506 	ands.w	r5, r5, #6
 8007b34:	d106      	bne.n	8007b44 <_printf_common+0x48>
 8007b36:	f104 0a19 	add.w	sl, r4, #25
 8007b3a:	68e3      	ldr	r3, [r4, #12]
 8007b3c:	6832      	ldr	r2, [r6, #0]
 8007b3e:	1a9b      	subs	r3, r3, r2
 8007b40:	42ab      	cmp	r3, r5
 8007b42:	dc2b      	bgt.n	8007b9c <_printf_common+0xa0>
 8007b44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007b48:	1e13      	subs	r3, r2, #0
 8007b4a:	6822      	ldr	r2, [r4, #0]
 8007b4c:	bf18      	it	ne
 8007b4e:	2301      	movne	r3, #1
 8007b50:	0692      	lsls	r2, r2, #26
 8007b52:	d430      	bmi.n	8007bb6 <_printf_common+0xba>
 8007b54:	4649      	mov	r1, r9
 8007b56:	4638      	mov	r0, r7
 8007b58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007b5c:	47c0      	blx	r8
 8007b5e:	3001      	adds	r0, #1
 8007b60:	d023      	beq.n	8007baa <_printf_common+0xae>
 8007b62:	6823      	ldr	r3, [r4, #0]
 8007b64:	6922      	ldr	r2, [r4, #16]
 8007b66:	f003 0306 	and.w	r3, r3, #6
 8007b6a:	2b04      	cmp	r3, #4
 8007b6c:	bf14      	ite	ne
 8007b6e:	2500      	movne	r5, #0
 8007b70:	6833      	ldreq	r3, [r6, #0]
 8007b72:	f04f 0600 	mov.w	r6, #0
 8007b76:	bf08      	it	eq
 8007b78:	68e5      	ldreq	r5, [r4, #12]
 8007b7a:	f104 041a 	add.w	r4, r4, #26
 8007b7e:	bf08      	it	eq
 8007b80:	1aed      	subeq	r5, r5, r3
 8007b82:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007b86:	bf08      	it	eq
 8007b88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	bfc4      	itt	gt
 8007b90:	1a9b      	subgt	r3, r3, r2
 8007b92:	18ed      	addgt	r5, r5, r3
 8007b94:	42b5      	cmp	r5, r6
 8007b96:	d11a      	bne.n	8007bce <_printf_common+0xd2>
 8007b98:	2000      	movs	r0, #0
 8007b9a:	e008      	b.n	8007bae <_printf_common+0xb2>
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	4652      	mov	r2, sl
 8007ba0:	4649      	mov	r1, r9
 8007ba2:	4638      	mov	r0, r7
 8007ba4:	47c0      	blx	r8
 8007ba6:	3001      	adds	r0, #1
 8007ba8:	d103      	bne.n	8007bb2 <_printf_common+0xb6>
 8007baa:	f04f 30ff 	mov.w	r0, #4294967295
 8007bae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bb2:	3501      	adds	r5, #1
 8007bb4:	e7c1      	b.n	8007b3a <_printf_common+0x3e>
 8007bb6:	2030      	movs	r0, #48	; 0x30
 8007bb8:	18e1      	adds	r1, r4, r3
 8007bba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007bbe:	1c5a      	adds	r2, r3, #1
 8007bc0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007bc4:	4422      	add	r2, r4
 8007bc6:	3302      	adds	r3, #2
 8007bc8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007bcc:	e7c2      	b.n	8007b54 <_printf_common+0x58>
 8007bce:	2301      	movs	r3, #1
 8007bd0:	4622      	mov	r2, r4
 8007bd2:	4649      	mov	r1, r9
 8007bd4:	4638      	mov	r0, r7
 8007bd6:	47c0      	blx	r8
 8007bd8:	3001      	adds	r0, #1
 8007bda:	d0e6      	beq.n	8007baa <_printf_common+0xae>
 8007bdc:	3601      	adds	r6, #1
 8007bde:	e7d9      	b.n	8007b94 <_printf_common+0x98>

08007be0 <_printf_i>:
 8007be0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007be4:	7e0f      	ldrb	r7, [r1, #24]
 8007be6:	4691      	mov	r9, r2
 8007be8:	2f78      	cmp	r7, #120	; 0x78
 8007bea:	4680      	mov	r8, r0
 8007bec:	460c      	mov	r4, r1
 8007bee:	469a      	mov	sl, r3
 8007bf0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007bf2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007bf6:	d807      	bhi.n	8007c08 <_printf_i+0x28>
 8007bf8:	2f62      	cmp	r7, #98	; 0x62
 8007bfa:	d80a      	bhi.n	8007c12 <_printf_i+0x32>
 8007bfc:	2f00      	cmp	r7, #0
 8007bfe:	f000 80d5 	beq.w	8007dac <_printf_i+0x1cc>
 8007c02:	2f58      	cmp	r7, #88	; 0x58
 8007c04:	f000 80c1 	beq.w	8007d8a <_printf_i+0x1aa>
 8007c08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007c10:	e03a      	b.n	8007c88 <_printf_i+0xa8>
 8007c12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007c16:	2b15      	cmp	r3, #21
 8007c18:	d8f6      	bhi.n	8007c08 <_printf_i+0x28>
 8007c1a:	a101      	add	r1, pc, #4	; (adr r1, 8007c20 <_printf_i+0x40>)
 8007c1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007c20:	08007c79 	.word	0x08007c79
 8007c24:	08007c8d 	.word	0x08007c8d
 8007c28:	08007c09 	.word	0x08007c09
 8007c2c:	08007c09 	.word	0x08007c09
 8007c30:	08007c09 	.word	0x08007c09
 8007c34:	08007c09 	.word	0x08007c09
 8007c38:	08007c8d 	.word	0x08007c8d
 8007c3c:	08007c09 	.word	0x08007c09
 8007c40:	08007c09 	.word	0x08007c09
 8007c44:	08007c09 	.word	0x08007c09
 8007c48:	08007c09 	.word	0x08007c09
 8007c4c:	08007d93 	.word	0x08007d93
 8007c50:	08007cb9 	.word	0x08007cb9
 8007c54:	08007d4d 	.word	0x08007d4d
 8007c58:	08007c09 	.word	0x08007c09
 8007c5c:	08007c09 	.word	0x08007c09
 8007c60:	08007db5 	.word	0x08007db5
 8007c64:	08007c09 	.word	0x08007c09
 8007c68:	08007cb9 	.word	0x08007cb9
 8007c6c:	08007c09 	.word	0x08007c09
 8007c70:	08007c09 	.word	0x08007c09
 8007c74:	08007d55 	.word	0x08007d55
 8007c78:	682b      	ldr	r3, [r5, #0]
 8007c7a:	1d1a      	adds	r2, r3, #4
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	602a      	str	r2, [r5, #0]
 8007c80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007c88:	2301      	movs	r3, #1
 8007c8a:	e0a0      	b.n	8007dce <_printf_i+0x1ee>
 8007c8c:	6820      	ldr	r0, [r4, #0]
 8007c8e:	682b      	ldr	r3, [r5, #0]
 8007c90:	0607      	lsls	r7, r0, #24
 8007c92:	f103 0104 	add.w	r1, r3, #4
 8007c96:	6029      	str	r1, [r5, #0]
 8007c98:	d501      	bpl.n	8007c9e <_printf_i+0xbe>
 8007c9a:	681e      	ldr	r6, [r3, #0]
 8007c9c:	e003      	b.n	8007ca6 <_printf_i+0xc6>
 8007c9e:	0646      	lsls	r6, r0, #25
 8007ca0:	d5fb      	bpl.n	8007c9a <_printf_i+0xba>
 8007ca2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007ca6:	2e00      	cmp	r6, #0
 8007ca8:	da03      	bge.n	8007cb2 <_printf_i+0xd2>
 8007caa:	232d      	movs	r3, #45	; 0x2d
 8007cac:	4276      	negs	r6, r6
 8007cae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007cb2:	230a      	movs	r3, #10
 8007cb4:	4859      	ldr	r0, [pc, #356]	; (8007e1c <_printf_i+0x23c>)
 8007cb6:	e012      	b.n	8007cde <_printf_i+0xfe>
 8007cb8:	682b      	ldr	r3, [r5, #0]
 8007cba:	6820      	ldr	r0, [r4, #0]
 8007cbc:	1d19      	adds	r1, r3, #4
 8007cbe:	6029      	str	r1, [r5, #0]
 8007cc0:	0605      	lsls	r5, r0, #24
 8007cc2:	d501      	bpl.n	8007cc8 <_printf_i+0xe8>
 8007cc4:	681e      	ldr	r6, [r3, #0]
 8007cc6:	e002      	b.n	8007cce <_printf_i+0xee>
 8007cc8:	0641      	lsls	r1, r0, #25
 8007cca:	d5fb      	bpl.n	8007cc4 <_printf_i+0xe4>
 8007ccc:	881e      	ldrh	r6, [r3, #0]
 8007cce:	2f6f      	cmp	r7, #111	; 0x6f
 8007cd0:	bf0c      	ite	eq
 8007cd2:	2308      	moveq	r3, #8
 8007cd4:	230a      	movne	r3, #10
 8007cd6:	4851      	ldr	r0, [pc, #324]	; (8007e1c <_printf_i+0x23c>)
 8007cd8:	2100      	movs	r1, #0
 8007cda:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007cde:	6865      	ldr	r5, [r4, #4]
 8007ce0:	2d00      	cmp	r5, #0
 8007ce2:	bfa8      	it	ge
 8007ce4:	6821      	ldrge	r1, [r4, #0]
 8007ce6:	60a5      	str	r5, [r4, #8]
 8007ce8:	bfa4      	itt	ge
 8007cea:	f021 0104 	bicge.w	r1, r1, #4
 8007cee:	6021      	strge	r1, [r4, #0]
 8007cf0:	b90e      	cbnz	r6, 8007cf6 <_printf_i+0x116>
 8007cf2:	2d00      	cmp	r5, #0
 8007cf4:	d04b      	beq.n	8007d8e <_printf_i+0x1ae>
 8007cf6:	4615      	mov	r5, r2
 8007cf8:	fbb6 f1f3 	udiv	r1, r6, r3
 8007cfc:	fb03 6711 	mls	r7, r3, r1, r6
 8007d00:	5dc7      	ldrb	r7, [r0, r7]
 8007d02:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007d06:	4637      	mov	r7, r6
 8007d08:	42bb      	cmp	r3, r7
 8007d0a:	460e      	mov	r6, r1
 8007d0c:	d9f4      	bls.n	8007cf8 <_printf_i+0x118>
 8007d0e:	2b08      	cmp	r3, #8
 8007d10:	d10b      	bne.n	8007d2a <_printf_i+0x14a>
 8007d12:	6823      	ldr	r3, [r4, #0]
 8007d14:	07de      	lsls	r6, r3, #31
 8007d16:	d508      	bpl.n	8007d2a <_printf_i+0x14a>
 8007d18:	6923      	ldr	r3, [r4, #16]
 8007d1a:	6861      	ldr	r1, [r4, #4]
 8007d1c:	4299      	cmp	r1, r3
 8007d1e:	bfde      	ittt	le
 8007d20:	2330      	movle	r3, #48	; 0x30
 8007d22:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007d26:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007d2a:	1b52      	subs	r2, r2, r5
 8007d2c:	6122      	str	r2, [r4, #16]
 8007d2e:	464b      	mov	r3, r9
 8007d30:	4621      	mov	r1, r4
 8007d32:	4640      	mov	r0, r8
 8007d34:	f8cd a000 	str.w	sl, [sp]
 8007d38:	aa03      	add	r2, sp, #12
 8007d3a:	f7ff fedf 	bl	8007afc <_printf_common>
 8007d3e:	3001      	adds	r0, #1
 8007d40:	d14a      	bne.n	8007dd8 <_printf_i+0x1f8>
 8007d42:	f04f 30ff 	mov.w	r0, #4294967295
 8007d46:	b004      	add	sp, #16
 8007d48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d4c:	6823      	ldr	r3, [r4, #0]
 8007d4e:	f043 0320 	orr.w	r3, r3, #32
 8007d52:	6023      	str	r3, [r4, #0]
 8007d54:	2778      	movs	r7, #120	; 0x78
 8007d56:	4832      	ldr	r0, [pc, #200]	; (8007e20 <_printf_i+0x240>)
 8007d58:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007d5c:	6823      	ldr	r3, [r4, #0]
 8007d5e:	6829      	ldr	r1, [r5, #0]
 8007d60:	061f      	lsls	r7, r3, #24
 8007d62:	f851 6b04 	ldr.w	r6, [r1], #4
 8007d66:	d402      	bmi.n	8007d6e <_printf_i+0x18e>
 8007d68:	065f      	lsls	r7, r3, #25
 8007d6a:	bf48      	it	mi
 8007d6c:	b2b6      	uxthmi	r6, r6
 8007d6e:	07df      	lsls	r7, r3, #31
 8007d70:	bf48      	it	mi
 8007d72:	f043 0320 	orrmi.w	r3, r3, #32
 8007d76:	6029      	str	r1, [r5, #0]
 8007d78:	bf48      	it	mi
 8007d7a:	6023      	strmi	r3, [r4, #0]
 8007d7c:	b91e      	cbnz	r6, 8007d86 <_printf_i+0x1a6>
 8007d7e:	6823      	ldr	r3, [r4, #0]
 8007d80:	f023 0320 	bic.w	r3, r3, #32
 8007d84:	6023      	str	r3, [r4, #0]
 8007d86:	2310      	movs	r3, #16
 8007d88:	e7a6      	b.n	8007cd8 <_printf_i+0xf8>
 8007d8a:	4824      	ldr	r0, [pc, #144]	; (8007e1c <_printf_i+0x23c>)
 8007d8c:	e7e4      	b.n	8007d58 <_printf_i+0x178>
 8007d8e:	4615      	mov	r5, r2
 8007d90:	e7bd      	b.n	8007d0e <_printf_i+0x12e>
 8007d92:	682b      	ldr	r3, [r5, #0]
 8007d94:	6826      	ldr	r6, [r4, #0]
 8007d96:	1d18      	adds	r0, r3, #4
 8007d98:	6961      	ldr	r1, [r4, #20]
 8007d9a:	6028      	str	r0, [r5, #0]
 8007d9c:	0635      	lsls	r5, r6, #24
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	d501      	bpl.n	8007da6 <_printf_i+0x1c6>
 8007da2:	6019      	str	r1, [r3, #0]
 8007da4:	e002      	b.n	8007dac <_printf_i+0x1cc>
 8007da6:	0670      	lsls	r0, r6, #25
 8007da8:	d5fb      	bpl.n	8007da2 <_printf_i+0x1c2>
 8007daa:	8019      	strh	r1, [r3, #0]
 8007dac:	2300      	movs	r3, #0
 8007dae:	4615      	mov	r5, r2
 8007db0:	6123      	str	r3, [r4, #16]
 8007db2:	e7bc      	b.n	8007d2e <_printf_i+0x14e>
 8007db4:	682b      	ldr	r3, [r5, #0]
 8007db6:	2100      	movs	r1, #0
 8007db8:	1d1a      	adds	r2, r3, #4
 8007dba:	602a      	str	r2, [r5, #0]
 8007dbc:	681d      	ldr	r5, [r3, #0]
 8007dbe:	6862      	ldr	r2, [r4, #4]
 8007dc0:	4628      	mov	r0, r5
 8007dc2:	f000 f987 	bl	80080d4 <memchr>
 8007dc6:	b108      	cbz	r0, 8007dcc <_printf_i+0x1ec>
 8007dc8:	1b40      	subs	r0, r0, r5
 8007dca:	6060      	str	r0, [r4, #4]
 8007dcc:	6863      	ldr	r3, [r4, #4]
 8007dce:	6123      	str	r3, [r4, #16]
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007dd6:	e7aa      	b.n	8007d2e <_printf_i+0x14e>
 8007dd8:	462a      	mov	r2, r5
 8007dda:	4649      	mov	r1, r9
 8007ddc:	4640      	mov	r0, r8
 8007dde:	6923      	ldr	r3, [r4, #16]
 8007de0:	47d0      	blx	sl
 8007de2:	3001      	adds	r0, #1
 8007de4:	d0ad      	beq.n	8007d42 <_printf_i+0x162>
 8007de6:	6823      	ldr	r3, [r4, #0]
 8007de8:	079b      	lsls	r3, r3, #30
 8007dea:	d413      	bmi.n	8007e14 <_printf_i+0x234>
 8007dec:	68e0      	ldr	r0, [r4, #12]
 8007dee:	9b03      	ldr	r3, [sp, #12]
 8007df0:	4298      	cmp	r0, r3
 8007df2:	bfb8      	it	lt
 8007df4:	4618      	movlt	r0, r3
 8007df6:	e7a6      	b.n	8007d46 <_printf_i+0x166>
 8007df8:	2301      	movs	r3, #1
 8007dfa:	4632      	mov	r2, r6
 8007dfc:	4649      	mov	r1, r9
 8007dfe:	4640      	mov	r0, r8
 8007e00:	47d0      	blx	sl
 8007e02:	3001      	adds	r0, #1
 8007e04:	d09d      	beq.n	8007d42 <_printf_i+0x162>
 8007e06:	3501      	adds	r5, #1
 8007e08:	68e3      	ldr	r3, [r4, #12]
 8007e0a:	9903      	ldr	r1, [sp, #12]
 8007e0c:	1a5b      	subs	r3, r3, r1
 8007e0e:	42ab      	cmp	r3, r5
 8007e10:	dcf2      	bgt.n	8007df8 <_printf_i+0x218>
 8007e12:	e7eb      	b.n	8007dec <_printf_i+0x20c>
 8007e14:	2500      	movs	r5, #0
 8007e16:	f104 0619 	add.w	r6, r4, #25
 8007e1a:	e7f5      	b.n	8007e08 <_printf_i+0x228>
 8007e1c:	080083a7 	.word	0x080083a7
 8007e20:	080083b8 	.word	0x080083b8

08007e24 <__sflush_r>:
 8007e24:	898a      	ldrh	r2, [r1, #12]
 8007e26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e28:	4605      	mov	r5, r0
 8007e2a:	0710      	lsls	r0, r2, #28
 8007e2c:	460c      	mov	r4, r1
 8007e2e:	d457      	bmi.n	8007ee0 <__sflush_r+0xbc>
 8007e30:	684b      	ldr	r3, [r1, #4]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	dc04      	bgt.n	8007e40 <__sflush_r+0x1c>
 8007e36:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	dc01      	bgt.n	8007e40 <__sflush_r+0x1c>
 8007e3c:	2000      	movs	r0, #0
 8007e3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e42:	2e00      	cmp	r6, #0
 8007e44:	d0fa      	beq.n	8007e3c <__sflush_r+0x18>
 8007e46:	2300      	movs	r3, #0
 8007e48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007e4c:	682f      	ldr	r7, [r5, #0]
 8007e4e:	6a21      	ldr	r1, [r4, #32]
 8007e50:	602b      	str	r3, [r5, #0]
 8007e52:	d032      	beq.n	8007eba <__sflush_r+0x96>
 8007e54:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007e56:	89a3      	ldrh	r3, [r4, #12]
 8007e58:	075a      	lsls	r2, r3, #29
 8007e5a:	d505      	bpl.n	8007e68 <__sflush_r+0x44>
 8007e5c:	6863      	ldr	r3, [r4, #4]
 8007e5e:	1ac0      	subs	r0, r0, r3
 8007e60:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007e62:	b10b      	cbz	r3, 8007e68 <__sflush_r+0x44>
 8007e64:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007e66:	1ac0      	subs	r0, r0, r3
 8007e68:	2300      	movs	r3, #0
 8007e6a:	4602      	mov	r2, r0
 8007e6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e6e:	4628      	mov	r0, r5
 8007e70:	6a21      	ldr	r1, [r4, #32]
 8007e72:	47b0      	blx	r6
 8007e74:	1c43      	adds	r3, r0, #1
 8007e76:	89a3      	ldrh	r3, [r4, #12]
 8007e78:	d106      	bne.n	8007e88 <__sflush_r+0x64>
 8007e7a:	6829      	ldr	r1, [r5, #0]
 8007e7c:	291d      	cmp	r1, #29
 8007e7e:	d82b      	bhi.n	8007ed8 <__sflush_r+0xb4>
 8007e80:	4a28      	ldr	r2, [pc, #160]	; (8007f24 <__sflush_r+0x100>)
 8007e82:	410a      	asrs	r2, r1
 8007e84:	07d6      	lsls	r6, r2, #31
 8007e86:	d427      	bmi.n	8007ed8 <__sflush_r+0xb4>
 8007e88:	2200      	movs	r2, #0
 8007e8a:	6062      	str	r2, [r4, #4]
 8007e8c:	6922      	ldr	r2, [r4, #16]
 8007e8e:	04d9      	lsls	r1, r3, #19
 8007e90:	6022      	str	r2, [r4, #0]
 8007e92:	d504      	bpl.n	8007e9e <__sflush_r+0x7a>
 8007e94:	1c42      	adds	r2, r0, #1
 8007e96:	d101      	bne.n	8007e9c <__sflush_r+0x78>
 8007e98:	682b      	ldr	r3, [r5, #0]
 8007e9a:	b903      	cbnz	r3, 8007e9e <__sflush_r+0x7a>
 8007e9c:	6560      	str	r0, [r4, #84]	; 0x54
 8007e9e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007ea0:	602f      	str	r7, [r5, #0]
 8007ea2:	2900      	cmp	r1, #0
 8007ea4:	d0ca      	beq.n	8007e3c <__sflush_r+0x18>
 8007ea6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007eaa:	4299      	cmp	r1, r3
 8007eac:	d002      	beq.n	8007eb4 <__sflush_r+0x90>
 8007eae:	4628      	mov	r0, r5
 8007eb0:	f7ff fa96 	bl	80073e0 <_free_r>
 8007eb4:	2000      	movs	r0, #0
 8007eb6:	6360      	str	r0, [r4, #52]	; 0x34
 8007eb8:	e7c1      	b.n	8007e3e <__sflush_r+0x1a>
 8007eba:	2301      	movs	r3, #1
 8007ebc:	4628      	mov	r0, r5
 8007ebe:	47b0      	blx	r6
 8007ec0:	1c41      	adds	r1, r0, #1
 8007ec2:	d1c8      	bne.n	8007e56 <__sflush_r+0x32>
 8007ec4:	682b      	ldr	r3, [r5, #0]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d0c5      	beq.n	8007e56 <__sflush_r+0x32>
 8007eca:	2b1d      	cmp	r3, #29
 8007ecc:	d001      	beq.n	8007ed2 <__sflush_r+0xae>
 8007ece:	2b16      	cmp	r3, #22
 8007ed0:	d101      	bne.n	8007ed6 <__sflush_r+0xb2>
 8007ed2:	602f      	str	r7, [r5, #0]
 8007ed4:	e7b2      	b.n	8007e3c <__sflush_r+0x18>
 8007ed6:	89a3      	ldrh	r3, [r4, #12]
 8007ed8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007edc:	81a3      	strh	r3, [r4, #12]
 8007ede:	e7ae      	b.n	8007e3e <__sflush_r+0x1a>
 8007ee0:	690f      	ldr	r7, [r1, #16]
 8007ee2:	2f00      	cmp	r7, #0
 8007ee4:	d0aa      	beq.n	8007e3c <__sflush_r+0x18>
 8007ee6:	0793      	lsls	r3, r2, #30
 8007ee8:	bf18      	it	ne
 8007eea:	2300      	movne	r3, #0
 8007eec:	680e      	ldr	r6, [r1, #0]
 8007eee:	bf08      	it	eq
 8007ef0:	694b      	ldreq	r3, [r1, #20]
 8007ef2:	1bf6      	subs	r6, r6, r7
 8007ef4:	600f      	str	r7, [r1, #0]
 8007ef6:	608b      	str	r3, [r1, #8]
 8007ef8:	2e00      	cmp	r6, #0
 8007efa:	dd9f      	ble.n	8007e3c <__sflush_r+0x18>
 8007efc:	4633      	mov	r3, r6
 8007efe:	463a      	mov	r2, r7
 8007f00:	4628      	mov	r0, r5
 8007f02:	6a21      	ldr	r1, [r4, #32]
 8007f04:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007f08:	47e0      	blx	ip
 8007f0a:	2800      	cmp	r0, #0
 8007f0c:	dc06      	bgt.n	8007f1c <__sflush_r+0xf8>
 8007f0e:	89a3      	ldrh	r3, [r4, #12]
 8007f10:	f04f 30ff 	mov.w	r0, #4294967295
 8007f14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f18:	81a3      	strh	r3, [r4, #12]
 8007f1a:	e790      	b.n	8007e3e <__sflush_r+0x1a>
 8007f1c:	4407      	add	r7, r0
 8007f1e:	1a36      	subs	r6, r6, r0
 8007f20:	e7ea      	b.n	8007ef8 <__sflush_r+0xd4>
 8007f22:	bf00      	nop
 8007f24:	dfbffffe 	.word	0xdfbffffe

08007f28 <_fflush_r>:
 8007f28:	b538      	push	{r3, r4, r5, lr}
 8007f2a:	690b      	ldr	r3, [r1, #16]
 8007f2c:	4605      	mov	r5, r0
 8007f2e:	460c      	mov	r4, r1
 8007f30:	b913      	cbnz	r3, 8007f38 <_fflush_r+0x10>
 8007f32:	2500      	movs	r5, #0
 8007f34:	4628      	mov	r0, r5
 8007f36:	bd38      	pop	{r3, r4, r5, pc}
 8007f38:	b118      	cbz	r0, 8007f42 <_fflush_r+0x1a>
 8007f3a:	6a03      	ldr	r3, [r0, #32]
 8007f3c:	b90b      	cbnz	r3, 8007f42 <_fflush_r+0x1a>
 8007f3e:	f7ff f825 	bl	8006f8c <__sinit>
 8007f42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d0f3      	beq.n	8007f32 <_fflush_r+0xa>
 8007f4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007f4c:	07d0      	lsls	r0, r2, #31
 8007f4e:	d404      	bmi.n	8007f5a <_fflush_r+0x32>
 8007f50:	0599      	lsls	r1, r3, #22
 8007f52:	d402      	bmi.n	8007f5a <_fflush_r+0x32>
 8007f54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f56:	f7ff fa41 	bl	80073dc <__retarget_lock_acquire_recursive>
 8007f5a:	4628      	mov	r0, r5
 8007f5c:	4621      	mov	r1, r4
 8007f5e:	f7ff ff61 	bl	8007e24 <__sflush_r>
 8007f62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f64:	4605      	mov	r5, r0
 8007f66:	07da      	lsls	r2, r3, #31
 8007f68:	d4e4      	bmi.n	8007f34 <_fflush_r+0xc>
 8007f6a:	89a3      	ldrh	r3, [r4, #12]
 8007f6c:	059b      	lsls	r3, r3, #22
 8007f6e:	d4e1      	bmi.n	8007f34 <_fflush_r+0xc>
 8007f70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f72:	f7ff fa34 	bl	80073de <__retarget_lock_release_recursive>
 8007f76:	e7dd      	b.n	8007f34 <_fflush_r+0xc>

08007f78 <__swhatbuf_r>:
 8007f78:	b570      	push	{r4, r5, r6, lr}
 8007f7a:	460c      	mov	r4, r1
 8007f7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f80:	4615      	mov	r5, r2
 8007f82:	2900      	cmp	r1, #0
 8007f84:	461e      	mov	r6, r3
 8007f86:	b096      	sub	sp, #88	; 0x58
 8007f88:	da0c      	bge.n	8007fa4 <__swhatbuf_r+0x2c>
 8007f8a:	89a3      	ldrh	r3, [r4, #12]
 8007f8c:	2100      	movs	r1, #0
 8007f8e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007f92:	bf0c      	ite	eq
 8007f94:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007f98:	2340      	movne	r3, #64	; 0x40
 8007f9a:	2000      	movs	r0, #0
 8007f9c:	6031      	str	r1, [r6, #0]
 8007f9e:	602b      	str	r3, [r5, #0]
 8007fa0:	b016      	add	sp, #88	; 0x58
 8007fa2:	bd70      	pop	{r4, r5, r6, pc}
 8007fa4:	466a      	mov	r2, sp
 8007fa6:	f000 f863 	bl	8008070 <_fstat_r>
 8007faa:	2800      	cmp	r0, #0
 8007fac:	dbed      	blt.n	8007f8a <__swhatbuf_r+0x12>
 8007fae:	9901      	ldr	r1, [sp, #4]
 8007fb0:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007fb4:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007fb8:	4259      	negs	r1, r3
 8007fba:	4159      	adcs	r1, r3
 8007fbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007fc0:	e7eb      	b.n	8007f9a <__swhatbuf_r+0x22>

08007fc2 <__smakebuf_r>:
 8007fc2:	898b      	ldrh	r3, [r1, #12]
 8007fc4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007fc6:	079d      	lsls	r5, r3, #30
 8007fc8:	4606      	mov	r6, r0
 8007fca:	460c      	mov	r4, r1
 8007fcc:	d507      	bpl.n	8007fde <__smakebuf_r+0x1c>
 8007fce:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007fd2:	6023      	str	r3, [r4, #0]
 8007fd4:	6123      	str	r3, [r4, #16]
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	6163      	str	r3, [r4, #20]
 8007fda:	b002      	add	sp, #8
 8007fdc:	bd70      	pop	{r4, r5, r6, pc}
 8007fde:	466a      	mov	r2, sp
 8007fe0:	ab01      	add	r3, sp, #4
 8007fe2:	f7ff ffc9 	bl	8007f78 <__swhatbuf_r>
 8007fe6:	9900      	ldr	r1, [sp, #0]
 8007fe8:	4605      	mov	r5, r0
 8007fea:	4630      	mov	r0, r6
 8007fec:	f7ff fa60 	bl	80074b0 <_malloc_r>
 8007ff0:	b948      	cbnz	r0, 8008006 <__smakebuf_r+0x44>
 8007ff2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ff6:	059a      	lsls	r2, r3, #22
 8007ff8:	d4ef      	bmi.n	8007fda <__smakebuf_r+0x18>
 8007ffa:	f023 0303 	bic.w	r3, r3, #3
 8007ffe:	f043 0302 	orr.w	r3, r3, #2
 8008002:	81a3      	strh	r3, [r4, #12]
 8008004:	e7e3      	b.n	8007fce <__smakebuf_r+0xc>
 8008006:	89a3      	ldrh	r3, [r4, #12]
 8008008:	6020      	str	r0, [r4, #0]
 800800a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800800e:	81a3      	strh	r3, [r4, #12]
 8008010:	9b00      	ldr	r3, [sp, #0]
 8008012:	6120      	str	r0, [r4, #16]
 8008014:	6163      	str	r3, [r4, #20]
 8008016:	9b01      	ldr	r3, [sp, #4]
 8008018:	b15b      	cbz	r3, 8008032 <__smakebuf_r+0x70>
 800801a:	4630      	mov	r0, r6
 800801c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008020:	f000 f838 	bl	8008094 <_isatty_r>
 8008024:	b128      	cbz	r0, 8008032 <__smakebuf_r+0x70>
 8008026:	89a3      	ldrh	r3, [r4, #12]
 8008028:	f023 0303 	bic.w	r3, r3, #3
 800802c:	f043 0301 	orr.w	r3, r3, #1
 8008030:	81a3      	strh	r3, [r4, #12]
 8008032:	89a3      	ldrh	r3, [r4, #12]
 8008034:	431d      	orrs	r5, r3
 8008036:	81a5      	strh	r5, [r4, #12]
 8008038:	e7cf      	b.n	8007fda <__smakebuf_r+0x18>

0800803a <memmove>:
 800803a:	4288      	cmp	r0, r1
 800803c:	b510      	push	{r4, lr}
 800803e:	eb01 0402 	add.w	r4, r1, r2
 8008042:	d902      	bls.n	800804a <memmove+0x10>
 8008044:	4284      	cmp	r4, r0
 8008046:	4623      	mov	r3, r4
 8008048:	d807      	bhi.n	800805a <memmove+0x20>
 800804a:	1e43      	subs	r3, r0, #1
 800804c:	42a1      	cmp	r1, r4
 800804e:	d008      	beq.n	8008062 <memmove+0x28>
 8008050:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008054:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008058:	e7f8      	b.n	800804c <memmove+0x12>
 800805a:	4601      	mov	r1, r0
 800805c:	4402      	add	r2, r0
 800805e:	428a      	cmp	r2, r1
 8008060:	d100      	bne.n	8008064 <memmove+0x2a>
 8008062:	bd10      	pop	{r4, pc}
 8008064:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008068:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800806c:	e7f7      	b.n	800805e <memmove+0x24>
	...

08008070 <_fstat_r>:
 8008070:	b538      	push	{r3, r4, r5, lr}
 8008072:	2300      	movs	r3, #0
 8008074:	4d06      	ldr	r5, [pc, #24]	; (8008090 <_fstat_r+0x20>)
 8008076:	4604      	mov	r4, r0
 8008078:	4608      	mov	r0, r1
 800807a:	4611      	mov	r1, r2
 800807c:	602b      	str	r3, [r5, #0]
 800807e:	f7fa ff85 	bl	8002f8c <_fstat>
 8008082:	1c43      	adds	r3, r0, #1
 8008084:	d102      	bne.n	800808c <_fstat_r+0x1c>
 8008086:	682b      	ldr	r3, [r5, #0]
 8008088:	b103      	cbz	r3, 800808c <_fstat_r+0x1c>
 800808a:	6023      	str	r3, [r4, #0]
 800808c:	bd38      	pop	{r3, r4, r5, pc}
 800808e:	bf00      	nop
 8008090:	20000628 	.word	0x20000628

08008094 <_isatty_r>:
 8008094:	b538      	push	{r3, r4, r5, lr}
 8008096:	2300      	movs	r3, #0
 8008098:	4d05      	ldr	r5, [pc, #20]	; (80080b0 <_isatty_r+0x1c>)
 800809a:	4604      	mov	r4, r0
 800809c:	4608      	mov	r0, r1
 800809e:	602b      	str	r3, [r5, #0]
 80080a0:	f7fa ff83 	bl	8002faa <_isatty>
 80080a4:	1c43      	adds	r3, r0, #1
 80080a6:	d102      	bne.n	80080ae <_isatty_r+0x1a>
 80080a8:	682b      	ldr	r3, [r5, #0]
 80080aa:	b103      	cbz	r3, 80080ae <_isatty_r+0x1a>
 80080ac:	6023      	str	r3, [r4, #0]
 80080ae:	bd38      	pop	{r3, r4, r5, pc}
 80080b0:	20000628 	.word	0x20000628

080080b4 <_sbrk_r>:
 80080b4:	b538      	push	{r3, r4, r5, lr}
 80080b6:	2300      	movs	r3, #0
 80080b8:	4d05      	ldr	r5, [pc, #20]	; (80080d0 <_sbrk_r+0x1c>)
 80080ba:	4604      	mov	r4, r0
 80080bc:	4608      	mov	r0, r1
 80080be:	602b      	str	r3, [r5, #0]
 80080c0:	f7fa ff8a 	bl	8002fd8 <_sbrk>
 80080c4:	1c43      	adds	r3, r0, #1
 80080c6:	d102      	bne.n	80080ce <_sbrk_r+0x1a>
 80080c8:	682b      	ldr	r3, [r5, #0]
 80080ca:	b103      	cbz	r3, 80080ce <_sbrk_r+0x1a>
 80080cc:	6023      	str	r3, [r4, #0]
 80080ce:	bd38      	pop	{r3, r4, r5, pc}
 80080d0:	20000628 	.word	0x20000628

080080d4 <memchr>:
 80080d4:	4603      	mov	r3, r0
 80080d6:	b510      	push	{r4, lr}
 80080d8:	b2c9      	uxtb	r1, r1
 80080da:	4402      	add	r2, r0
 80080dc:	4293      	cmp	r3, r2
 80080de:	4618      	mov	r0, r3
 80080e0:	d101      	bne.n	80080e6 <memchr+0x12>
 80080e2:	2000      	movs	r0, #0
 80080e4:	e003      	b.n	80080ee <memchr+0x1a>
 80080e6:	7804      	ldrb	r4, [r0, #0]
 80080e8:	3301      	adds	r3, #1
 80080ea:	428c      	cmp	r4, r1
 80080ec:	d1f6      	bne.n	80080dc <memchr+0x8>
 80080ee:	bd10      	pop	{r4, pc}

080080f0 <memcpy>:
 80080f0:	440a      	add	r2, r1
 80080f2:	4291      	cmp	r1, r2
 80080f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80080f8:	d100      	bne.n	80080fc <memcpy+0xc>
 80080fa:	4770      	bx	lr
 80080fc:	b510      	push	{r4, lr}
 80080fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008102:	4291      	cmp	r1, r2
 8008104:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008108:	d1f9      	bne.n	80080fe <memcpy+0xe>
 800810a:	bd10      	pop	{r4, pc}

0800810c <_realloc_r>:
 800810c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008110:	4680      	mov	r8, r0
 8008112:	4614      	mov	r4, r2
 8008114:	460e      	mov	r6, r1
 8008116:	b921      	cbnz	r1, 8008122 <_realloc_r+0x16>
 8008118:	4611      	mov	r1, r2
 800811a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800811e:	f7ff b9c7 	b.w	80074b0 <_malloc_r>
 8008122:	b92a      	cbnz	r2, 8008130 <_realloc_r+0x24>
 8008124:	f7ff f95c 	bl	80073e0 <_free_r>
 8008128:	4625      	mov	r5, r4
 800812a:	4628      	mov	r0, r5
 800812c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008130:	f000 f81b 	bl	800816a <_malloc_usable_size_r>
 8008134:	4284      	cmp	r4, r0
 8008136:	4607      	mov	r7, r0
 8008138:	d802      	bhi.n	8008140 <_realloc_r+0x34>
 800813a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800813e:	d812      	bhi.n	8008166 <_realloc_r+0x5a>
 8008140:	4621      	mov	r1, r4
 8008142:	4640      	mov	r0, r8
 8008144:	f7ff f9b4 	bl	80074b0 <_malloc_r>
 8008148:	4605      	mov	r5, r0
 800814a:	2800      	cmp	r0, #0
 800814c:	d0ed      	beq.n	800812a <_realloc_r+0x1e>
 800814e:	42bc      	cmp	r4, r7
 8008150:	4622      	mov	r2, r4
 8008152:	4631      	mov	r1, r6
 8008154:	bf28      	it	cs
 8008156:	463a      	movcs	r2, r7
 8008158:	f7ff ffca 	bl	80080f0 <memcpy>
 800815c:	4631      	mov	r1, r6
 800815e:	4640      	mov	r0, r8
 8008160:	f7ff f93e 	bl	80073e0 <_free_r>
 8008164:	e7e1      	b.n	800812a <_realloc_r+0x1e>
 8008166:	4635      	mov	r5, r6
 8008168:	e7df      	b.n	800812a <_realloc_r+0x1e>

0800816a <_malloc_usable_size_r>:
 800816a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800816e:	1f18      	subs	r0, r3, #4
 8008170:	2b00      	cmp	r3, #0
 8008172:	bfbc      	itt	lt
 8008174:	580b      	ldrlt	r3, [r1, r0]
 8008176:	18c0      	addlt	r0, r0, r3
 8008178:	4770      	bx	lr
	...

0800817c <_init>:
 800817c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800817e:	bf00      	nop
 8008180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008182:	bc08      	pop	{r3}
 8008184:	469e      	mov	lr, r3
 8008186:	4770      	bx	lr

08008188 <_fini>:
 8008188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800818a:	bf00      	nop
 800818c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800818e:	bc08      	pop	{r3}
 8008190:	469e      	mov	lr, r3
 8008192:	4770      	bx	lr
